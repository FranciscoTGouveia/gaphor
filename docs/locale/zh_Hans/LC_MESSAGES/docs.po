# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001, The Gaphor Development Team
# This file is distributed under the same license as the Gaphor package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
msgid ""
msgstr ""
"Project-Id-Version: Gaphor 3.0.0\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2024-12-30 14:25-0500\n"
"PO-Revision-Date: 2025-06-15 07:01+0000\n"
"Last-Translator: Fabien Liang <zeyue.liang@gmail.com>\n"
"Language-Team: Chinese (Simplified Han script) <https://hosted.weblate.org/"
"projects/gaphor/docs-gaphor-org/zh_Hans/>\n"
"Language: zh_Hans\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Plural-Forms: nplurals=1; plural=0;\n"
"X-Generator: Weblate 5.12-dev\n"

#: ../changelog.rst:2
msgid "Change Log"
msgstr "变更履历"

#: ../changelog.rst:4
msgid "Our change log is with the project's source code on `GitHub <https://github.com/gaphor/gaphor/blob/main/CHANGELOG.md>`_."
msgstr ""
"变更履历随项目源代码管理在`GitHub<https://github.com/gaphor/gaphor/blob/main/"
"CHANGELOG.md>`上。"

#: ../changelog.rst:8
msgid "The latest version may not have been released yet."
msgstr "最新版本有可能尚未发布。"

#: ../coffee_machine.md:1
msgid "Tutorial: Coffee Machine"
msgstr "教程：咖啡机"

#: ../coffee_machine.md:4
#: ../first_model.md:4
msgid "In this tutorial we refer to the different parts of the gaphor interface: {ref}`Model Browser <getting_started:model browser>`, [Toolbox](getting_started:toolbox), {ref}`Property Editor <getting_started:property editor>`."
msgstr ""
"在本教程中，我们参考了Gaphor的不同部分界面：{ref}`Model Browser "
"<getting_started:model browser>`, [Toolbox](getting_started:toolbox), {ref}`"
"Property Editor <getting_started:property editor>`。"

#: ../coffee_machine.md:8
msgid "Although the names should speak for themselves, you can check out the [Getting Started](getting_started) page for more information about those sections."
msgstr ""
"尽管名称已经能够反映含义，但是您仍然可以查看 [Getting Started]"
"(getting_started) 页面获得这些章节内容的更多信息。"

#: ../coffee_machine.md:12
#: ../coffee_machine_concept.md:7
#: ../coffee_machine_logical.md:7
msgid "Introduction"
msgstr "介绍"

#: ../coffee_machine.md:14
msgid "In the bustling town of Antville, a colony of ants had formed a Systems Engineering consulting company called AntSource. They value collaboration, transparency, and community-driven engineering, and seeks to empower their employees and customers through open communication and participation in the systems engineering process."
msgstr ""
"在繁忙的蚂蚁镇（Antville），一群蚂蚁成立了一家名为\"蚁源（AntSource）"
"\"的系统工程咨询公司"
"。他们崇尚协作精神、透明化和社区驱动的工程理念，致力于通过开放式沟通及全员参"
"与系统工程流程，赋能员工与客户。"

#: ../coffee_machine.md:20
msgid "The engineers at AntSource all have nicknames that reflect the key principles and concepts of their craft: Qual-ant, Reli-ant, Safe-ant, Usa-ant, and Sust-ant. They were experts in designing and optimizing complex systems, and they took pride in their work."
msgstr ""
"AntSource的工程师们个个都有体现其专业核心准则与理念的绰号：质检蚁（Qual-"
"ant）、可靠蚁（Reli-ant）、安全蚁（Safe-ant）、易用蚁（Usa-ant）和环保蚁"
"（Sust-ant）。这些专家精于复杂系统的设计与优化，并以此为傲。"

#: ../coffee_machine.md:25
msgid "One day, a new client approached AntSource with an unusual request. Cappuccino, a cat who owned a popular coffee shop called Milk & Whiskers Café, needed a custom espresso machine designed specifically for felines. Cats just love their coffee strong, with a creamy and smooth body and topped with the perfect foamy layer of crema. The ants were intrigued by the challenge and immediately set to work."
msgstr ""
"有一天，一位新客户带着特殊需求找到蚁源（AntSource）公司。卡布奇诺（Cappuccino"
"）是一只经营着网红咖啡馆\"牛奶与胡须（Milk & Whiskers Café）\"的猫咪"
"，它需要一台专为猫科动物设计的特制意式咖啡机。毕竟猫咪们最爱的就是浓郁醇厚、"
"丝滑绵密，还要顶着完美泡沫层（crema）的咖啡。这个新奇挑战让蚂蚁工程师们跃跃欲"
"试，立刻投入了研发工作。"

#: ../coffee_machine.md:32
msgid "Qual-ant was responsible for ensuring that the machine met all quality standards and specifications, while Reli-ant was tasked with making sure that the machine was dependable and would work correctly every time it was used. Safe-ant designed the machine with safety in mind, ensuring that it wouldn't cause harm to anyone who used it. Usa-ant designed the machine to be easy and intuitive to use, while Sust-ant ensured that the machine was environmentally friendly and sustainable. In this tutorial we follow the adventures of AntSource to create the perfect kittie espresso machine."
msgstr ""
"Qual-ant（质检蚁）负责确保机器符合所有质量标准和规格要求，Reli-"
"ant（可靠蚁）则肩负保障机器性能可靠、每次使用都能正常运作的任务。Safe-"
"ant（安全蚁）以安全为核心设计机器，确保使用者不会受到伤害。Usa-"
"ant（易用蚁）致力于让机器操作简单直观，而Sust-"
"ant（环保蚁）确保机器环保可持续。本教程将带您跟随AntSource的探索之旅，共同打"
"造完美的猫咪咖啡机。"

#: ../coffee_machine.md:41
msgid "![Two shots of espresso being pulled from an espresso machine.](images/coffee-machine-double-shot.jpg)"
msgstr "![从意式浓缩咖啡机中萃取出的两杯意式浓缩咖啡。](images/coffee-machine-double-"
"shot.jpg)"

#: ../coffee_machine.md:41
msgid "Two shots of espresso being pulled from an espressomachine."
msgstr "从意式浓缩咖啡机中萃取出的两杯意式浓缩咖啡。"

#: ../coffee_machine.md:44
msgid "The first thing the ants did was to open Gaphor to the Greeter window and start a new model with the _SysML_ template. You can now decide to either:"
msgstr "蚂蚁们做的第一件事是打开Gaphor进入欢迎窗口，并使用_SysML_模板创建新模型。现在"
"您可以选择："

#: ../coffee_machine.md:46
msgid "recreate their work as part of this tutorial. For this, open the SysML Example model shown at the bottom of the Greeter window"
msgstr "作为本教程的一部分，重新创建他们的工作成果。为此，请打开欢迎窗口底部显示的Sys"
"ML示例模型"

#: ../coffee_machine.md:48
msgid "inspect the result of their work by opening the `coffee-machine` model located in the `examples` folder."
msgstr "通过打开位于`examples`文件夹中的`coffee-machine`模型来检查他们的工作成果。"

#: ../coffee_machine.md:51
msgid "Abstraction Levels"
msgstr "抽象层次"

#: ../coffee_machine.md:52
msgid "Abstraction is a way of simplifying complex systems by focusing on only the most important details, while ignoring the rest. It's a process of reducing complexity by removing unnecessary details and highlighting the key aspects of a system in order to focus on the problem to be solved. It is the key to rigorous analysis of a system."
msgstr ""
"抽象化是一种通过聚焦最关键细节、忽略其余部分来简化复杂系统的方法。这是一个通"
"过剔除非必要细节、突显系统核心要素来降低复杂性的过程，旨在集中解决待处理问题"
"。这种思维模式是对系统进行严谨分析的关键所在。"

#: ../coffee_machine.md:58
msgid "To understand abstraction, think about a painting. When you look at a painting, you see a representation of something - perhaps a person, a landscape, or an object. The artist has simplified the real world into a set of lines, shapes, and colors that represent the most important details of the subject. In the same way, systems engineers, like our friends the ants, use abstraction to represent complex systems by breaking them down into their essential components and highlighting the most important aspects."
msgstr ""
"要理解抽象的概念，不妨以绘画为例。当你观赏一幅画作时，看到的其实是某种事物的"
"再现——可能是一个人、一处风景或某个物体。画家将现实世界简化为由线条、形状和色"
"彩构成的组合，这些元素承载着描绘对象最核心的特征。同样地，系统工程师就像我们"
"的蚂蚁朋友那样，运用抽象化方法将复杂系统分解为基本组成部分，突出最关键的特性"
"，从而实现对整个系统的表征。"

#: ../coffee_machine.md:66
msgid "Abstraction levels refer to the different levels of detail at which a system can be represented. These levels are used to break down complex systems into smaller, more manageable parts that can be analyzed and optimized. Said another way, abstraction levels group portions of a design where similar types of questions are answered."
msgstr ""
"抽象层次是指系统可被呈现的不同细节水平，用于将复杂系统分解为更小、更易管理的"
"部分以便分析和优化。换言之，抽象层次将设计中需要回答同类问题的部分进行归类。"

#: ../coffee_machine.md:72
msgid "There are typically three levels of abstraction in systems engineering and these are the three levels used in the SysML template:"
msgstr "系统工程中通常有三个抽象层次，这也是SysML模板中采用的三个层级："

#: ../coffee_machine.md:75
msgid "Concept Level: Sometimes also called Conceptual Level. Defines the problem being solved. This is the highest level of abstraction, where the system is described in terms of its overall purpose, goals, and functions. At this level, the focus is on understanding the system's requirements and how it will interact with other systems."
msgstr ""
"概念层级（Concept Level）：英文有时也称为Conceptual "
"Level，用于定义待解决的问题。这是最高层级的抽象描述，系统在此层面会以其总体目"
"的、目标和功能进行阐述。该层面的核心在于理解系统需求，以及系统与其他系统之间"
"的交互方式。"

#: ../coffee_machine.md:80
msgid "Logical Level: Defines a technology-agnostic solution. This is the middle level of abstraction, where the system is described in terms of its structure and behavior. At this level, the focus is on how the system components are organized and how they interact with each other."
msgstr ""
"逻辑层级（Logical "
"Level）：定义与技术无关的解决方案。这是中间层次的抽象，在此层面以系统结构和行"
"为方式进行描述。该层面重点关注系统组件的组织方式及各组件间的交互关系。"

#: ../coffee_machine.md:84
msgid "Technology Level: Sometimes also called Physical level. Defines the detailed technical solution. This is the lowest level of abstraction, where the system is described in terms of its components and their properties. At this level, the focus is on the details of the system's implementation."
msgstr ""
"技术层级（Technology Level）：有时也被称为物理层级（Physical "
"Level）。该层级定义了详细的技术解决方案，是抽象程度最低的一层，通过系统组件及"
"其属性进行描述。在此层级中，重点关注的是系统实现的具体细节。"

#: ../coffee_machine.md:89
msgid "Each level of abstraction provides a different perspective on the system, and each level is important for different aspects of system design and analysis. For example, the conceptual level is important for understanding the overall goals and requirements of the system, while the physical level is important for understanding how the system will be built and how it will interact with the environment."
msgstr ""
"每一抽象层级都从不同角度展现系统，且各自在系统设计与分析的不同方面具有关键作"
"用。例如，概念层对于理解系统的总体目标与需求至关重要，而物理层则关乎系统的具"
"体构建方式及其与环境的交互机制。"

#: ../coffee_machine.md:96
msgid "There is a fourth abstraction level called the Implementation Level that isn't modeled, which is the concrete built system."
msgstr "还有一个未被建模的第四抽象层级称为实现层（Implementation "
"Level），即具体构建的系统。"

#: ../coffee_machine.md:99
msgid "In the upper left hand corner of Gaphor, the Model Browser shows the three top level packages, dividing up the model in to these three abstraction levels."
msgstr "在Gaphor的左上角，模型浏览器展示了三个顶层包，将模型划分为这三个抽象层级。"

#: ../coffee_machine.md:102
msgid "![Top level packages of the SysML template.](images/coffee-machine-top-level-packages.png)"
msgstr "![SysML模板顶层包](images/coffee-machine-top-level-packages.png)"

#: ../coffee_machine.md:102
msgid "Top level packages of the SysMLtemplate."
msgstr "SysML模板顶层包。"

#: ../coffee_machine.md:105
msgid "Pillars"
msgstr "支柱"

#: ../coffee_machine.md:107
msgid "There are four pillars of SysML which help classify the types of diagrams based on what they represent:"
msgstr "SysML的四大支柱根据图表所代表的内容对图表类型进行分类："

#: ../coffee_machine.md:110
msgid "Behavior: The functionality of a system"
msgstr "行为：系统的功能"

#: ../coffee_machine.md:111
msgid "Structure: How a system is formed using parts and connections"
msgstr "结构：系统如何通过部件与连接构成"

#: ../coffee_machine.md:112
msgid "Requirements: Written statements that constrain the system"
msgstr "需求：约束系统的书面陈述"

#: ../coffee_machine.md:113
msgid "Parametric: Enforces mathematical rules across values in the system"
msgstr "参数化：在系统中对所有数值强制执行数学规则"

#: ../coffee_machine.md:115
msgid "If you want to learn more about these four pillars, there is a 30-minute video by Rick Steiner called [The Four Pillars of SysML](https://youtu.be/998UznK9ogY)."
msgstr ""
"如果你想深入了解这四大支柱，可以观看Rick "
"Steiner制作的30分钟视频《SysML的四大支柱》(https://youtu.be/998UznK9ogY)。"

#: ../coffee_machine.md:118
msgid "Since Parametric Diagrams are one of the least used diagram types in SysML, we are going to only focus on the first three. The power of SysML comes in being able to make relationships between these three pillars. For example, by allocating behavior like an activity to an element of the structure like a block."
msgstr ""
"由于参数图（Parametric "
"Diagrams）是SysML中使用频率最低的图表类型之一，我们将仅重点介绍前三种图表。Sy"
"sML的核心优势在于能够建立这三大支柱之间的关联关系。例如，通过将活动等行为要素"
"分配到模块等结构要素中来实现行为与结构的映射。"

#: ../coffee_machine.md:123
msgid "If you expand the top-level Abstraction Level packages in the Model Browser, each one contains three more packages, one for each pillar. It is in these packages that we will start to build up the design for the espresso machine."
msgstr "如果在模型浏览器中展开顶层的\"抽象层\"包"
"，每个顶层包下会包含三个子包（对应三大支柱模块）。我们将在这些子包中逐步构建"
"咖啡机的设计模型。"

#: ../coffee_machine.md:127
msgid "![Three pillar packages nested under each abstraction level package.](images/coffee-machine-pillars.png)"
msgstr "![每个抽象层次包下嵌套着三个支柱模块包。](images/coffee-machine-pillars.png)"

#: ../coffee_machine.md:127
msgid "Three pillar packages nested under each abstraction levelpackage."
msgstr "每个抽象层次包下嵌套着三个支柱模块包。"

#: ../coffee_machine.md:130
msgid "Table of Contents"
msgstr "目录"

#: ../coffee_machine_concept.md:5
msgid "Coffee Machine: Concept Level"
msgstr "咖啡机：概念层"

#: ../coffee_machine_concept.md:9
msgid "The concept level defines the problem we are trying to solve. For the espresso machine, we are going to use diagrams at this abstraction level to answer questions like:"
msgstr "概念层定义了我们要解决的问题。对于咖啡机，我们将利用这一抽象层次的图表来回答"
"诸如以下问题："

#: ../coffee_machine_concept.md:12
msgid "Who will use the machine and what are their goals while using it?"
msgstr "谁将使用这台机器，他们在使用时的目标是什么？"

#: ../coffee_machine_concept.md:13
msgid "What sequence of events will a person take while operating the machine?"
msgstr "一个人在操作机器时会采取哪些步骤？"

#: ../coffee_machine_concept.md:14
msgid "What are the key features and capabilities required for the machine to perform its intended function?"
msgstr "机器执行其预期功能所需的关键特性和能力是什么？"

#: ../coffee_machine_concept.md:15
msgid "What are the design constraints and requirements that must be considered when designing the machine?"
msgstr "在设计这台机器时，必须考虑哪些设计约束和要求？"

#: ../coffee_machine_concept.md:16
msgid "What are the key performance metrics that the machine must meet in order to be considered successful?"
msgstr "机器必须满足哪些关键性能指标才能被视为成功的作品？"

#: ../coffee_machine_concept.md:17
msgid "How will the machine fit into the larger context of the café, and how will it interact with other systems and components within the café?"
msgstr "这台机器将如何融入咖啡店的整体环境？它将如何与咖啡店内的其他系统和组件进行交"
"互？"

#: ../coffee_machine_concept.md:19
msgid "What are the needs of others like those marketing, selling, manufacturing, or buying the machine?"
msgstr "其他人（如市场营销人员、销售人员、制造商或购买机器的人）有哪些需求？"

#: ../coffee_machine_concept.md:21
msgid "At this level, the focus is on understanding the big picture of the espresso machine and its role within the café system. The answers to these questions will help guide the design and development of the machine at the logical and technology levels of abstraction."
msgstr "在这一层级，重点在于理解浓缩咖啡机的整体架构及其在咖啡馆系统中的功能定位。对"
"这些问题的解答将指导机器在逻辑架构与技术架构的设计开发工作。"

#: ../coffee_machine_concept.md:26
msgid "Use Case Diagram"
msgstr "用例图"

#: ../coffee_machine_concept.md:28
msgid "First the ants work on the behavior of the system. Expand the Behavior package in the Model Browser and double-click on the diagram named Use Cases."
msgstr "首先，蚂蚁们对系统的行为进行研究。在模型浏览器中展开“行为”包，然后双击名为“用"
"例”的图表。"

#: ../coffee_machine_concept.md:31
msgid "A use case diagram is a type of visual representation used in systems engineering to describe the functional requirements of a system, such as an espresso machine. In the context of the espresso machine, a use case diagram would be used to identify and define the different ways in which the machine will be used by its users, such as the café staff and customers."
msgstr ""
"用例图是系统工程中使用的一种可视化表示方法，用于描述系统（如咖啡机）的功能需"
"求。以咖啡机为例，用例图可用于识别和定义不同用户（如咖啡馆员工和顾客）使用咖"
"啡机的各种方式。"

#: ../coffee_machine_concept.md:37
msgid "The diagram would typically include different actors or users, such as the barista, the customer, and possibly a manager or maintenance technician. It would also include different \"use cases\" or scenarios, which describe the different actions that the users can take with the machine, such as placing an order, making an espresso, or cleaning the machine."
msgstr ""
"该示意图通常会包含不同的参与者或用户角色，例如咖啡师、顾客，可能还有店长或设"
"备维护技术员。图中还会展示各种\"用例\"或场景"
"，用以描述用户与咖啡机的交互行为，比如下单点餐、制作浓缩咖啡或清洁机器。"

#: ../coffee_machine_concept.md:43
msgid "The use case diagram helps to ensure that all the necessary functional requirements of the espresso machine are identified and accounted for, and that the system is designed to meet the needs of its users. It can also be used as a communication tool between the different stakeholders involved in the development of the machine, such as the ants and Cappuccino the cat."
msgstr ""
"用例图有助于确保识别并涵盖咖啡机的所有必要功能需求，同时保证系统设计符合用户"
"需求。该图表还可作为开发过程中各利益相关方（比如蚂蚁们和卡布奇诺猫）之间的沟"
"通工具。"

#: ../coffee_machine_concept.md:49
msgid "The ants need your help updating the diagrams, so let's get started:"
msgstr "蚂蚁们需要你的帮助来更新图表，让我们开始吧："

#: ../coffee_machine_concept.md:51
msgid "Double-click on the actor to pop up the rename dialog, and replace User with Barista."
msgstr "双击参与者（Actor）以弹出重命名对话框，将“User”替换为“Barista”。"

#: ../coffee_machine_concept.md:53
msgid "Update the name of the oval Use Case from Use Case #1 to Brew espresso."
msgstr "将椭圆形用例（Use Case）的名称从“Use Case #1”更新为“Brew espresso”。"

#: ../coffee_machine_concept.md:54
msgid "Update the name of the rectangle Block from Feature to Espresso Machine"
msgstr "将矩形模块（Block）的名称从“Feature”更新为“Espresso Machine”"

#: ../coffee_machine_concept.md:56
msgid "A barista interacts with the espresso machine. The barista is provided a simple interface with a few push buttons."
msgstr "一名咖啡师操作意式浓缩咖啡机。咖啡师使用的操作界面十分简单，仅设有几个按键。"

#: ../coffee_machine_concept.md:59
msgid "In this particular use case diagram, we have one actor named Barista and one use case called Brew espresso, which is allocated to a block called Espresso Machine. The actor, in this case, is a cat barista who interacts with the system (an espresso machine) to accomplish a particular task, which is brewing espresso."
msgstr ""
"在此特定用例图中，我们设定了一个名为\"咖啡师（Barista）\"的参与者和一个称为\""
"制作意式浓缩咖啡（Brew espresso）\"的用例，该用例被分配到名为\"意式咖啡机（"
"Espresso Machine）\"的模块中"
"。本案例中的参与者是一位猫咪咖啡师，它通过操作意式咖啡机系统来完成冲泡浓缩咖"
"啡的特定任务。"

#: ../coffee_machine_concept.md:65
msgid "Use case diagram showing an actor named Barista and a use case called Brew espresso"
msgstr "用例图展示了一个名为“咖啡师（Barista）”的参与者和一个名为“冲泡意式浓缩咖啡（"
"Brew espresso）”的用例"

#: ../coffee_machine_concept.md:70
msgid "The use case Brew espresso represents a specific functionality or action that the system (the Espresso Machine block) can perform. It describes the steps or interactions necessary to complete the task of brewing espresso, such as selecting the appropriate settings, starting the brewing process, and stopping the process once it's complete."
msgstr ""
"用例\"冲泡意式浓缩咖啡\"代表系统（\"意式咖啡机\"模块"
"）能够执行的特定功能或操作。该用例描述了完成冲泡意式浓缩咖啡任务所需的步骤或"
"交互流程，包括选择合适参数设置、启动冲泡程序以及在完成后终止冲泡过程等具体操"
"作。"

#: ../coffee_machine_concept.md:76
msgid "The use case diagram shows the relationship between the actor and the use case. It is represented by an oval shape with the use case name inside and an association with the actor. The association represents the interaction from the actor to the use case."
msgstr "用例图展示了参与者与用例之间的关系。用例以椭圆形表示，内部标注用例名称，并通"
"过连线与参与者关联。该连线表示从参与者到用例的交互过程。"

#: ../coffee_machine_concept.md:81
msgid "Domain Diagram"
msgstr "领域图"

#: ../coffee_machine_concept.md:83
msgid "A domain diagram is a graphical representation of the concepts, terms, and relationships within a specific domain. In the case of a coffee shop, a domain diagram could represent the key elements and relationships within the coffee shop domain."
msgstr "领域图是对特定领域内概念、术语及关系的图形化表示。以咖啡店为例，领域图可呈现"
"咖啡店业务范畴中的核心要素及其关联关系。"

#: ../coffee_machine_concept.md:88
msgid "The following is a domain diagram that builds upon the context diagram with additional blocks:"
msgstr "以下是在上下文关系图基础上添加了更多模块的领域图："

#: ../coffee_machine_concept.md:90
msgid "Barista"
msgstr "咖啡师"

#: ../coffee_machine_concept.md:91
msgid "Coffee Machine"
msgstr "咖啡机"

#: ../coffee_machine_concept.md:92
msgid "Roasted Coffee"
msgstr "烘焙咖啡"

#: ../coffee_machine_concept.md:93
msgid "Coffee Grinder"
msgstr "咖啡研磨机"

#: ../coffee_machine_concept.md:94
msgid "Water Supply"
msgstr "供水"

#: ../coffee_machine_concept.md:95
msgid "Customer"
msgstr "顾客"

#: ../coffee_machine_concept.md:97
msgid "Each block in the Block Definition Diagram (bdd) represents a key concept within the coffee shop domain, and the containment relationship is used between the domain and the blocks to show that they are part of the domain."
msgstr "在块定义图（BDD）中，每个模块代表咖啡店领域中的一个核心概念，领域与模块之间通"
"过包含关系表明这些模块属于该领域组成部分。"

#: ../coffee_machine_concept.md:101
msgid "Block Definition Diagram showing hierarchy of blocks in the Coffee Shop domain"
msgstr "展示咖啡店领域模块层次结构的块定义图（BDD）"

#: ../coffee_machine_concept.md:106
msgid "The Barista block is responsible for preparing and serving the coffee to the customers. The Roasted Coffee block contains the types of coffee available for the barista to use. The Coffee Grinder block grinds the roasted coffee beans to the desired consistency before brewing. The Water Supply block contains the water source for the coffee machine, and finally the Customer block represents the person who orders and receives the coffee."
msgstr ""
"咖啡师（Barista）模块负责为客户准备和提供咖啡。烘焙咖啡（Roasted "
"Coffee）模块包含咖啡师可使用的各类咖啡豆。咖啡研磨机（Coffee "
"Grinder）模块在冲泡前将烘焙好的咖啡豆研磨至所需粗细度。供水（Water "
"Supply）模块为咖啡机提供水源，而顾客（Customer）模块则代表下单并接收咖啡的饮"
"用者。"

#: ../coffee_machine_concept.md:113
msgid "The ants need more of your help to rename the Feature Domain diagram and update it so that it matches the one above. Make sure that \"Profile: SysML\" is selected in the top-left corner of the Gaphor user interface. The names of the blocks can be changed directly in the diagram, but the name of the bdd can only be changed in the Model Browser. In the Structure package, right-click on the Blocks with the B symbol and rename them from the context menu. Also remember that you can use [auto-layout](first_model.md#adding-relations) to align and distribute all elements."
msgstr ""
"蚂蚁们需要你更多的帮助来重命名特性领域图（Feature Domain "
"diagram）并更新它，使其与上方的图表保持一致。"
"请确保在Gaphor用户界面的左上角选择了\"Profile: SysML\"选项"
"。模块的名称可以直接在图表中修改，但bdd图的名称只能在模型浏览器中更改。在结构"
"（Structure）包中，右键点击带有B符号的模块，通过右键菜单进行重命名。另外请记"
"住，你可以使用[自动布局](first_model.md#adding-relations) "
"功能来对齐和分布所有元素。"

#: ../coffee_machine_concept.md:121
msgid "The domain diagram provides a high-level view of the coffee shop domain and the key concepts and relationships involved in it. It can be a useful tool for understanding the relationships between different elements of the domain and for communicating these relationships to others."
msgstr "领域图提供了咖啡店领域的高层概览，以及其中涉及的关键概念与关系。该图表能有效"
"帮助理解领域内不同元素间的关联，并便于向他人传达这些关系。"

#: ../coffee_machine_concept.md:126
msgid "Context Diagram"
msgstr "上下文关系图"

#: ../coffee_machine_concept.md:128
msgid "The context diagram is a high-level view of the system, and it shows its interaction with external entities. In the case of a coffee machine, a context diagram provides a clear and concise representation of the system and its interactions with the external environment."
msgstr ""
"上下文关系图（Context "
"Diagram）是系统的高层视图，用于展示系统与外部实体的交互关系。以咖啡机为例，该"
"图表能清晰简洁地呈现系统架构及其与外部环境之间的互动关系。"

#: ../coffee_machine_concept.md:133
msgid "The context diagram for a coffee machine shows the coffee machine as the system at the center, with all its external entities surrounding it. The external entities include the barista, the power source, the coffee grinder, and the water source."
msgstr "咖啡机的上下文关系图将咖啡机作为中心系统展示，周围环绕其所有外部实体。这些外"
"部实体包括咖啡师、电源、咖啡研磨机和供水源。"

#: ../coffee_machine_concept.md:138
msgid "Block definition diagram showing context of the coffee shop with external entities"
msgstr "展示咖啡厅与外部实体关联关系的块定义图"

#: ../coffee_machine_concept.md:143
msgid "The ants need more of your help to rename the Feature Context diagram and update it so that it matches the one above. To create the specific arrows shown, use an Association entity, then toggle Enable Item Flow to on for that association and fill in the Item Property field."
msgstr ""
"蚂蚁需要您协助重新命名“特性上下文关系图（Feature Context "
"diagram）”并更新内容，使其与上方的图表保持一致。如需创建图中特定箭头，请按以"
"下步骤操作：使用\"关联（Association）\"实体，然后为该\"关联（Association）"
"\"开启\"启用项目流（Enable Item Flow）\"选项，在\"项目属性（Item Property）"
"\"字段中填写相应内容。"

#: ../coffee_machine_concept.md:148
msgid "Overall, the context diagram for a coffee machine provides a high-level view of the system and its interactions with external entities. It is a useful tool for understanding the system and its role in the broader environment."
msgstr "总的来说，咖啡机的上下文关系图提供了该系统及其与外部实体间交互的顶层视角。这"
"种图表是理解系统及其在更广泛环境中所扮演角色的有效工具。"

#: ../coffee_machine_concept.md:152
msgid "Concept Requirements"
msgstr "概念需求"

#: ../coffee_machine_concept.md:153
msgid "Concept requirements are typically collected by analyzing the needs of the stakeholders involved in the development of the coffee machine. This involves identifying and gathering input from various stakeholders, such as the barista, the other engineers working on the product, manufacturing, and service."
msgstr ""
"概念需求的收集通常通过分析咖啡机开发过程中各利益相关方（Stakeholder）的需求来"
"完成。这需要识别并汇总来自不同利益相关方的意见，包括咖啡师、参与产品开发的其"
"他工程师、生产部门以及售后服务团队等。"

#: ../coffee_machine_concept.md:158
msgid "To collect concept requirements, stakeholders may be asked questions about what they want the coffee machine to do, what features it should have, and what problems it should solve. They may also be asked to provide feedback on existing coffee machines to identify areas where improvements could be made."
msgstr ""
"为收集概念需求，可向利益相关者询问以下内容：他们希望咖啡机实现哪些功能、应具"
"备哪些特性以及解决哪些问题。同时也可请其对现有咖啡机提出改进建议，以识别可优"
"化的环节。"

#: ../coffee_machine_concept.md:163
msgid "Once the needs of the stakeholders have been gathered, they can be analyzed to identify common themes and requirements. This information can then be used to develop the concept requirements for the coffee machine, which serve as a starting point for the design process."
msgstr "在收集完利益相关者的需求后，即可对其进行分析以确定共同主题和核心要求。这些信"
"息将用于制定咖啡机的概念需求，从而为设计流程提供起点。"

#: ../coffee_machine_concept.md:168
msgid "The following are some concept requirements for a coffee machine that addresses a water tank, heat-up time, and HMI button:"
msgstr "以下是一台咖啡机在水箱、加热时间和人机界面（HMI）按钮方面的一些概念需求："

#: ../coffee_machine_concept.md:171
msgid "Water Tank: The coffee machine shall have a water tank of sufficient size to make multiple cups of coffee before needing a refill. The water tank should be easy to access and fill."
msgstr "水箱：咖啡机应配备容量足够的水箱，确保在多次冲泡咖啡后无需频繁加水。水箱设计"
"须便于取放和注水。"

#: ../coffee_machine_concept.md:175
msgid "Heat-up Time: The coffee machine shall have a heat-up time of no more than 10 minutes from the time the user turns on the machine until it's ready to brew coffee."
msgstr "预热时间：从用户开启咖啡机到其可进行咖啡冲泡，预热时间不得超过10分钟。"

#: ../coffee_machine_concept.md:179
msgid "1 Cup Button: The coffee machine shall have an HMI with a 1 cup brew button to make it easy for the user to select the amount of coffee they want to brew."
msgstr "1杯量按钮：咖啡机应配备带有一键冲泡功能的人机界面（HMI），通过1杯量按钮使用户"
"能便捷选择所需冲泡的咖啡量。"

#: ../coffee_machine_concept.md:182
msgid "Concept requirements for water tank, heat-up time, and HMI button"
msgstr "水箱、预热时间和人机界面（HMI）按钮的概念需求"

#: ../coffee_machine_concept.md:187
msgid "Help the ants update the Concept Requirements diagram with these requirements."
msgstr "帮助蚂蚁们用这些需求更新概念需求图。"

#: ../coffee_machine_concept.md:190
msgid "Throughout the design process, the concept requirements will be refined and expanded upon as more information becomes available and the needs of the stakeholders become clearer. This iterative process ensures that the final design of the coffee machine meets the needs of all stakeholders and delivers a high-quality product."
msgstr ""
"在整个设计过程中，随着更多信息的获取以及利益相关方需求的逐步明确，概念需求将"
"不断被细化和扩展。这种迭代式流程能确保咖啡机的最终设计满足所有利益相关方的需"
"求，并打造出高品质的产品。"

#: ../coffee_machine_logical.md:5
msgid "Coffee Machine: Logical Level"
msgstr "咖啡机：逻辑层"

#: ../coffee_machine_logical.md:9
msgid "At the logical Level, we'll define a technology-agnostic solution. This is the middle level of abstraction, where the system is described in terms of its structure and behavior. At this level, the focus is on how the system components are organized and how they interact with each other."
msgstr ""
"在逻辑层，我们将定义一个与技术无关的解决方案。这是中间层次的抽象，系统将通过"
"其结构和行为进行描述。该层面的重点在于系统组件的组织方式及其相互间的交互机制"
"。"

#: ../coffee_machine_logical.md:14
msgid "Functional Boundary Behavior"
msgstr "功能边界行为"

#: ../coffee_machine_logical.md:16
msgid "A Functional Boundary Behavior diagram is a type of SysML Activity diagram used to show the interactions between different logical blocks. The swim lanes divide the diagram into different areas, each representing a different functional block or component."
msgstr ""
"功能边界行为图是一种SysML活动图（Activity "
"diagram），用于展示不同逻辑模块之间的交互关系。泳道将图表划分为不同区域，每个"
"区域代表一个独立的功能模块或组件。"

#: ../coffee_machine_logical.md:21
msgid "In this case, the diagram includes swimlanes for the HMI, Controller, Water Pump, Water Heater, Group Head, and Portafilter. The HMI receives the button press from the barista and then sends a command to the Controller. The Controller then commands the Water Heater to start, and once the water has reached the correct temperature, the Controller commands the Pump to start. The water would then be pumped through the Group Head and into the Portafilter, brewing the coffee. The diagram shows the flow of information and actions between the different logical blocks, and help to ensure that the behavior that each block provides is properly connected and integrated into the system."
msgstr ""
"在本例中，该活动图包含了以下模块的泳道：人机界面（HMI）、控制器（Controller）"
"、水泵（Water Pump）、加热器（Water Heater）、冲泡头（Group "
"Head）及冲煮把手（Portafilter）。当咖啡师按下操作按钮时，人机界面接收指令并发"
"送启动命令至控制器。控制器随即启动加热器工作，待水温达到设定值后，控制器将激"
"活水泵运行。热水通过水泵输送至冲泡头，最终注入冲煮把手中的咖啡粉进行萃取。该"
"活动图清晰展示了各逻辑模块间的信息传递与动作衔接，确保每个功能模块的行为能够"
"正确连接并整合到系统中。"

#: ../coffee_machine_logical.md:36
msgid "From the Logical package, expand the Behavior package in the Model Browser and double-click on the diagram named Functional Boundary Behavior. Additional swimlanes can be added by clicking on the swimlanes and add additional partitions in the Property Editor. The name of the partition before the colon can also be changed in the Property Editor. The names of the Blocks can be changed in the Structure package, as was explained in the [Domain Diagram section](coffee_machine_concept.md#domain-diagram)."
msgstr ""
"从逻辑（Logical）包中，在模型浏览器内展开行为（Behavior）"
"包并双击名为Functional Boundary "
"Behavior的图表。可通过点击泳道并在属性编辑器（Property "
"Editor）中添加分区来增加更多泳道。冒号前的分区名称同样可在属性编辑器中修改。"
"模块名称需在结构（Structure）包中更改，具体操作方式如领域图章节所述。"

#: ../coffee_machine_logical.md:43
msgid "Additional Object Flows, pins (pay attention to inputs vs outputs), and actions can be created using the Toolbox. The Parameter Nodes which are attached to the Activity on the very left and right of the diagram are created and renamed created by clicking on the Activity and modifying them in the Property Editor."
msgstr ""
"可使用工具箱创建其他对象流（Object "
"Flow）、引脚（pin，注意区分输入与输出）及动作（Action）。位于图表最左侧与最右"
"侧、依附于活动的参数节点（Parameter "
"Nodes），需通过点击活动（Activity）并在属性编辑器中修改来完成创建与重命名。"

#: ../coffee_machine_logical.md:48
msgid "Logical State Machine"
msgstr "逻辑状态机"

#: ../coffee_machine_logical.md:50
msgid "The logical state machine for the coffee machine is a diagram that shows the different states and transitions that the machine goes through to make coffee. In this case, there are two main states: On and Off."
msgstr "咖啡机的逻辑状态机是一张展示机器在制作咖啡过程中所经历的不同状态及转换的示意"
"图。在本例中，主要有两种状态：开机（On）和关机（Off）。"

#: ../coffee_machine_logical.md:54
msgid "When the coffee machine is turned on, it enters the On state. Inside the On state, there are some substates, starting with the heat water state. The machine will transition from the heat water state to the ready state when the temperature reaches the set point."
msgstr ""
"当咖啡机启动时，它将进入\"开机（On）\"状态。在\"开机（On）"
"\"状态内部包含若干子状态，初始为\"加热水（Heat Water）"
"\"状态。当水温达到设定值时，机器将从\"加热水（Heat Water）\"状态转换至\""
"就绪（Ready）\"状态。"

#: ../coffee_machine_logical.md:59
msgid "Once the machine is in the ready state, the user can select one or two cup mode. Depending on the mode selected, the machine will transition to either the one cup mode or two cup mode."
msgstr ""
"机器进入就绪状态后，用户可选择单杯（one cup mode）或双杯模式（two cup "
"mode）。根据所选模式，机器将相应切换至单杯模式或双杯模式工作状态。"

#: ../coffee_machine_logical.md:63
msgid "State machine diagram showing logical states including on and off"
msgstr "状态机图显示包括开启和关闭在内的逻辑状态"

#: ../coffee_machine_logical.md:68
msgid "Open the Logical States diagram and add a region to the On state via the Property Editor. Next use the Toolbox to add the additional substates and transition. Guards for the transitions, shown surrounded by brackets, are added by selecting the transition and adding the guard in the Property Editor."
msgstr ""
"打开逻辑状态图，通过属性编辑器在On状态中添加一个区域。接着使用工具箱添加额外"
"的子状态和迁移线。对于迁移线的监护条件（以方括号显示），需先选中对应迁移线，"
"然后在属性编辑器中添加监护条件。"

#: ../coffee_machine_logical.md:73
msgid "The logical state machine diagram for the coffee machine shows these states, and the different conditions that trigger the transitions. This helps the ants designing the machine to understand how the coffee machine works and ensure that it functions properly."
msgstr "咖啡机的逻辑状态机图展示了这些状态，以及触发状态转换的不同条件。这有助于设计"
"机器的蚂蚁们理解咖啡机的工作原理，并确保其正常运行。"

#: ../coffee_machine_logical.md:78
msgid "Logical Structure"
msgstr "逻辑结构"

#: ../coffee_machine_logical.md:80
msgid "The logical structure shows which logical blocks the espresso machine is made up of. Since we are at the logical level, these blocks should be agnostic to technical choices."
msgstr "逻辑结构展示了该咖啡机由哪些逻辑模块组成。由于我们处于逻辑层，这些模块应不受"
"具体技术选型的影响。"

#: ../coffee_machine_logical.md:84
msgid "The following logical blocks are part of the espresso machine:"
msgstr "以下逻辑模块是咖啡机的一部分："

#: ../coffee_machine_logical.md:85
msgid "Water tank"
msgstr "水箱"

#: ../coffee_machine_logical.md:86
msgid "Water pump"
msgstr "水泵"

#: ../coffee_machine_logical.md:87
msgid "Water heater"
msgstr "热水器"

#: ../coffee_machine_logical.md:88
msgid "Portafilter"
msgstr "冲煮把手"

#: ../coffee_machine_logical.md:89
msgid "Controller"
msgstr "控制器"

#: ../coffee_machine_logical.md:90
msgid "Group head"
msgstr "冲泡头"

#: ../coffee_machine_logical.md:91
msgid "HMI"
msgstr "人机界面（HMI）"

#: ../coffee_machine_logical.md:93
msgid "Each block represents a key portion of the espresso machine, and the containment relationship is used between the espresso machine and its logical parts."
msgstr "每个模块代表浓缩咖啡机的一个关键部分，而浓缩咖啡机与其逻辑部件之间采用了包含"
"关系。"

#: ../coffee_machine_logical.md:97
msgid "Block definition diagram showing the coffee machine and its logical parts"
msgstr "展示咖啡机及其逻辑组成部分的块定义图"

#: ../coffee_machine_logical.md:102
msgid "Water tank: The water tank is a container that stores the water used in the espresso machine. It typically has a specific capacity and is designed for easy filling and cleaning. The water tank supplies water to the water pump when needed."
msgstr "水箱：水箱是用于储存意式咖啡机所需用水的容器。通常具有特定容量，并设计为便于"
"注水和清洁的结构。当需要时，水箱会将水供给至水泵。"

#: ../coffee_machine_logical.md:107
msgid "Water pump: The water pump is responsible for drawing water from the water tank and creating the necessary pressure to force the water through the coffee grounds in the portafilter. It plays a crucial role in the espresso extraction process by ensuring a consistent flow of water."
msgstr "水泵：水泵负责从水箱中抽取水，并产生所需压力，迫使水流穿过手柄中的咖啡粉。通"
"过确保稳定的水流，水泵在浓缩咖啡萃取过程中发挥着关键作用。"

#: ../coffee_machine_logical.md:112
msgid "Water heater: The water heater, also known as the boiler or heating element, is responsible for heating the water to the optimal temperature for brewing espresso. It maintains the water at the desired temperature to ensure proper extraction and flavor."
msgstr "热水器：亦称锅炉或加热元件，其核心功能是将水温提升至冲泡意式浓缩咖啡的最佳温"
"度，并持续保持恒温状态以确保理想的萃取效果与风味呈现。"

#: ../coffee_machine_logical.md:117
msgid "Portafilter: The portafilter is a detachable handle-like device that holds the coffee grounds. It is attached to the espresso machine and acts as a filter holder. The water from the pump is forced through the coffee grounds in the portafilter to extract the flavors and create the espresso."
msgstr ""
"冲煮把手（Portafilter）：冲煮把手是一种可拆卸的手柄状装置，用于盛装咖啡粉。它"
"安装在意式咖啡机上，作为滤杯支架使用。水泵加压的热水穿透冲煮把手内的咖啡粉层"
"，萃取出风味物质，从而制成浓缩咖啡。"

#: ../coffee_machine_logical.md:122
msgid "Controller: The controller, often a microcontroller or a dedicated circuit board, is the brain of the espresso machine. It manages and coordinates the operation of various components, such as the water pump, water heater, and HMI, to ensure the correct brewing process. It monitors and controls temperature, pressure, and other parameters to maintain consistency and deliver the desired results."
msgstr ""
"控制器：控制器通常是微控制器或专用电路板，作为咖啡机的核心控制系统。它负责管"
"理和协调水泵、加热器、人机界面等各部件的运行，确保萃取流程精准执行。通过实时"
"监测并调控温度、压力等关键参数，保障咖啡出品稳定性，实现预期萃取效果。"

#: ../coffee_machine_logical.md:129
msgid "Group head: The group head is a part of the espresso machine where the portafilter attaches. It provides a secure connection between the portafilter and the machine, allowing the brewed espresso to flow out of the portafilter and into the cup. The group head also helps to maintain proper temperature and pressure during the brewing process."
msgstr ""
"冲泡头：冲泡头是意式咖啡机上连接冲煮把手的部件。它在冲煮把手与机器之间形成稳"
"固连接，使萃取出的浓缩咖啡能从冲煮把手流出至杯中。该组件还能在冲泡过程中保持"
"适宜的温度和压力。"

#: ../coffee_machine_logical.md:135
msgid "HMI (Human-Machine Interface): The HMI is the user interface of the espresso machine. It provides a means for the user to interact with the machine, usually through buttons, switches, or a touchscreen. The HMI allows the user to select different brewing options, adjust settings, and monitor the status of the machine. It provides feedback and displays information related to the brewing process, such as brewing time, temperature, and cup size selection."
msgstr ""
"人机界面（HMI）：人机界面是浓缩咖啡机的用户操作面板，通过按钮、开关或触摸屏实"
"现用户与机器的交互。该界面支持选择不同萃取模式、调整参数设置并监控机器运行状"
"态，可实时反馈萃取时间、温度及杯量选择等关键信息，为用户提供完整的冲泡流程可"
"视化交互体验。"

#: ../coffee_machine_logical.md:142
msgid "We didn't make any technical choices at this time, for example we didn't specify which type of controller, the pump capacity, or the model of the group head. These details will be defined once we get to the Technology level."
msgstr "我们目前尚未做出任何技术选型，例如未明确控制器类型、泵的容量或冲泡头的具体型"
"号。这些细节将在技术层面阶段进一步确定。"

#: ../coffee_machine_logical.md:146
msgid "The ants need more of your help to update the Logical Structure diagram so that it matches the one above."
msgstr "蚂蚁们需要你更多的帮助来更新逻辑结构图（Logical Structure "
"diagram），以使其与上方的图表保持一致。"

#: ../coffee_machine_logical.md:149
msgid "Logical Boundary"
msgstr "逻辑边界"

#: ../coffee_machine_logical.md:151
msgid "The Logical Boundary is a type of Internal Block Diagram that represents the internal structure of a system, illustrating the relationships between its internal components or blocks. It helps to visualize how these blocks interact and exchange information within the system. The term boundary used here means a clear box view inside the espresso machine at the logical boundary. It uses part properties of the blocks that were in the Logical Structure diagram above."
msgstr ""
"逻辑边界图是一种内部模块图（IBD），用于展现系统的内部结构，说明其内部组件或模"
"块之间的关联关系。这种图表能直观呈现系统内部各模块如何交互及传递信息。"
"此处使用的\"边界\"概念"
"，特指在逻辑边界层面对咖啡机内部结构的透明盒视图。该图表沿用了上方逻辑结构图"
"中各模块的部件属性。"

#: ../coffee_machine_logical.md:158
msgid "Internal block diagram showing the clear box view of the espresso machine"
msgstr "内部模块图（IBD）展示浓缩咖啡机的透明盒视图"

#: ../coffee_machine_logical.md:163
msgid "The interactions between the part properties inside the espresso machine are shown as ItemFlows on the Connectors."
msgstr "浓缩咖啡机内部部件属性间的交互作用通过连接器（Connector）上的项目流（ItemFlow"
"s）呈现。"

#: ../coffee_machine_logical.md:166
msgid "Water: Represents the flow of water from the water tank to the water pump."
msgstr "水（Water）：表示从水箱到水泵的水流。"

#: ../coffee_machine_logical.md:167
msgid "On/Off: Represents the command or signal to turn the espresso machine on or off."
msgstr "开/关（On/Off）：代表开启或关闭浓缩咖啡机的指令或信号。"

#: ../coffee_machine_logical.md:168
msgid "Volume Adjustment: Represents the user-selected volume adjustment for the coffee output."
msgstr "出液量调节：代表用户为咖啡输出选择的出液量调节。"

#: ../coffee_machine_logical.md:169
msgid "Pressurized Water: Represents the water flow under pressure for extracting coffee."
msgstr "加压水：代表在压力下用于萃取咖啡的水流。"

#: ../coffee_machine_logical.md:170
msgid "Heat Command: Represents the command or signal to activate the water heater and initiate the heating process."
msgstr "加热指令：代表启动热水器并开始加热过程的命令或信号。"

#: ../coffee_machine_logical.md:171
msgid "Temperature: Represents the feedback signal indicating the current temperature of the water."
msgstr "温度：表示指示当前水温的反馈信号。"

#: ../coffee_machine_logical.md:172
msgid "Hot Pressurized Water: Represents the pressurized hot water for brewing coffee."
msgstr "高温加压水：代表用于冲泡咖啡的加压热水。"

#: ../coffee_machine_logical.md:173
msgid "Coffee Water Mixture: Represents the mixture of hot water and coffee grounds during the brewing process."
msgstr "咖啡水混合物：代表冲泡过程中热水与咖啡粉的混合物。"

#: ../coffee_machine_logical.md:177
msgid "Notice that we aren't actually showing anything entering or leaving the boundary of the espresso machine, like the input from the barista or the resulting coffee. Gaphor doesn't current support adding ports to the boundary of an internal block diagram, but hopefully we'll be able to add support soon!"
msgstr ""
"请注意，我们并未实际展示任何进出咖啡机边界的元素，比如咖啡师的输入或产出的咖"
"啡。Gaphor目前不支持在内部模块图的边界上添加端口（Ports），但希望我们能尽快实"
"现这一功能！"

#: ../coffee_machine_logical.md:183
msgid "These item flows capture the essential interactions and exchanges within the espresso machine. They represent the flow of water, control signals, temperature feedback, and the resulting coffee water mixture. The item flows illustrate the sequence and connections between the various components, allowing for a better understanding of how the machine functions as a whole."
msgstr ""
"这些项目流（Item "
"Flows）捕捉了浓缩咖啡机内部的关键交互与交换过程。它们展现了水流、控制信号、温"
"度反馈以及最终形成的咖啡水混合物的流动路径。通过描绘各组件之间的运作顺序与连"
"接关系，这些项目流（Item "
"Flows）使我们能够更清晰地理解整台机器作为一个系统是如何协同工作的。"

#: ../coffee_machine_logical.md:189
msgid "Once again, help the ants by updating the Logical Boundary diagram so that it matches the one above."
msgstr "请再次协助蚂蚁们，更新逻辑边界图（Logical Boundary "
"diagram）以使其与上方的图示保持一致。"

#: ../coffee_machine_logical.md:192
msgid "Logical Requirements"
msgstr "逻辑需求"

#: ../coffee_machine_logical.md:193
msgid "Logical requirements refer to the high-level specifications and functionalities that describe what a system or product should accomplish without specifying how it will be implemented. These requirements focus on the desired outcomes and behavior of the system rather than the specific technical details."
msgstr "逻辑需求是指描述系统或产品应实现的高层规范和功能，但不涉及具体实现方式。这类"
"需求聚焦于系统预期达成的目标与行为，而非具体技术细节。"

#: ../coffee_machine_logical.md:198
msgid "We have also already defined the behavior and the structure of the espresso machine at the logical level, so the main task now is to translate that information in to words as requirement statements."
msgstr "我们已经完成了浓缩咖啡机在逻辑层面的行为和结构定义，因此当前的主要任务是将这"
"些信息转化为文字形式的需求说明。"

#: ../coffee_machine_logical.md:203
msgid "If you need help writing good requirements, the [INCOSE Guide to Needs and Requirements](https://portal.incose.org/commerce/store?productId=INCOSE-GUIDENEEDSREQ) and the [Easy Approach to Requirements Syntax](https://alistairmavin.com/ears/) are recommended resources."
msgstr ""
"如果需要撰写优质需求的指导，推荐参考以下资源： "
"[INCOSE Guide to Needs and Requirements](https://portal.incose.org/commerce/"
"store?productId=INCOSE-GUIDENEEDSREQ)以及"
"[Easy Approach to Requirements Syntax](https://alistairmavin.com/ears/)。"

#: ../coffee_machine_logical.md:209
msgid "We use the Derive Requirement relation from the Logical Requirement to the Concept Requirements that we previously created. The direction of this relationship is in the derived from direction, which might be opposite to what you are used to where the higher level requirement points to the lower level requirement."
msgstr ""
"我们采用“派生关系”（Derive "
"Requirement）将逻辑需求与先前创建的概念需求相关联。此关系的方向为\"派生自\"（"
"derived from）方向——这可能与您习惯的上级需求指向下级需求的常规指向相反。"

#: ../coffee_machine_logical.md:215
msgid "Here we derive two requirements:"
msgstr "这里我们推导出两个要求："

#: ../coffee_machine_logical.md:217
msgid "Controller commands heat up"
msgstr "控制器指令加热升温"

#: ../coffee_machine_logical.md:218
msgid "900kPa of water pressure"
msgstr "900kPa水压"

#: ../coffee_machine_logical.md:220
msgid "Logical requirements for the controller command and the water pressure derived from concept requirements"
msgstr "派生自概念需求的控制器指令和水压逻辑需求"

#: ../coffee_machine_logical.md:225
msgid "Update the Logical Requirements diagram with these requirements. If you want, you can also develop additional requirements for all the logical behavior and structure that we specified in the other diagrams."
msgstr ""
"根据这些需求更新逻辑需求图（Logical Requirements "
"diagram）。如果您愿意，也可以针对我们在其他图表中定义的所有逻辑行为和结构进一"
"步开发额外的需求。"

#: ../coffee_machine_wrapup.md:1
msgid "Coffee Machine: Summary"
msgstr "咖啡机：总结"

#: ../coffee_machine_wrapup.md:3
msgid "The Technology Level design uses a very similar approach as the Logical Level. Work on the behavior, structure, and then the requirements. At this level, you will now specify all the design details for how this specific espresso machine will work. We'll leave this exercise up to you to do, and we would be glad to have contributions of this design back in to this tutorial if you are interested in getting involved in Gaphor."
msgstr ""
"技术层（Technology Level）的设计与逻辑层（Logical "
"Level）采用的方法非常相似。依次进行行为、结构及需求的设计。在此层级，您需要具"
"体说明这款特定浓缩咖啡机运作的所有设计细节。我们将这个练习留给您来完成，如果"
"您有兴趣参与Gaphor项目，我们非常乐意将您的设计贡献收录到本教程中。"

#: ../coffee_machine_wrapup.md:10
msgid "As they worked, the ants encountered numerous challenges. They had to ensure that the machine was safe, efficient, and easy to use, all while meeting the unique needs of their feline client. But with their deep understanding of systems engineering and their commitment to key principles and concepts, they were able to overcome these challenges and design an exceptional espresso machine."
msgstr ""
"在制作过程中，蚂蚁们遇到了诸多挑战。它们必须确保这台咖啡机安全可靠、高效便捷"
"，同时还要满足猫咪客户的特殊需求。但凭借对系统工程学的深刻理解，以及对核心原"
"则与理念的坚守，蚂蚁们最终攻克了所有难题，设计出了一款卓越的意式浓缩咖啡机。"

#: ../coffee_machine_wrapup.md:17
msgid "In the end, Cappuccino was thrilled with the machine, which worked flawlessly and was a big hit with his customers. He was so impressed with the ants' work that he offered them a long-term contract to design all of his café's systems. The ants were proud of their success, knowing that it was all thanks to their expertise and deep understanding of systems engineering principles. They had proven that, with the right tools and approach, anything is possible."
msgstr ""
"最终，卡布奇诺猫对这台机器赞不绝口——它运行流畅无阻，更成为顾客们的心头好。蚂"
"蚁团队的精湛技艺令他叹服，当即签下长期合约，邀请他们为咖啡馆设计全套系统。蚂"
"蚁们为这次成功倍感自豪，他们深知这完全得益于自身在系统工程领域的专业造诣与深"
"刻理解。这次合作完美印证了：只要方法得当、工具得力，世间便无不可成之事。"

#: ../connect.md:1
msgid "Connection Protocol"
msgstr "连接（Connection）协议"

#: ../connect.md:3
msgid "In Gaphor, if a connection is made on a diagram between an element and a relationship, the connection is also made at semantic level (the model). From a GUI point of view, a button release event is what kicks of the decision whether the connection is allowed."
msgstr ""
"在Gaphor中，若在图表中的元素与关系之间建立连接，该连接也会在语义层面（即模型"
"）同步建立。从图形用户界面GUI)的角度来看，鼠标按钮释放事件将触发系统判断该连"
"接是否被允许。"

#: ../connect.md:12
msgid "The check if a connection is allowed should also check if it is valid to create a relation to/from the same element (like associations, but not generalizations)."
msgstr "检查连接是否被允许时，还应验证在同一个元素上创建从自身/到自身的关系的有效性（"
"如关联关系允许，但泛化关系则不允许）。"

#: ../container.md:1
msgid "Gaphor in a Container"
msgstr "容器中的Gaphor"

#: ../container.md:3
msgid "Instead of setting up a development environment locally, the easiest way to contribute to the project is using GitHub Codespaces."
msgstr "除了在本地搭建开发环境，为项目做贡献的最简便方式是使用GitHub Codespaces。"

#: ../container.md:6
msgid "GitHub Codespaces"
msgstr "GitHub Codespaces"

#: ../container.md:8
msgid "Follow these steps to open Gaphor in a Codespace:"
msgstr "请按照以下步骤在Codespace中打开Gaphor："

#: ../container.md:9
msgid "Navigate to https://github.com/gaphor/gaphor"
msgstr "导航到 https://github.com/gaphor/gaphor"

#: ../container.md:10
msgid "Click the Code drop-down menu and select the **Open with Codespaces** option."
msgstr "点击“Code”（代码）下拉菜单，选择 “Open with "
"Codespaces”（使用Codespaces打开）选项。"

#: ../container.md:11
msgid "Select **+ New codespace** at the bottom on the pane."
msgstr "在窗格底部选择 **+ New codespace**（+ 新建代码空间）。"

#: ../container.md:13
msgid "For more info, check out the [GitHub documentation](https://docs.github.com/en/free-pro-team@latest/github/developing-online-with-codespaces/creating-a-codespace#creating-a-codespace)."
msgstr ""
"如需了解更多信息，请查阅[GitHub 官方文档](https://docs.github.com/en/free-"
"pro-team@latest/github/developing-online-with-codespaces/"
"creating-a-codespace#creating-a-codespace)。"

#: ../container.md:15
msgid "Remote access to Gaphor graphic window with Codespaces"
msgstr "使用Codespaces远程访问Gaphor图形界面"

#: ../container.md:17
msgid "When using Codespaces, chances are that you also want to interact with the graphical window of Gaphor."
msgstr "使用Codespaces时，您可能还需要与Gaphor的图形界面进行交互。"

#: ../container.md:20
msgid "This is facilitated in Gaphor by use of container feature called [desktop-lite](https://github.com/devcontainers/features/tree/main/src/desktop-lite). This feature is activated by default in the Gaphor's [devcontainer.json](https://github.com/gaphor/gaphor/blob/main/.devcontainer/devcontainer.json) file."
msgstr ""
"在Gaphor中，这一功能通过名为[desktop-lite](https://github.com/devcontainers/"
"features/tree/main/src/desktop-lite)的容器特性实现。该特性已在Gaphor的"
"[devcontainer.json](https://github.com/gaphor/gaphor/blob/main/.devcontainer/"
"devcontainer.json) 配置文件中默认启用。"

#: ../container.md:22
msgid "Notice the webPort/vncPort and password values. These are used in subsequent steps."
msgstr "请注意 webPort/vncPort 和 password 的值，后续步骤中将使用这些参数。"

#: ../container.md:33
msgid "There are two options:"
msgstr "有以下两个选项："

#: ../container.md:34
msgid "Using a local VNC viewer"
msgstr "使用本地VNC查看器"

#: ../container.md:35
msgid "Download and install VNC viewer of your choice (e.g. realvnc)"
msgstr "下载并安装您选择的VNC查看器（例如RealVNC）"

#: ../container.md:36
msgid "Specify remote hostname as *localhost* and port as *5901* and connect VNC. The port number should be same as specified in attribute *vncPort*"
msgstr "请将远程主机名指定为*localhost*，端口设为 *5901* 并连接 "
"VNC。端口号需与属性*vncPort*中设定的数值保持一致"

#: ../container.md:37
msgid "Upon [debugging/running](https://github.com/gaphor/gaphor/blob/main/.devcontainer/devcontainer.json) Gaphor the familiar Graphic window should be displayed in VNC view"
msgstr ""
"在[调试/运行](https://github.com/gaphor/gaphor/blob/main/.devcontainer/"
"devcontainer.json)Gaphor时，熟悉的图形窗口应该会显示在VNC视图中"

#: ../container.md:39
msgid "Using noVNC viewer on the Browser"
msgstr "在浏览器中使用noVNC查看器"

#: ../container.md:40
msgid "This is based on [noVNC](https://novnc.com/info.html) application"
msgstr "基于[noVNC](https://novnc.com/info.html) 应用程序"

#: ../container.md:41
msgid "Open the browser on your local machine and give address as *http://127.0.0.1:6080/*. The port number should be same as specified in attribute *webPort*"
msgstr "在本地计算机上打开浏览器，并输入地址 *http://127.0.0.1:6080/*。端口号需与 "
"*webPort* 属性中指定的保持一致"

#: ../container.md:42
msgid "A noVNC window will open, click on Connect and provide password as *vscode*. The password should be same as specified in attribute *password*"
msgstr "将打开一个noVNC窗口，点击\"连接（Connect）\"并输入密码"
"*vscode*。该密码需与*password*属性中设定的密码一致"

#: ../container.md:43
msgid "Upon [debugging/running](https://github.com/gaphor/gaphor/blob/main/.devcontainer/devcontainer.json) Gaphor the familiar Graphic window should be displayed in noVNC view on Browser"
msgstr ""
"在[调试/运行] (https://github.com/gaphor/gaphor/blob/main/.devcontainer/"
"devcontainer.json)Gaphor时，熟悉的图形窗口应会显示在浏览器的noVNC视图中"

#: ../contribute.md:1
msgid "Contribute to Gaphor"
msgstr "为Gaphor做出贡献"

#: ../contribute.md:3
msgid "Would you like to contribute to the development of Gaphor? If you think this is only something for experienced developers, please reconsider, there are plenty of ways to contribute to Gaphor, no matter your level of experience or skill set."
msgstr ""
"您愿意参与Gaphor的开发吗？如果您认为这只适合经验丰富的开发者，请不要这么想——"
"无论您的经验水平或技能如何，都有多种方式可以为Gaphor作出贡献。"

#: ../contribute.md:7
msgid "You can help to support Gaphor in your language. You can do that on [Weblate](https://hosted.weblate.org/engage/gaphor/), directly from your browser. This service will periodically create [Pull Requests](https://docs.github.com/en/pull-requests/collaborating-with-pull-requests/proposing-changes-to-your-work-with-pull-requests/about-pull-requests) for Gaphor with updated translations."
msgstr ""
"您可以通过以下方式用您的语言支持 Gaphor：直接在浏览器中使用 [Weblate]"
"(https://hosted.weblate.org/engage/gaphor/)进行翻译。"
"该平台会定期将更新的翻译通过 [Pull Requests](https://docs.github.com/en/"
"pull-requests/collaborating-with-pull-requests/"
"proposing-changes-to-your-work-with-pull-requests/about-pull-requests) "
"提交至 Gaphor 项目。"

#: ../contribute.md:13
msgid "It is also very nice if you create your own content around Gaphor. Think about blog posts, videos, and conference talks. When you created something, please drop us a line, so we can add it to the [Tutorials](https://gaphor.org/tutorials) page on the website."
msgstr ""
"我们也非常欢迎您围绕 Gaphor "
"创作自己的内容，比如博客文章、视频或会议演讲。如果您已经创作了相关内容，请告"
"知我们，我们会将其添加到官网的[教程](https://gaphor.org/tutorials) 页面中。"

#: ../contribute.md:17
msgid "If you want to contribute code, a good starting point is this site. It contains a lot of information on how Gaphor is build, especially in the *Concepts* section."
msgstr "若您想贡献代码，当前这个网站是个很好的起点。它包含了大量关于Gaphor构建方式的"
"信息，特别是在*概念*章节中。"

#: ../contribute.md:20
msgid "Some issues are labeled with *first-timers-only*. Those issues are a good starting point to make yourself familiar with the code and code style."
msgstr "部分标注了 *first-timers-"
"only*（仅限新手）的议题（Issue）是熟悉代码和代码风格的理想切入点。"

#: ../contribute.md:23
msgid "It's always a good idea to create an [issue](https://github.com/gaphor/gaphor/issues) or start a [discussion](https://github.com/gaphor/gaphor/discussions) if you want to build something for which there is no issue yet. That way you can assure that your idea is implemented in a way consistent with the application, and it increases the chance your work will be accepted."
msgstr ""
"建议您在开发新功能前先创建[议题](https://github.com/gaphor/gaphor/"
"issues)或发起[讨论](https://github.com/gaphor/gaphor/discussions) "
"——特别是当相关功能尚无现有议题时。这样做既能确保您的实现方案与项目架构保持一"
"致，也能大大提高代码被采纳的概率。"

#: ../contribute.md:28
msgid "You'll need to [fork](https://docs.github.com/en/pull-requests/collaborating-with-pull-requests/working-with-forks/fork-a-repo) Gaphor and set up a [development environment](linux.md) ([macOS](macos.md), [Windows](windows.md))."
msgstr ""
"您需要先 [fork](https://docs.github.com/en/pull-requests/"
"collaborating-with-pull-requests/working-with-forks/fork-a-repo) "
"Gaphor代码库，并搭建相应的[Linux开发环境](linux.md) （[macOS版]"
"(macos.md)、(Windows版)(windows.md)）。"

#: ../contribute.md:33
msgid "In our pipeline we do a couple of quality checks. We strongly recommend that you [install pre-commit](https://pre-commit.com/) and its git hook scripts, so your PR does build on our build environment."
msgstr ""
"在我们的自动化流水线中设有多项质量检查。我们强烈建议您[安装pre-commit](https"
"://pre-commit.com/) "
"及其git钩子脚本，这样可以确保您的PR能在我们的构建环境中顺利通过。"

#: ../design_principles.md:1
msgid "Design Principles"
msgstr "设计原则"

#: ../design_principles.md:3
msgid "Gaphor has been around for quite a few years. In those years we (the Gaphor developers) learned a few things on how to build it. Gaphor tries to be easily accessible for novice users as well as a useful tool for more experienced users."
msgstr ""
"Gaphor已历经多年发展。这些年来，我们（Gaphor开发团队）积累了许多关于如何构建"
"它的宝贵经验。Gaphor始终致力于既为新手用户提供易用体验，同时也为资深用户打造"
"实用工具。"

#: ../design_principles.md:7
msgid "Gaphor is not your average editor. It's a modeling environment. This implies there is a language underpinning the models. Languages adhere to rules and Gaphor tries to follow those rules."
msgstr ""
"Gaphor并非普通的编辑器，而是一个建模环境。这意味着其模型底层存在特定的建模语"
"言规范。这些语言遵循既定的规则体系，而Gaphor始终致力于严格遵循这些规范。"

#: ../design_principles.md:11
msgid "Usability is very important. When you're new to Gaphor, it should be easy to find your way around. Minimal knowledge of UML should at least allow you to create a class diagram."
msgstr "易用性至关重要。初次使用Gaphor时，用户应能轻松上手操作。即使仅掌握UML基础知识"
"，也至少可以创建类图。"

#: ../design_principles.md:19
msgid "Guidance"
msgstr "操作引导"

#: ../design_principles.md:21
msgid "To help users, Gaphor should provide guidance where it can."
msgstr "Gaphor应当尽可能为用户提供操作引导。"

#: ../design_principles.md:23
msgid "Help with relationships"
msgstr "关系辅助功能"

#: ../design_principles.md:25
msgid "The diagram has a feature that it grays out all elements a relationship can not connect to. This helps you to decide where a relation can connect to. You can still mix different elements, but we try to make it as simple as possible to make consistent models."
msgstr ""
"图表具有一项特性：它会将所有无法建立关系的元素显示为灰色。这项功能可帮助您直"
"观判断关系连接的有效范围。虽然系统仍允许混合使用不同元素，但我们始终致力于简"
"化操作流程，确保模型构建的一致性。"

#: ../design_principles.md:30
msgid "Keep the model in sync"
msgstr "保持模型同步"

#: ../design_principles.md:32
msgid "An important part of modeling is to design a system in abstractions and be able to explain those to others. As systems become more complicated, it's important to have the design (model) layed out in diagrams."
msgstr "建模的核心在于通过抽象化设计系统，并能向他人阐释这些设计。随着系统复杂度提升"
"，以图表形式呈现设计（模型）显得尤为重要。"

#: ../design_principles.md:36
msgid "Gaphor goes through great lengths to keep the model in sync with the diagrams. In doing so, unused elements can be automatically removed from the model if they're no longer shown in any diagram."
msgstr "Gaphor "
"不遗余力地确保模型与图表保持同步。在此过程中，未在任何图表中显示的元素将被自"
"动从模型中移除。"

#: ../design_principles.md:40
msgid "Out of your way"
msgstr "不干扰用户操作"

#: ../design_principles.md:42
msgid "When modeling, you should be busy with your problem or solution domain, not with the tool. Gaphor tries to stay out of your way as much as possible. It does not try to nag you with error messages, because the model is not \"correct\"."
msgstr ""
"在进行建模时，您应当专注于问题域或解决方案域，而非工具本身。Gaphor始终致力于"
"最大程度减少对用户的干扰——它不会频繁弹出错误提示来打扰您，"
"因为模型本身并无绝对\"正确\"可言。"

#: ../design_principles.md:46
msgid "Avoid dialogs"
msgstr "减少对话框使用"

#: ../design_principles.md:48
msgid "In doing the right thing, and staying out of the way of users, Gaphor avoids the use of dialogs as much as possible."
msgstr "为实现正确的设计理念并减少对用户操作的干扰，Gaphor 尽可能避免使用对话框。"

#: ../design_principles.md:51
msgid "Gaphor should allow you to do the sensible thing (see above) and not get you out of your flow with all sorts of questions."
msgstr "Gaphor "
"应当让用户能够执行合理操作（参见上述原则），而不会通过各类提问打断用户的工作"
"流程。"

#: ../design_principles.md:54
msgid "Notify on changes"
msgstr "变更通知"

#: ../design_principles.md:56
msgid "When Gaphor is doing something that is not directly visible, you'll see a notification, for example, an element that's indirectly removed from the model. It will not interrupt you with dialogs, but only provide a small in-app notification. If the change is undesired, hit `undo`."
msgstr ""
"当Gaphor执行非直观操作时（例如间接移除模型中的元素），系统将通过应用内通知提"
"示用户，而不会弹出对话框中断当前操作。若需撤销变更，只需点击`撤销`按钮。"

#: ../design_principles.md:61
msgid "Balanced"
msgstr "平衡设计"

#: ../design_principles.md:63
msgid "Although Gaphor implements quite a bit of the UML 2 model, it's not complete. We try to find the right balance in features to suite both expert and novice modellers."
msgstr ""
"尽管Gaphor实现了UML "
"2规范中的大量建模功能，但并未涵盖全部内容。我们力求在功能设计上找到最佳平衡点"
"，以同时满足资深建模师和初学者的需求。"

#: ../design_principles.md:67
msgid "Continuity"
msgstr "持续演进"

#: ../design_principles.md:69
msgid "A model that is created should be usable in the future. Gaphor does acknowledge that. We care about compatibility."
msgstr "所创建的模型应当具备长期可用性——这正是Gaphor的核心承诺。我们高度重视版本兼容"
"性。"

#: ../design_principles.md:72
msgid "Backwards compatibility"
msgstr "向后兼容性"

#: ../design_principles.md:74
msgid "Gaphor is capable of loading models going back to Gaphor 1.0. It's important for a tool to always allow older models to be loaded."
msgstr "Gaphor具备加载历史版本模型的能力，可向下兼容至1.0版本。对建模工具而言，确保始"
"终能够加载旧版模型至关重要。"

#: ../design_principles.md:77
msgid "Multi-platform"
msgstr "跨平台"

#: ../design_principles.md:79
msgid "We put a lot of effort in making Gaphor run on all major platforms: Windows, macOS, and Linux. Having Gaphor available on all platforms is essential if the model needs to be shared. It would be awful if you need to run one specific operating system in order to open a model."
msgstr ""
"我们投入大量精力确保Gaphor能在所有主流平台上运行，包括Windows、macOS和Linux。"
"当需要共享模型时，实现全平台可用性至关重要——毕竟，若因操作系统限制而无法打开"
"模型，这样的体验实在糟糕。"

#: ../design_principles.md:84
msgid "So far, we do not support the fourth major platform (web). Native applications provide a better user experience (once installed). But this may change."
msgstr "目前，我们暂未支持第四大主流平台（Web端）。本地应用程序能提供更优质的用户体验"
"（安装后即可）。不过这一情况未来可能会有所改变。"

#: ../design_principles.md:87
msgid "User interaction"
msgstr "用户交互"

#: ../design_principles.md:89
msgid "Gaphor is originally written on Linux. It uses [GTK](https://gtk.org) as it's user interface toolkit. This sort of implies that Gaphor follows the [GNOME Human Interface Guidelines (HIG)](https://developer.gnome.org/hig/). Gaphor is also a multi-platform application. We try to stay close to the GNOME HIG, but try not to introduce concepts that are not available on Windows and macOS."
msgstr ""
"Gaphor最初是基于Linux平台开发的，采用 [GTK](https://gtk.org) "
"作为其用户界面工具包。这意味着Gaphor遵循 "
"[GNOME Human Interface Guidelines (HIG)](https://developer.gnome.org/hig/"
")的设计规范。作为一款跨平台应用，我们虽力求贴近GNOME "
"HIG标准，但会避免引入Windows和macOS平台不支持的设计概念。"

#: ../design_principles.md:95
msgid "User interface components are not generated. We found that UI generation (like many enterprise modeling tools do) provides an awful user experience. We want users to use Gaphor on a regular basis, so we aim for it to be a tool that's pleasant to look at and easy to work with."
msgstr ""
"用户界面组件不是自动生成出来的。我们发现，如同许多企业级建模工具那样采用UI自"
"动生成技术，反而会带来糟糕的用户体验。我们希望用户能长期使用Gaphor，因此致力"
"于打造一款界面美观、操作便捷的建模工具。"

#: ../design_principles.md:101
msgid "What else?"
msgstr "还有哪些原则？"

#: ../design_principles.md:103
msgid "On a technical level, the following principles are also applicable:"
msgstr "在技术层面，以下原则同样适用："

#: ../design_principles.md:105
msgid "**Idempotency** Allow the same operation to be applied multiple times. This should not affect the result."
msgstr "**幂等性**：允许同一操作被重复执行多次，且不会影响最终结果。"

#: ../design_principles.md:107
msgid "**Event Driven** Gaphor is a user application. It acts to user events. The application uses an internal event dispatches (event bus) to distribute events to interested parties. Everyone should be able to listen to events."
msgstr ""
"**事件驱动**：作为用户应用程序，Gaphor通过内部事件分发机制（事件总线）响应用"
"户操作，并将事件传递至相关组件。所有模块均具备监听事件的能力。"

#: ../event_system.md:1
msgid "Event System"
msgstr "事件系统"

#: ../event_system.md:3
msgid "The event system in Gaphor provides an API to *handle* events and to *subscribe* to events."
msgstr "Gaphor的事件系统提供了一套API，用于*处理*（handle）和*订阅*（subscribe）各类"
"事件。"

#: ../event_system.md:6
msgid "In Gaphor we manage event handler subscriptions through the `EventManager` service. Gaphor is highly event driven:"
msgstr ""
"在Gaphor中，我们通过`EventManager`服务管理事件处理器（event "
"handler）的订阅。Gaphor高度依赖事件驱动机制："

#: ../event_system.md:9
msgid "Changes in the loaded model are emitted as events"
msgstr "模型变更通过事件触发"

#: ../event_system.md:10
msgid "Changes on diagrams are emitted as events"
msgstr "图表变更通过事件触发"

#: ../event_system.md:11
msgid "Changes in the UI are emitted as events"
msgstr "UI变更通过事件触发"

#: ../event_system.md:13
msgid "Although Gaphor depends heavily on GTK for its user interface, Gaphor is using its own event dispatcher. Events can be structured in hierarchies. For example, an `AttributeUpdated` event is a subtype of `ElementUpdated`. If we are interested in all changes to elements, we can also register `ElementUpdated` and receive all `AttributeUpdated` events as well."
msgstr ""
"尽管Gaphor的用户界面重度依赖GTK，但其事件分发器（event "
"dispatcher）采用自主实现的方案。事件支持层级化结构——例如，`AttributeUpdated`"
"事件就是`ElementUpdated`事件的子类型。若需要监听元素的所有变更，只需注册`Elem"
"entUpdated`事件即可同时接收所有`AttributeUpdated`事件通知。"

#: ../../gaphor/core/eventmanager.py:docstring of gaphor.core.eventmanager.EventManager:1
msgid "The Event Manager provides a flexible way to dispatch events."
msgstr "事件管理器（Event Manager）提供了一种灵活的事件分发机制。"

#: ../../gaphor/core/eventmanager.py:docstring of gaphor.core.eventmanager.EventManager:3
msgid "Event dispatching is a central component in Gaphor. It allows components in Gaphor to react to changes in the application."
msgstr "事件分发是Gaphor的核心组件，它使Gaphor的各个组件能够响应应用程序中的状态变更"
"。"

#: ../../gaphor/core/eventmanager.py:docstring of gaphor.core.eventmanager.EventManager:6
msgid "Events are dispatched by type."
msgstr "事件按类型进行分发。"

#: ../../gaphor/core/eventmanager.py:docstring of gaphor.core.eventmanager.EventManager.subscribe:1
msgid "Register a handler."
msgstr "注册事件处理器（handler）。"

#: ../../gaphor/core/eventmanager.py:docstring of gaphor.core.eventmanager.EventManager.subscribe:3
msgid "Handlers are triggered (executed) when events are emitted through the :obj:`~gaphor.core.eventmanager.EventManager.handle` method."
msgstr ""
"当事件通过:obj:`~gaphor.core.eventmanager.EventManager.handle`方法触发时，相"
"关处理器（handler）被执行。"

#: ../../gaphor/core/eventmanager.py:docstring of gaphor.core.eventmanager.EventManager.unsubscribe:1
msgid "Unregister a previously registered handler."
msgstr "注销已注册的事件处理器。"

#: ../../gaphor/core/eventmanager.py:docstring of gaphor.core.eventmanager.EventManager.handle:1
msgid "Send event notifications to registered handlers."
msgstr "向已注册的处理器发送事件通知。"

#: ../../gaphor/core/eventmanager.py:docstring of gaphor.core.eventmanager.event_handler:1
msgid "Mark a function/method as an event handler for a particular type of event."
msgstr "将函数/方法标记为特定类型事件的事件处理器。"

#: ../../gaphor/core/eventmanager.py:docstring of gaphor.core.eventmanager.event_handler:4
msgid "Given a custom event type:"
msgstr "对于自定义事件类型："

#: ../../gaphor/core/eventmanager.py:docstring of gaphor.core.eventmanager.event_handler:10
msgid "You can apply this to a handler method or function:"
msgstr "您可以通过以下方式将其应用于处理器方法或函数："

#: ../../gaphor/core/eventmanager.py:docstring of gaphor.core.eventmanager.event_handler:16
msgid "This will allow you to let the even be handled by an event manager:"
msgstr "这将允许您通过事件管理器（Event Manager）处理该事件："

#: ../event_system.md:31
msgid "Under the hood events are handled by the Generics library. For more information about how the Generic library handles events see the [Generic documentation](https://generic.readthedocs.io)."
msgstr ""
"在底层实现中，事件处理由泛型库（Generics "
"library）完成。如需了解该库处理事件的具体机制，请参阅[泛型库文档]"
"(https://generic.readthedocs.io)。"

#: ../first_model.md:1
msgid "Your First Model"
msgstr "您的第一个模型"

#: ../first_model.md:8
msgid "Although the names should speak for themselves, you can check out the [Getting Started](getting_started) page for more information."
msgstr "虽然名称应该不言自明，但您仍可查阅[入门指南页面](getting_started) "
"获取更多信息。"

#: ../first_model.md:12
msgid "Once Gaphor is started, and you can start a new model with the _Generic_ template. The initial diagram is already open in the Diagram section."
msgstr "启动Gaphor后，您即可使用_通用_模板创建新模型，初始图表将自动在图表区打开。"

#: ../first_model.md:15
msgid "Select an element you want to place, in this case a Class (![Icon for Class.](../gaphor/ui/icons/hicolor/scalable/actions/gaphor-class-symbolic.svg)) by clicking on the icon in the Toolbox and click on the diagram. This will place a new Class item instance on the diagram and add a new Class to the model -- it shows up in the Model Browser. The selected tool will reset itself to the Pointer tool after the element is placed on the diagram."
msgstr ""
"在工具箱中点击类（Class）元素图标(![Icon for Class.](../gaphor/ui/icons/"
"hicolor/scalable/actions/gaphor-class-"
"symbolic.svg))，在图表区域单击鼠标，此时将：在图表上创建新的类实例；在模型浏"
"览器中添加对应的类元素；元素放置完成后，工具将自动切换回指针工具。"

#: ../first_model.md:15
msgid "Icon for Class."
msgstr "类图标。"

#: ../first_model.md:21
msgid "The Property Editor on the right side will show you details about the newly added class, such as its name (_New Class_), attributes and operations (methods). The Note field can contain any text you wish to associate with the element, (this will not show on a diagram)."
msgstr ""
"右侧的属性编辑器将显示新增类的详细信息，包括：名称（默认为_新建类_）、属性（A"
"ttributes）列表、操作（Operations）方法。备注字段可添加任意相关文本（该内容不"
"会显示在图表中）。"

#: ../first_model.md:25
msgid "![The Gaphor main window showing a single class added to the model.](images/first-model-class.png)"
msgstr "![显示已添加到模型中的单个类的Gaphor主窗口。](images/first-model-class.png)"

#: ../first_model.md:25
msgid "The Gaphor main window showing a single class added to the model."
msgstr "显示已添加到模型中的单个类的Gaphor主窗口。"

#: ../first_model.md:27
msgid "It's simple to add elements to a diagram."
msgstr "向图中添加元素非常简单。"

#: ../first_model.md:29
msgid "Gaphor does not make any assumptions about which elements should be placed on a diagram. A diagram is a diagram. UML defines all different kinds of diagrams, such as Class diagrams, Component diagrams, Action diagrams, Sequence diagrams. But Gaphor does not place any restrictions."
msgstr ""
"Gaphor 不会预设哪些元素应该放在图中。图就是图。UML "
"定义了各种不同类型的图，比如类图、组件图、活动图、序列图等，但 Gaphor "
"不会施加任何限制。"

#: ../first_model.md:34
msgid "Adding Relations"
msgstr "添加关系"

#: ../first_model.md:36
msgid "Add another Class. Change the names to `Shape` and `Circle`. Let's define that `Circle` is a sub-type of `Shape`. You can do this by selecting one and changing the name in the Property Editor, or by double-clicking the element."
msgstr ""
"添加另一个类（Class），将名称分别改为 `Shape` 和 `Circle`。我们要定义 "
"`Circle` 是 `Shape` "
"的子类型。你可以通过以下方式操作：选中元素，在属性编辑器（Property "
"Editor）中修改名称；或直接双击元素进行编辑。"

#: ../first_model.md:40
msgid "Select Generalization (![Icon for generalization relationships.](../gaphor/ui/icons/hicolor/scalable/actions/gaphor-generalization-symbolic.svg))."
msgstr ""
"选择泛化关系（Generalization）(![Icon for generalization relationships.](../"
"gaphor/ui/icons/hicolor/scalable/actions/gaphor-generalization-"
"symbolic.svg))。"

#: ../first_model.md:40
msgid "Icon for generalization relationships."
msgstr "泛化关系图标。"

#: ../first_model.md:42
msgid "Move the mouse cursor over `Shape`. Click, hold and drag the line end over `Circle`. Release the mouse button, and you should have your relationship between `Shape` and `Circle`. You can see both ends of the relation are red, indicating they are connected to their class."
msgstr ""
"将鼠标光标移动到 `Shape` 上，点击并按住鼠标，拖动连线端点至 `Circle` "
"上方后松开。此时 `Shape` 和 `Circle` "
"之间就建立了关联关系。您会看到连线两端显示为红色，表示已成功连接到对应的类。"

#: ../first_model.md:47
msgid "![The Gaphor main window showing two classes connected by a generalization relationship.](images/first-model-generalization.png)"
msgstr "![Gaphor 主窗口显示两个通过泛化关系连接的类。](images/first-model-"
"generalization.png)"

#: ../first_model.md:47
msgid "The Gaphor main window showing two classes connected by a generalization relationship."
msgstr "Gaphor 主窗口显示两个通过泛化关系连接的类。"

#: ../first_model.md:49
msgid "Optionally you can run the auto-layout (![Menu icon](images/open-menu-symbolic.svg) → Tools → Auto Layout) to align the elements on the diagram."
msgstr ""
"（可选）您可以运行自动布局功能（(![Menu icon](images/open-menu-symbolic.svg) "
"→ 工具 → 自动布局）来对齐图中的元素。"

#: ../first_model.md:49
#: ../plugins.md:45
#: ../style_sheets.md:343
msgid "Menu icon"
msgstr "菜单图标"

#: ../first_model.md:53
msgid "Creating New Diagrams"
msgstr "创建新图表"

#: ../first_model.md:55
msgid "To create a new diagram, use the Model Browser. Select the element that should contain the new diagram. For now, select _New Model_. Click the New Diagram menu (![Plus symbol of the New Diagram popup menu.](images/list-add-symbolic.svg)) in the header bar."
msgstr ""
"要创建新图表，请使用模型浏览器。首先选择包含新图表的元素（当前，请选择_新建模"
"型_），然后点击标题栏中的\"新建图表\"菜单 (!"
"[Plus symbol of the New Diagram popup menu.](images/list-add-symbolic.svg))。"

#: ../first_model.md:55
msgid "Plus symbol of the New Diagram popup menu."
msgstr "新建图表弹出菜单的加号图标。"

#: ../first_model.md:59
msgid "![The New Diagram popup window.](images/first-model-new-diagram-popup.png)"
msgstr "![新建图表弹出窗口。](images/first-model-new-diagram-popup.png)"

#: ../first_model.md:59
msgid "The New Diagram popup window."
msgstr "新建图表弹出窗口。"

#: ../first_model.md:61
msgid "Select _New Generic Diagram_ and a new diagram is created."
msgstr "选择_新建通用图表_，系统将创建一张新图表。"

#: ../first_model.md:63
msgid "Now drag the elements from the Model Browser onto the new diagram. First the classes `Shape` and `Circle`. Add the generalization last. Drop it somewhere between the two classes. The relation will be created to the diagram."
msgstr ""
"现在将元素从模型浏览器拖拽至新图表中：首先拖入类` Shape` 和 "
"`Circle`，最后添加泛化关系，将其放置在两个类之间的任意位置，系统会自动在图表"
"中建立该关联关系。"

#: ../first_model.md:67
msgid "Now change the name of class `Circle` to `Ellipse`. Check the other diagram. The name has been changed there as well."
msgstr "现在将类 `Circle`的名称修改为 "
"`Ellipse`，然后查看另一个图表——该类的名称也已同步更新。"

#: ../first_model.md:72
msgid "Elements in a diagram are only a _representation_ of the elements in the underlying model. The model is what you see in the Model Browser."
msgstr "图表中的元素只是底层模型元素的_表现形式_。您在模型浏览器中看到的才是模型本身"
"。"

#: ../first_model.md:75
msgid "Elements in the model are automatically removed when there are no more representations in any of the diagrams."
msgstr "当元素在所有图表中都不再存在任何_表现形式_时，模型中的对应元素将被自动移除。"

#: ../first_model.md:78
msgid "Examples of Gaphor models"
msgstr "Gaphor模型样例"

#: ../first_model.md:80
msgid "SysML Models"
msgstr "SysML模型"

#: ../first_model.md:81
msgid "To see how a larger model comes together in Gaphor check out [Gaphor Distilled](https://github.com/mikekidner/gaphor_distilled) which implements the DELL-SAT-77 model used as the basis for [SysML Distilled](https://delligattiassociates.com/publications/?_gl=1*1tu6ekh*_ga*MTMwMTU4NjMyNC4xNzMyNTYyOTUw*_up*MQ..) one of the standard references for the SysML language."
msgstr ""
"要了解更复杂的模型如何在Gaphor中构建，请参考[Gaphor精粹项目](https://"
"github.com/mikekidner/gaphor_distilled))——该项目实现了作为[《SysML精粹》]"
"(https://delligattiassociates.com/publications/"
"?_gl=1*1tu6ekh*_ga*MTMwMTU4NjMyNC4xNzMyNTYyOTUw*_up*MQ..)基础模型的DELL-"
"SAT-77模型，而《SysML精粹》正是SysML语言的标准参考著作之一。"

#: ../framework.md:1
msgid "Framework"
msgstr "框架"

#: ../framework.md:3
msgid "Overview"
msgstr "概述"

#: ../framework.md:5
msgid "Gaphor is built in a light, service oriented fashion. The application is split in a series of services, such as a file, event, and undo managers. Those services are loaded based on entry points defined in the `pyproject.toml` file. To learn more about the architecture, please see the description about the [Service Oriented Architecture](service_oriented.md)."
msgstr ""
"Gaphor采用轻量级的面向服务架构设计，其功能模块被划分为一系列独立服务，包括文"
"件管理、事件管理和撤销管理等组件。这些服务通过`pyproject.toml`配置文件中定义"
"的入口点动态加载。如需深入了解架构设计，请参阅[面向服务架构]"
"(service_oriented.md)的详细说明。"

#: ../framework.md:11
msgid "Event driven"
msgstr "事件驱动"

#: ../framework.md:13
msgid "Parts of Gaphor communicate with each other through events. Whenever something important happens, for example, an attribute of a model element changes, an event is sent. When other parts of the application are interested in a change, they register an event handler for that event type. Events are emitted though a central broker so you do not have to register on every individual element that can send an event they are interested in. For example, a diagram item could register an event rule and then check if the element that sent the event is actually the event the item is representing. For more information see the full description of the [event system](event_system)."
msgstr ""
"Gaphor各组件通过事件机制进行通信。当发生重要变更时（例如模型元素的属性修改）"
"，系统会自动触发事件通知。应用中的其他模块只需在中央事件代理（Central "
"Broker）注册对应类型的事件处理器（Event "
"Handler），即可监听相关变更——无需向每个可能触发事件的元素单独注册。例如，图表"
"项可以注册事件规则，并通过验证事件源是否与其所代表的模型元素匹配来实现精准响"
"应。完整实现细节请参阅[事件系统](event_system)专题文档。"

#: ../framework.md:23
msgid "Transactional"
msgstr "事务型处理机制（Transactional）"

#: ../framework.md:25
msgid "Gaphor is transactional, which means it keeps track of the functions it performs as a series of transactions. The transactions work by sending an event when a transaction starts and sending another when a transaction ends. This allows, for example, the undo manager to keep a running log of the previous transactions so that a transaction can be reversed if the undo button is pressed."
msgstr ""
"Gaphor采用事务处理机制，其核心原理是将所有功能操作记录为连续的事务序列。该机"
"制通过以下方式实现：在事务开始时发送启动事件，事务结束时发送完成事件。这种设"
"计使得（例如）撤销管理器能够持续记录历史事务日志，当用户点击撤销按钮时，系统"
"即可回滚特定事务。"

#: ../framework.md:32
msgid "Main Components"
msgstr "主要组件"

#: ../framework.md:34
msgid "The main portion of Gaphor that executes first is called the `Application`. Gaphor can have multiple models open at any time. Each model is kept in a `Session`. Only one Application instance is active. Each session will load its own services defined as [gaphor.services](service_oriented.md)."
msgstr ""
"Gaphor的初始执行主体称为`Application`核心模块。系统支持同时打开多个模型，每个"
"模型均存储在独立的`Session`会话中。运行时仅允许一个Application实例处于激活状"
"态，而每个会话会动态加载其专属的服务组件（定义于[gaphor.services]"
"(service_oriented.md)）。"

#: ../framework.md:40
msgid "The most notable services are:"
msgstr "核心服务组件包括："

#: ../framework.md:42
msgid "event_manager"
msgstr "事件管理器（event_manager）"

#: ../framework.md:44
msgid "This is the central component used for event dispatching. Every service that does something with events (both sending and receiving) depends on this component."
msgstr "该组件是事件调度的核心枢纽，所有涉及事件处理（包括发送与接收）的服务模块均依"
"赖于此组件。"

#: ../framework.md:48
msgid "element_factory"
msgstr "元素工厂 (element_factory)"

#: ../framework.md:50
msgid "The [data model](models/core) itself is maintained in the element factory ({obj}`~gaphor.core.modeling.ElementFactory`). This service is used to create model elements, as well as to lookup elements or query for a set of elements."
msgstr ""
"[数据模型](models/"
"core)本身由元素工厂（{obj}`~gaphor.core.modeling.ElementFactory`）维护，该服"
"务组件主要提供三大功能：创建模型元素、元素检索、元素集合查询。"

#: ../framework.md:54
msgid "undo_manager"
msgstr "撤销管理器 (undo_manager)"

#: ../framework.md:56
msgid "One of the most appreciated services. It allows users to make a mistake every now and then!"
msgstr "最受欢迎的服务组件之一：该管理器允许用户在执行操作时偶尔出错（毕竟谁能保证永"
"不失误呢）！"

#: ../framework.md:59
msgid "The undo manager is transactional. Actions performed by a user are only stored if a transaction is active. If a transaction is completed (committed) a new undo action is stored. Transactions can also be rolled back, in which case all changes are played back directly. For more information see the full description of the [undo manager](undo)."
msgstr ""
"撤销管理器采用事务处理机制，其运作规则如下：事务激活原则（仅当事务处于活动状"
"态时，用户操作才会被记录）、 "
"提交处理（事务完成（提交）后，系统将存储新的撤销操作项）、 "
"回滚机制（事务回滚时将直接逆向执行所有变更）。完整实现细节请参阅"
"[撤销管理器专题文档](undo)。"

#: ../framework.md:65
msgid "file_manager"
msgstr "文件管理器 (file_manager)"

#: ../framework.md:67
msgid "Loading and saving a model is done through this service."
msgstr "模型加载与保存功能均通过该组件实现。"

#: ../gaphor-services.md:5
msgid "Example: Gaphor services"
msgstr "示例：Gaphor服务"

#: ../gaphor-services.md:7
msgid "In this example we're doing something a little less trivial. In Gaphor, services are defined as [entry points](https://packaging.python.org/en/latest/specifications/entry-points/). Each service is a class, and takes parameters with names that match other services. This allows services to depend on other services."
msgstr ""
"在此示例中，我们将演示一个较为复杂的实现：Gaphor中的服务组件通过[入口点]"
"(https://packaging.python.org/en/latest/specifications/entry-points/"
")定义。每个服务均为独立类，其构造函数参数通过名称自动匹配其他服务实例，从而实"
"现服务间的依赖注入。"

#: ../gaphor-services.md:12
msgid "It looks something like this:"
msgstr "其实现方式如下所示："

#: ../gaphor-services.md:56
msgid "Let's first load the entry points."
msgstr "首先加载入口点配置。"

#: ../gaphor-services.md:68
msgid "Now let's create a component in our model for every service."
msgstr "现在为每个服务在模型中创建对应的组件。"

#: ../gaphor-services.md:85
msgid "With all components mapped, we can create dependencies between those components, based on the constructor parameter names."
msgstr "当所有组件完成映射后，系统将根据构造函数参数名称自动建立组件间的依赖关系。"

#: ../gaphor-services.md:101
msgid "With all elements in the model, we can create a diagram. Let's drop the components and dependencies on the diagram and let auto-layout do its magic."
msgstr "当模型中所有元素就绪后，即可创建图表。将组件及其依赖关系拖放至图表中，系统将"
"通过自动布局功能智能排版。"

#: ../gaphor-services.md:104
msgid "To make the dependency look good, we have to add a style sheet. If you create a new diagram via the GUI, this element is automatically added."
msgstr "为使依赖关系呈现更佳视觉效果，需添加样式表。若通过图形界面新建图表，该元素将"
"自动加载。"

#: ../gaphor-services.md:118
msgid "Last step is to layout and draw the diagram."
msgstr "最后一步是图表布局与绘制。"

#: ../gaphor-services.md:128
msgid "That's all. As you can see from the diagram, a lot of services rely on `EventManager`."
msgstr "至此完成。如图所示，很多服务组件都依赖于`EventManager`事件管理器。"

#: ../getting_started.md:1
msgid "Get Started with Gaphor"
msgstr "Gaphor 入门指南"

#: ../getting_started.md:3
msgid "Gaphor is more than a diagram editor: it's a modeling environment. Where simple diagram editors such as Microsoft Visio and [draw.io](https://draw.io) allow you to create pictures, Gaphor actually keeps track of the elements you add to the model. In Gaphor you can create diagrams to track and visualize different aspects of the system you're developing."
msgstr ""
"Gaphor不仅是一款图表编辑器，更是一个完整的建模环境。相较于Microsoft Visio和"
"[draw.io]"
"(https://draw.io)等基础绘图工具仅能创建静态图示，Gaphor会持续追踪模型中所有元"
"素的关联关系。通过Gaphor，您可以创建多种图表来追踪和可视化目标系统的不同维度"
"特征。"

#: ../getting_started.md:9
msgid "Enough talk, let's get started."
msgstr "实战开始。"

#: ../getting_started.md:11
msgid "You can find installers for Gaphor on the [Gaphor Website](https://gaphor.org/download). Gaphor can be installed on Linux (Flatpak), Windows, and macOS."
msgstr ""
"您可访问[Gaphor官网](https://gaphor.org/"
"download)下载安装程序、跨平台支持Linux系统（Flatpak格式）、Windows系统、macOS"
"系统。"

#: ../getting_started.md:14
msgid "Once Gaphor is launched, it provides you a welcome screen. It shows you previously opened models and model templates."
msgstr "当启动Gaphor时，系统会呈现欢迎界面，该界面会显示您最近打开的模型文件以及可用"
"的模型模板库。"

#: ../getting_started.md:17
msgid "![Gaphor's welcome screen showing recently opened models and model templates.](images/getting-started-greeter.png)"
msgstr "![Gaphor欢迎界面展示（含最近打开的模型文件与模型模板库）。](images/getting-"
"started-greeter.png)"

#: ../getting_started.md:17
msgid "Gaphor's welcome screen showing recently opened models and model templates."
msgstr "Gaphor欢迎界面展示（含最近打开的模型文件与模型模板库）。"

#: ../getting_started.md:19
msgid "You can select a template to get started."
msgstr "可以选择一个模板快速开始建模。"

#: ../getting_started.md:21
msgid "**Generic:** a blank model to start with"
msgstr "**通用模板**：空白模型（供全新建模使用）"

#: ../getting_started.md:22
msgid "**UML:** A template for the *Unified Modeling Language* for modeling a software system"
msgstr "**UML模板**：适用于统一建模语言的软件系统建模模板"

#: ../getting_started.md:23
msgid "**SysML:** A template for the *Systems Modeling Language* for modeling a wide range of systems and systems-of-systems"
msgstr "**SysML模板**：适用于系统建模语言的复杂系统及系统之系统建模模板"

#: ../getting_started.md:24
msgid "**RAAML:** A template for the *Risk Analysis and Assessment Modeling language* for safety and reliability analysis"
msgstr ""
"**RAAML模板**：适用于风险分析与评估建模语言（*Risk Analysis and Assessment "
"Modeling language*）的安全性与可靠性分析模板"

#: ../getting_started.md:25
msgid "**C4 Model:** A template for *Context, Containers, Components, and Code* which is for lean modeling of software architecture"
msgstr ""
"**C4模型模板**： "
"一套适用于软件架构精简建模的模板，包含*上下文（Context）、容器（Containers）"
"、组件（Components）和代码（Code）*四个层级"

#: ../getting_started.md:27
msgid "Once the model interface is loaded you'll see the modeling interface."
msgstr "当模型界面加载完成后，您将看到建模操作界面。"

#: ../getting_started.md:29
msgid "![The Gaphor main window, with numbers refering to parts of the UI.](images/getting-started-new-model.png)"
msgstr "![Gaphor 主窗口示意图，图中数字对应界面各组成部分。](images/getting-started-"
"new-model.png)"

#: ../getting_started.md:29
msgid "The Gaphor main window, with numbers refering to parts of the UI."
msgstr "Gaphor 主窗口示意图，图中数字对应界面各组成部分。"

#: ../getting_started.md:31
msgid "The layout of the Gaphor interface is divided into four sections, namely:"
msgstr "Gaphor 界面布局划分为以下四个区域："

#: ../getting_started.md:34
#: ../getting_started.md:41
msgid "Model Browser"
msgstr "模型浏览器"

#: ../getting_started.md:35
msgid "Diagram Element Toolbox"
msgstr "图标元素工具箱"

#: ../getting_started.md:36
#: ../getting_started.md:80
#: ../models/raaml/Diagrams.rst:2
#: ../models/sysml/Diagrams.rst:2
msgid "Diagrams"
msgstr "图表区域"

#: ../getting_started.md:37
#: ../getting_started.md:143
msgid "Property Editor"
msgstr "属性编辑器"

#: ../getting_started.md:39
msgid "Each section has its own specific function."
msgstr "每个功能区域都有其特定的用途。"

#: ../getting_started.md:43
msgid "The Model Browser section of the interface displays a hierarchical view of your model. Every model element you create will be inserted into the Model Browser. This view acts as a tree where you can expand and collapse different elements of your model. This provides an easy way to view the elements of your model from an elided perspective. That is, you can collapse those model elements that are irrelevant to the task at hand."
msgstr ""
"界面中的模型浏览器区域以层级结构展示模型内容。所有创建的模型元素都会自动载入"
"模型浏览器。该视图采用树形结构，支持展开或折叠模型中的各个元素。这种设计让用"
"户能够从简化的视角查看模型——通过折叠当前任务无关的模型元素，快速聚焦关键内容"
"。"

#: ../getting_started.md:51
msgid "In the figure above, you will see that there are two elements in the Model Browser. The root element, _New Model_ is a package. Notice the small arrow beside _New Model_ that is pointing downward. This indicates that the element is expanded. You will also notice the two sub-elements are slightly indented in relation to _New Model_. The _main_ element is a diagram."
msgstr ""
"在上图中可见，模型浏览器内包含两个元素。根元素 _New Model_ "
"是一个包（package）。注意 _New Model_ "
"旁的小箭头朝下，表示该元素处于展开状态。另可见两个子元素相对 _New Model_ "
"有轻微缩进，其中 _main_ 元素为图表（diagram）。"

#: ../getting_started.md:58
msgid "In the Model Browser view, you can also right-click the model elements to get a context menu. This context menu allows you to find out in which diagram model elements are shown, add new diagrams and packages, and delete an element."
msgstr ""
"在模型浏览器视图中，您还可以右键点击模型元素唤出上下文菜单。通过该菜单可以："
"定位元素所在的图表、添加新图表或包（package）、以及删除元素。"

#: ../getting_started.md:63
msgid "Double-clicking on a diagram element will show it in the Diagram section. Elements such as classes and packages can be dragged from the tree view on the diagrams."
msgstr "双击图表元素即可在【图表编辑区】显示该元素。您可以将类（Class）、包（Package"
"）等元素从树状视图直接拖拽至图表中。"

#: ../getting_started.md:67
msgid "Toolbox"
msgstr "工具箱"

#: ../getting_started.md:69
msgid "The toolbox is used to add new items to a diagram. Select the element you want to add by clicking on it. When you click on the diagram, the selected element is created. The arrow is selected again, so the element can be manipulated."
msgstr "该工具箱用于向图表添加新元素，点击所需元素进行选择，然后在图表上点击即可创建"
"所选元素。箭头工具将自动重新选中，以便对元素进行操作。"

#: ../getting_started.md:73
msgid "Tools can be selected by simply left-clicking on them. By default, the pointer tool is selected after every item placement. This can be changed by disabling the \"Reset tool\" option in the Preferences window. Tools can also be selected by keyboard shortcuts. The keyboard shortcut can be displayed as a tooltip by hovering over the tool button in the toolbox. Finally, it is also possible to drag elements on the Diagram from the toolbox."
msgstr ""
"工具选择只需左键点击相应图标即可。默认情况下，每次放置元素后指针工具会自动重"
"新激活，该行为可通过偏好设置窗口禁用\"重置工具\"选项进行调整"
"。工具还支持键盘快捷键选择：将鼠标悬停在工具箱按钮上可显示对应的快捷键提示。"
"此外，用户还可直接从工具箱拖拽元素至图表区域进行创建。"

#: ../getting_started.md:82
msgid "The diagram section contains diagrams of the model and takes up the most space in the UI because it is where most of the modeling is done. Diagrams consist of items placed on the diagram. There are two main types of items:"
msgstr "图表区域包含模型的各类图表，由于是主要建模操作界面，因此在用户界面中占据最大"
"空间。图表由置于其上的元素构成，这些元素主要分为两种类型："

#: ../getting_started.md:86
#: ../getting_started.md:93
msgid "Elements"
msgstr "元素"

#: ../getting_started.md:87
msgid "Relationships"
msgstr "关系"

#: ../getting_started.md:89
msgid "Multiple diagrams can be opened at once: they are shown in tabs. Tabs can be closed by pressing <kbd>Ctrl</kbd>+<kbd>w</kbd> or left-clicking on the x in the diagram tab."
msgstr ""
"可同时打开多个图表，并以标签页形式显示。关闭标签页的方式包括：按下 "
"<kbd>Ctrl</kbd>+<kbd>W</kbd> 快捷键 或者 左键点击图表标签页上的×按钮。"

#: ../getting_started.md:95
msgid "Elements are the shapes that you add to a diagram, and together with Relations, allow you to build up a model."
msgstr "元素是指添加到图表中的各种图形，它们与关系共同构成完整的模型。"

#: ../getting_started.md:98
msgid "To resize an element on the diagram, left-click on the element to select it and then drag the resize handles that appear at each corner."
msgstr "调整图表中元素大小的操作步骤：首先左键点击需要调整的元素进行选中，然后拖动元"
"素四周出现的缩放控制点即可调整大小。"

#: ../getting_started.md:101
msgid "To move an element on the diagram, drag the element where you want to place it by pressing and holding the left mouse button, and moving the mouse before releasing the button."
msgstr "移动图表中元素的操作方法：将鼠标指针悬停在目标元素上，按住鼠标左键不放，拖动"
"至目标位置后释放左键。"

#: ../getting_started.md:105
msgid "Relations"
msgstr "关系"

#: ../getting_started.md:107
msgid "Relations are line-like items that form relationships between elements in the diagram. Each end of a relation is in one of two states:"
msgstr "关系是图表中连接元素的线状组件，用于建立元素间的关联。每条关系的两端可处于以"
"下两种状态之一："

#: ../getting_started.md:110
msgid "Connected to an element and the handle turns red"
msgstr "当关系线连接到元素时，其控制端点将变为红色"

#: ../getting_started.md:111
msgid "Disconnected from an element and the handle turns green"
msgstr "当关系线与元素断开连接时，其控制端点将变为绿色"

#: ../getting_started.md:113
msgid "If both ends of a relation are disconnected, the relation can be moved by left-clicking and dragging it."
msgstr "若关系的两端均未连接，可通过左键点击并拖动来移动该关系线。"

#: ../getting_started.md:116
msgid "A new segment in a relation can be added by left-clicking on the relation to select it and then by hovering your mouse over it. A green handle will appear in the middle of the line segments that exist. Drag the handle to add another segment. For example, when you first create a new relation, it will have only one segment. If you drag the segment handle, then it will now have two segments with the knee of the two segments where the handle was."
msgstr ""
"通过左键点击关系线选中它，然后将鼠标悬停在其上，现有线段中间会出现一个绿色控"
"制点，拖动该控制点可添加另一个线段。例如，初次创建新关系时，它仅有一个线段。"
"如果拖动线段控制点，就会形成两个线段，且控制点所在位置将成为这两个线段的转折"
"点。"

#: ../getting_started.md:123
msgid "Copy and Paste"
msgstr "复制粘贴"

#: ../getting_started.md:125
msgid "As stated before, Gaphor is a modeling environment. This means that every _item_ in a diagram is backed by a _model element_ found in the model browser. This means that you can show the same _model element_ in different diagrams."
msgstr ""
"如前所述，Gaphor是一个建模环境。这意味着图表中的每个_项_都由模型浏览器中的_模"
"型元素_支持。因此，同一个_模型元素_可以在不同图表中展示。"

#: ../getting_started.md:129
msgid "<kbd>Ctrl</kbd>+<kbd>v</kbd> is used to paste _only_ the presentation element."
msgstr "<kbd>Ctrl</kbd>+<kbd>V</kbd> 快捷键_仅_用于粘贴表现层元素。"

#: ../getting_started.md:130
msgid "<kbd>Ctrl</kbd>+<kbd>Shift</kbd>+<kbd>v</kbd> is used to paste a new presentation with a new model element."
msgstr "<kbd>Ctrl</kbd>+<kbd>Shift</kbd>+<kbd>V</kbd> "
"用于粘贴包含新模型元素的新表现层对象。"

#: ../getting_started.md:133
msgid "<kbd>Ctrl</kbd>+<kbd>v</kbd> does a \"shallow\" paste. <kbd>Ctrl</kbd>+<kbd>Shift</kbd>+<kbd>v</kbd> does a \"deep\" paste."
msgstr ""
"<kbd>Ctrl</kbd>+<kbd>V</kbd> 执行\"浅层粘贴"
"\"，而 <kbd>Ctrl</kbd>+<kbd>Shift</kbd>+<kbd>V</kbd> 执行\"深层粘贴\"。"

#: ../getting_started.md:136
msgid "Undo and Redo"
msgstr "撤销与重做"

#: ../getting_started.md:138
msgid "Undo a change press <kbd>Ctrl</kbd>+<kbd>z</kbd> or left-click on the back arrow at the top of the Property Editor. To re-do a change, hit <kbd>Ctrl</kbd>+<kbd>Shift</kbd>+<kbd>z</kbd> or press the forward arrow at the top of the Property Editor."
msgstr ""
"撤销（Undo）操作请按 <kbd>Ctrl</kbd>+<kbd>Z</kbd> "
"或左键点击属性编辑器顶部的后退箭头；重做（Redo）操作请按 "
"<kbd>Ctrl</kbd>+<kbd>Shift</kbd>+<kbd>Z</kbd> 或点击前进箭头。"

#: ../getting_started.md:145
msgid "The Property Editor is present on the right side of the diagrams. When no item is selected in the diagram, it shows you some tips and tricks. When an item is selected on the diagram, it contains the item details like name, attributes and stereotypes. It can be opened with <kbd>F9</kbd> and the ![Icon for showing and hiding the Property Editor.](images/sidebar-show-right-symbolic.svg) icon in the header bar."
msgstr ""
"属性编辑器位于图表右侧区域。当未选中任何元素时，该区域显示操作提示与技巧；当"
"选中图表元素时，则展示元素详细信息（包括名称、属性和构造型）。可通过以下方式"
"打开：按<kbd>F9</kbd>快捷键，或点击标题栏中的 ![属性编辑器显示/隐藏图标。]("
"images/sidebar-show-right-symbolic.svg)图标。"

#: ../getting_started.md:145
msgid "Icon for showing and hiding the Property Editor."
msgstr "属性编辑器显示/隐藏图标。"

#: ../getting_started.md:152
msgid "The properties that are shown depend on the item that is selected."
msgstr "所显示的属性内容取决于当前选中的元素类型。"

#: ../getting_started.md:154
msgid "Model Preferences"
msgstr "模型首选项"

#: ../getting_started.md:156
msgid "The Property Editor also contains model preferences: Click the ![Document with wrench icon for model specific configuration.](images/document-properties-symbolic.svg) button."
msgstr ""
"属性编辑器还包含模型首选项功能：点击![用于模型配置的文档与扳手组合图标。]("
"images/document-properties-symbolic.svg)按钮即可访问。"

#: ../getting_started.md:156
msgid "Document with wrench icon for model specific configuration."
msgstr "用于模型配置的文档与扳手组合图标。"

#: ../getting_started.md:159
msgid "Reset Tool Automatically"
msgstr "自动重置工具"

#: ../getting_started.md:161
msgid "By default, the pointer tool is selected after an element is placed from the toolbox. If this option is turned off, the same type of element will be placed by clicking in the diagram until another element is selected in the toolbox."
msgstr ""
"默认情况下，从工具箱放置元素后将自动切换回指针工具。若禁用此选项，则持续保持"
"当前元素类型——点击图表区域可重复放置同类型元素，直至在工具箱中选定其他元素类"
"型。"

#: ../getting_started.md:163
msgid "Remove Unused Elements"
msgstr "清理未使用元素"

#: ../getting_started.md:165
msgid "By default, elements that are not part of any diagram in the model will be removed. If this option is turned off, elements remain in the model and may be found in the model browser."
msgstr "默认情况下，模型中未被任何图表引用的元素将被清理。若关闭此选项，这些元素会保"
"留在模型中，仍可通过模型浏览器查看。"

#: ../getting_started.md:167
msgid "Diagram Language"
msgstr "图表语言"

#: ../getting_started.md:169
msgid "The diagram language modifier is only applicable to the loaded model and how it is shown in the diagram. The diagram language setting is saved as part of the model and defaults to English."
msgstr "图表语言设置仅对当前加载的模型有效，且仅影响其在图表中的呈现方式。该设置将作"
"为模型组成部分保存，默认语言为英语。"

#: ../getting_started.md:171
msgid "The UI language of Gaphor is controlled by the operating system."
msgstr "Gaphor 的界面语言由操作系统控制。"

#: ../getting_started.md:174
msgid "Gaphor considers the ``LANG`` environment variable on Linux, Windows and macOS."
msgstr "Gaphor 在 Linux、Windows 和 macOS 系统中均会读取 ``LANG`` 环境变量。"

#: ../getting_started.md:176
msgid "On Windows and macOS it can be set independently of the operating system's language settings to a different language."
msgstr "在 Windows 和 macOS "
"系统上，该语言设置可独立于操作系统语言，单独指定为其他语言。"

#: ../getting_started.md:178
msgid "Style Sheet"
msgstr "样式表"

#: ../getting_started.md:180
msgid "The [style sheet](style_sheets) allows to change the visual appearance of diagrams and model elements."
msgstr "[样式表](style_sheets) 可用于更改图表和模型元素的视觉呈现效果。"

#: ../index.rst:29
msgid "Getting Started"
msgstr "入门指南"

#: ../index.rst:38
msgid "Features"
msgstr "功能特性"

#: ../index.rst:49
msgid "Development"
msgstr "开发指南"

#: ../index.rst:59
msgid "Modeling languages"
msgstr "建模语言"

#: ../index.rst:69
msgid "Concepts"
msgstr "概念解析"

#: ../index.rst:79
msgid "Internals"
msgstr "内部机制"

#: ../index.rst:2
msgid "About Gaphor"
msgstr "关于Gaphor"

#: ../index.rst:6
msgid "The documentation is up to date for Gaphor |version|"
msgstr "该文档版本与 Gaphor |version| 保持同步更新"

#: ../index.rst:8
msgid "Gaphor is a UML and SysML modeling application written in Python. It is designed to be easy to use, while still being powerful. Gaphor implements a fully-compliant UML 2 data model, so it is much more than a picture drawing tool."
msgstr ""
"Gaphor 是一款基于 Python 开发的 UML 和 SysML "
"建模应用，其设计兼顾易用性与强大功能。作为完全符合 UML 2 数据规范的建模工具，"
"Gaphor 远不止于普通的绘图工具。"

#: ../index.rst:13
msgid "You can use Gaphor to quickly visualize different aspects of a system as well as create complete, highly complex models."
msgstr "您可以使用 Gaphor 快速构建系统的可视化视图，并创建完整且高度复杂的模型。"

#: ../index.rst:18
msgid "Gaphor is 100% Open source, available under a friendly `Apache 2 license <https://github.com/gaphor/gaphor/blob/main/LICENSES/Apache-2.0.txt>`_. The code and issue tracker can be found on `GitHub <https://github.com/gaphor/gaphor>`_."
msgstr ""
"Gaphor 是 100% 开源软件，采用友好的` Apache 2 许可证 <https://github.com/"
"gaphor/gaphor/blob/main/LICENSES/Apache-2.0.txt>`。_您可以在 `GitHub "
"<https://github.com/gaphor/gaphor> `上查看源代码和提交问题_。"

#: ../index.rst:21
msgid "What are you waiting for? :doc:`Let's get started <getting_started>`!"
msgstr "还在等什么？快来 :doc:`开始使用 <getting_started> 吧`！"

#: ../index.rst:23
msgid "For download instructions, and the blog, please visit the `Gaphor Website <https://gaphor.org>`_."
msgstr "请访问 `Gaphor 官网 <https://gaphor.org>`_ 获取下载指南和博客资讯。"

#: ../index.rst:26
msgid "Did you know Gaphor has excellent integration with :doc:`Sphinx <sphinx>` and :doc:`Jupyter notebooks <scripting>`?"
msgstr ""
"您知道吗Gaphor 与 :doc:`Sphinx <sphinx>` 和 :doc:`Jupyter notebooks "
"<scripting>` 拥有卓越的集成能力吗？"

#: ../linux.md:1
msgid "Gaphor on Linux"
msgstr "Linux 版 Gaphor"

#: ../linux.md:3
msgid "Gaphor can be installed as Flatpak on Linux, some distributions provide packages. Check out the [Gaphor download page](https://gaphor.org/download/#linux) for details."
msgstr ""
"Gaphor可在Linux系统中以Flatpak形式安装，部分发行版还提供了软件包。详情请查看"
"[Gaphor下载页面](https://gaphor.org/download/#linux) 。"

#: ../linux.md:7
#: ../macos.md:5
#: ../windows.md:7
msgid "Older releases are available from [GitHub](https://github.com/gaphor/gaphor/releases)."
msgstr "旧版发布文件可从[GitHub](https://github.com/gaphor/gaphor/releases)获取。"

#: ../linux.md:9
#: ../macos.md:7
#: ../windows.md:9
msgid "[CI builds](https://github.com/gaphor/gaphor/actions/workflows/full-build.yml) are also available."
msgstr ""
"[CI构建](https://github.com/gaphor/gaphor/actions/workflows/full-build.yml) "
"也可供使用。"

#: ../linux.md:11
#: ../macos.md:10
#: ../windows.md:11
msgid "Development Environment"
msgstr "开发环境"

#: ../linux.md:13
msgid "There are two ways to set up a development environment:"
msgstr "开发环境可通过以下两种方式配置："

#: ../linux.md:15
msgid "[GNOME Builder](#gnome-builder), ideal for “drive by” contributions."
msgstr "[GNOME Builder](#gnome-builder) —— 特别适合\"即兴贡献\"的开发环境。"

#: ../linux.md:16
msgid "[A local environment](#a-local-environment)."
msgstr "[本地开发环境](#a-local-environment)."

#: ../linux.md:18
msgid "GNOME Builder"
msgstr "GNOME Builder（GNOME 集成开发环境）"

#: ../linux.md:20
msgid "Open [GNOME Builder](https://flathub.org/apps/details/org.gnome.Builder) 43 or newer, [clone the repository](https://help.github.com/en/github/creating-cloning-and-archiving-repositories/cloning-a-repository). Check if the _Build Profile_ is set to `org.gaphor.Gaphor.json`. If so, hit the _Run_ button to start the application."
msgstr ""
"请打开 [GNOME Builder](https://flathub.org/apps/details/org.gnome.Builder) "
"43 或更高版本，并[克隆代码仓库](https://help.github.com/en/github/"
"creating-cloning-and-archiving-repositories/cloning-a-repository)。检查 "
"_Build Profile_ 是否设置为 `org.gaphor.Gaphor.json`。如果是，点击 "
"_Run_按钮即可启动应用程序。"

#: ../linux.md:25
msgid "A Local Environment"
msgstr "本地环境"

#: ../linux.md:27
msgid "To set up a development environment with Linux, you first need a fairly new Linux distribution version. For example, the latest Ubuntu LTS or newer, Arch, Debian Testing, SUSE Tumbleweed, or similar. Gaphor depends on newer versions of GTK, and we don't test for backwards compatibility. You will also need the latest stable version of Python. In order to get the latest stable version without interfering with your system-wide Python version, we recommend that you install [pyenv](https://github.com/pyenv/pyenv)."
msgstr ""
"要在 Linux 上搭建开发环境，首先需要一个较新的 Linux 发行版版本。例如最新的 "
"Ubuntu LTS 或更新版本、Arch、Debian Testing、SUSE Tumbleweed 或类似发行版。"
"Gaphor 依赖于较新版本的 GTK，且我们不保证向后兼容性。"
"您还需要安装最新稳定版的 Python。为了避免影响系统自带的 Python 版本，"
"我们建议您使用 [pyenv](https://github.com/pyenv/pyenv)来安装最新稳定版本。"

#: ../linux.md:35
msgid "Install the pyenv [prerequisites](https://github.com/pyenv/pyenv/wiki/Common-build-problems) first, and then install pyenv:"
msgstr ""
"请先安装 [pyenv](https://github.com/pyenv/pyenv/wiki/Common-build-problems) "
"的必备组件，然后再安装 pyenv："

#: ../linux.md:42
msgid "Make sure you follow the instruction at the end of the installation script to install the commands in your shell's rc file. Next install the latest version of Python by executing:"
msgstr "请确保按照安装脚本末尾的说明，将相关命令添加至您Shell终端的 rc 配置文件中。"
"接着执行以下命令安装最新版 Python："

#: ../linux.md:50
msgid "Where 3.x.x is replaced by the latest stable version of Python (pyenv should let you tab-complete available versions)."
msgstr "其中 3.x.x 应替换为 Python 的最新稳定版本（pyenv 支持通过 Tab "
"键自动补全可用的版本号）。"

#: ../linux.md:52
msgid "Next install the Gaphor prerequisites by installing the gobject introspection and cairo build dependencies, for example, in Ubuntu execute:"
msgstr "接下来通过安装GObject "
"Introspection和Cairo的构建依赖项来安装Gaphor的先决条件，例如，在Ubuntu系统中"
"执行："

#: ../linux.md:61
msgid "For Redhat/RPM/Fedora based systems:"
msgstr "对于基于 Redhat/RPM/Fedora 的系统："

#: ../linux.md:67
#: ../macos.md:18
msgid "Install [Poetry](https://python-poetry.org) using [pipx](https://pypa.github.io/pipx/):"
msgstr ""
"使用[pipx](https://pypa.github.io/pipx/)安装[Poetry](https://python-"
"poetry.org) :"

#: ../linux.md:72
msgid "Next, [clone the repository](https://help.github.com/en/github/creating-cloning-and-archiving-repositories/cloning-a-repository), after which you need to execute the following consecutive commands:"
msgstr ""
"接下来，[克隆代码仓库](https://help.github.com/en/github/"
"creating-cloning-and-archiving-repositories/"
"cloning-a-repository)，然后依次执行以下命令："

#: ../linux.md:83
#: ../macos.md:30
msgid "Now, you can run gaphor as"
msgstr "现在，您可以运行 Gaphor，方法是："

#: ../linux.md:88
msgid "NOTE: Gaphor requires GTK 4. It works best with GTK >=4.8 and libadwaita >=1.2."
msgstr "注意：Gaphor 需要 GTK 4 环境，推荐使用 GTK ≥4.8 及 libadwaita ≥1.2 "
"版本以获得最佳运行效果。"

#: ../linux.md:90
#: ../macos.md:44
#: ../windows.md:169
msgid "Debugging using Visual Studio Code"
msgstr "使用 Visual Studio Code 进行调试"

#: ../linux.md:92
msgid "Before you start debugging you'll need to open Gaphor in vscode (the folder containing `pyproject.toml`). You'll need to have the Python extension installed."
msgstr ""
"开始调试前，需在 VS Code 中打开 Gaphor 项目目录（包含 `pyproject.toml` "
"文件的文件夹），并确保已安装 Python 扩展插件。"

#: ../linux.md:95
#: ../macos.md:49
msgid "Create a file `.vscode/launch.json` with the following content:"
msgstr "创建` .vscode/launch.json` 文件，内容如下："

#: ../linux.md:115
msgid "`GDK_BACKEND` is added since VSCode by default uses XWayland (the X11 emulator)."
msgstr "添加 ·GDK_BACKEND· 是因为 VS Code 默认使用 XWayland（X11 模拟器）。"

#: ../linux.md:117
msgid "Create a Flatpak Package"
msgstr "创建 Flatpak 软件包"

#: ../linux.md:119
msgid "The main method that Gaphor is packaged for Linux is with a Flatpak package. [Flatpak](https://flatpak.org) is a software utility for software deployment and package management for Linux. It offers a sandbox environment in which users can run application software in isolation from the rest of the system."
msgstr ""
"Gaphor 在 Linux 系统上的主要打包方式是 Flatpak 软件包。 [Flatpak]"
"(https://flatpak.org) 是一款面向 Linux "
"的软件部署与包管理工具，它能提供沙箱运行环境，使应用程序与系统其他部分隔离运"
"行。"

#: ../linux.md:124
msgid "We distribute the official Flatpak using [Flathub](https://flathub.org), and building of the image is done at the [Gaphor Flathub repository](https://github.com/flathub/org.gaphor.Gaphor)."
msgstr ""
"我们通过 [Flathub](https://flathub.org)分发官方 Flatpak "
"软件包，镜像构建工作则在[Gaphor Flathub 仓库](https://github.com/flathub/"
"org.gaphor.Gaphor) 完成。"

#: ../linux.md:128
msgid "[Install Flatpak](https://flatpak.org/setup)"
msgstr "[安装 Flatpak](https://flatpak.org/setup)"

#: ../linux.md:130
msgid "Install flatpak-builder"
msgstr "安装flatpak-builder"

#: ../linux.md:134
msgid "Install the GNOME SDK"
msgstr "安装GNOME SDK"

#: ../linux.md:138
msgid "Clone the Flathub repository and install the necessary SDK:"
msgstr "克隆 Flathub 仓库并安装必要的 SDK："

#: ../linux.md:144
msgid "Build Gaphor Flatpak"
msgstr "构建Gaphor Flatpak"

#: ../linux.md:148
msgid "Install the Flatpak"
msgstr "安装Flatpak"

#: ../linux.md:152
msgid "Linux Distribution Packages"
msgstr "Linux 发行版软件包"

#: ../linux.md:154
msgid "Examples of Gaphor and Gaphas RPM spec files can be found in [PLD Linux](https://www.pld-linux.org/) [repository](https://github.com/pld-linux/):"
msgstr ""
"您可以在 [PLD Linux](https://www.pld-linux.org/)的[仓库](https://github.com/"
"pld-linux/)中找到 Gaphor 和 Gaphas 的 RPM spec 文件示例。"

#: ../linux.md:158
msgid "https://github.com/pld-linux/python-gaphas"
msgstr "https://github.com/pld-linux/python-gaphas"

#: ../linux.md:159
msgid "https://github.com/pld-linux/gaphor"
msgstr "https://github.com/pld-linux/gaphor"

#: ../linux.md:161
msgid "There is also an [Arch User Repository (AUR) for Gaphor](https://aur.archlinux.org/packages/python-gaphor) available for Arch users."
msgstr ""
"Arch Linux 用户还可通过[Arch User Repository (AUR) for Gaphor](https://"
"aur.archlinux.org/packages/python-gaphor)获取 Gaphor。"

#: ../linux.md:165
msgid "Please, do not hesitate to contact us if you need help to create a Linux package for Gaphor or Gaphas."
msgstr "如您需要为 Gaphor 或 Gaphas 创建 Linux 软件包，请随时联系我们。"

#: ../macos.md:1
msgid "Gaphor on macOS"
msgstr "macOS 版 Gaphor"

#: ../macos.md:3
msgid "The latest release of Gaphor can be downloaded from the [Gaphor download page](https://gaphor.org/download#macos). Gaphor can also be installed as a [Homebrew cask](https://formulae.brew.sh/cask/gaphor)."
msgstr ""
"最新版本的Gaphor可从[Gaphor下载页面](https://gaphor.org/download#macos)下载。"
"Gaphor也可作为 [Homebrew cask](https://formulae.brew.sh/cask/gaphor)安装。"

#: ../macos.md:12
msgid "To set up a development environment with macOS:"
msgstr "要在 macOS 上搭建开发环境："

#: ../macos.md:13
msgid "Install [Homebrew](https://brew.sh)"
msgstr "安装 [Homebrew](https://brew.sh)"

#: ../macos.md:14
msgid "Open a terminal and execute:"
msgstr "打开终端并执行："

#: ../macos.md:23
msgid "Next, [clone the repository](https://help.github.com/en/github/creating-cloning-and-archiving-repositories/cloning-a-repository), after which you can execute the following consecutive commands to install the poetry environment:"
msgstr ""
"接下来，[克隆代码仓库](https://help.github.com/en/github/"
"creating-cloning-and-archiving-repositories/"
"cloning-a-repository)，之后可依次执行以下命令来安装Poetry环境："

#: ../macos.md:35
msgid "If PyGObject does not compile and complains about a missing `ffi.h` file, you may want to install libffi from Homebrew, and set the following environment variable and run `poetry install` again:"
msgstr ""
"如果 PyGObject 编译失败并提示缺少`ffi.h` 文件，您可能需要通过 Homebrew 安装 "
"libffi，然后设置以下环境变量并重新运行 `poetry install` 命令："

#: ../macos.md:46
msgid "Before you start debugging you'll need to open Gaphor in VSCode (the folder containing `pyproject.toml`). You'll need to have the Python extension installed."
msgstr "在开始调试之前，你需要在VSCode中打开Gaphor（包含`pyproject.toml`的文件夹）。"
"你需要安装Python扩展。"

#: ../macos.md:66
msgid "Packaging for macOS"
msgstr "macOS 平台打包指南"

#: ../macos.md:68
msgid "In order to create an exe installation package for macOS, we utilize [PyInstaller](https://pyinstaller.org) which analyzes Gaphor to find all the dependencies and bundle them in to a single folder."
msgstr ""
"为创建适用于 macOS 的 exe 安装包，我们采用 [PyInstaller]"
"(https://pyinstaller.org) 工具。该工具会分析 Gaphor "
"的所有依赖项，并将其打包至单个文件夹中。"

#: ../macos.md:72
msgid "Follow the instructions for settings up a development environment above"
msgstr "请按照上述开发环境配置说明进行操作"

#: ../macos.md:73
msgid "Open a terminal and execute the following from the repository directory:"
msgstr "打开终端，并在代码仓库目录中执行以下命令："

#: ../merge_conflicts.md:1
msgid "Resolve Merge Conflicts"
msgstr "解决合并冲突"

#: ../merge_conflicts.md:3
msgid "Suppose you’re working on a model. If you create a change, while someone else has also made changes, there’s a fair chance you'll end up with a merge conflict."
msgstr "假设您正在处理某个模型。如果您修改了模型内容，而其他协作者也做了改动，就很可"
"能遇到合并冲突。"

#: ../merge_conflicts.md:6
msgid "Gaphor tries to make the changes to a model as small as possible: all elements are stored in the same order. However, since a Gaphor model is a persisted graph of objects, merging changes is not as simple as opening a text editor."
msgstr ""
"Gaphor 会尽可能精简模型变更：所有元素均按相同顺序存储。但由于 Gaphor "
"模型本质上是持久化的对象图（Graph of "
"objects），其合并操作远比文本编辑器复杂。"

#: ../merge_conflicts.md:10
msgid "From Gaphor 2.18 onwards Gaphor is also capable of merging models. Once a merge conflict has been detected (i.e., when the model file contains git conflict-resolution markers `<<<<<<<`, `=======`, and `>>>>>>>`), Gaphor will offer the option to open the current model, the incoming model or merge changes manually via the Merge Editor."
msgstr ""
"自 Gaphor 2.18 版本起，该软件已支持模型合并功能。当检测到合并冲突时（"
"即模型文件中出现 Git 冲突标记 `<<<<<<<`、`=======` 和 `>>>>>>>`），Gaphor "
"将提供以下处理选项：通过合并编辑器打开当前模型、接收的模型或手动合并变更。"

#: ../merge_conflicts.md:15
msgid "![A dialog showing options on how to deal with a merge conflict.](images/merge-dialog.png)"
msgstr "![显示合并冲突处理选项的对话框。](images/merge-dialog.png)"

#: ../merge_conflicts.md:15
msgid "A dialog showing options on how to deal with a merge conflict."
msgstr "显示合并冲突处理选项的对话框。"

#: ../merge_conflicts.md:17
msgid "If you choose *Open Merge Editor*, both models will be loaded. The current model remains as is. In addition, the changes made to the incoming model are calculated. Those changes are stored as _pending change_ objects in the model."
msgstr ""
"若选择*打开合并编辑器*，系统将同时加载两个模型：当前模型保持原状，同时会计算"
"接收模型的变更内容。这些变更将以_待定变更（Pending "
"change）_对象的形式存储在模型中。"

#: ../merge_conflicts.md:21
msgid "Pending changes are part of the model, you can save the model with changes and resolve those at a later point."
msgstr "待定变更将作为模型组成部分保存，您可先保存含变更的模型，后续再行解决冲突。"

#: ../merge_conflicts.md:24
msgid "The Merge Editor is shown on the right side, replacing the (normal) Property Editor."
msgstr "**合并编辑器**将显示在界面右侧，并取代（常规的）**属性编辑器**。"

#: ../merge_conflicts.md:26
msgid "![The Gaphor main window, showing the merge editor on the right.](images/merge-conflict-window.png)"
msgstr "![Gaphor 主窗口界面，右侧显示合并编辑器。](images/merge-conflict-window.png)"

#: ../merge_conflicts.md:26
msgid "The Gaphor main window, showing the merge editor on the right."
msgstr "Gaphor 主窗口界面，右侧显示合并编辑器。"

#: ../merge_conflicts.md:28
msgid "Merge actions are grouped by diagram, where possible. When you apply a change, all changes listed as children are also applied. Once changes are applied, they can only be reverted by undoing the change (hit _Undo_)."
msgstr ""
"合并操作将按图示分组处理（在可行情况下）。当应用某个变更时，其下属所有子变更"
"将同步生效。已应用的变更仅能通过 _撤销_ 操作回退（点击 _撤销_ 按钮）。"

#: ../merge_conflicts.md:33
msgid "The Merge Editor replaces the Property Editor, as long as there are pending changes in the model."
msgstr "只要模型中存在待定变更，合并编辑器就会取代属性编辑器。"

#: ../merge_conflicts.md:35
msgid "It is concidered good practice to resolve the merge conflict before you continue modeling."
msgstr "建议最佳实践是在继续建模前先解决合并冲突。"

#: ../merge_conflicts.md:38
msgid "When all conflicts have been resolved, press *Resolve* to finish merge conflict resolution."
msgstr "当所有冲突解决完毕后，点击*解决*按钮完成合并冲突处理。"

#: ../modeling_language.md:1
msgid "Modeling Languages"
msgstr "建模语言"

#: ../modeling_language.md:3
msgid "Since version 2.0, Gaphor supports the concept of Modeling languages. This allows for development of separate modeling languages separate from the Gaphor core application."
msgstr "自2.0版本起，Gaphor开始支持建模语言概念。这一特性使得建模语言的开发能够独立于"
"Gaphor核心应用程序进行。"

#: ../modeling_language.md:7
msgid "The main language was, and will be UML. Gaphor now also supports a subset of SysML, RAAML and the C4 model."
msgstr "UML始终是Gaphor的核心建模语言。当前版本还新增支持SysML子集、RAAML及C4模型。"

#: ../modeling_language.md:10
msgid "A modeling language in Gaphor is defined by a class implementing the `gaphor.abc.ModelingLanguage` abstract base class. The modeling language should be registered as a `gaphor.modelinglanguages` entry point."
msgstr ""
"在Gaphor中，建模语言通过实现`gaphor.abc.ModelingLanguage`抽象基类的类来定义。"
"该建模语言需注册为`gaphor.modelinglanguages`入口点。"

#: ../modeling_language.md:14
msgid "The `ModelingLanguage` interface is fairly minimal. It allows other services to look up elements and diagram items, as well as a toolbox, and diagram types. However, the responsibilities of a modeling language do not stop there. Parts of functionality will be implemented by registering handlers to a set of generic functions."
msgstr ""
"`ModelingLanguage`接口设计极为精简，主要提供元素、工具箱及图表类型的查询功能"
"。但建模语言的职责远不止于此，部分功能需通过向通用函数注册处理器来实现。"

#: ../modeling_language.md:20
msgid "But let's not get ahead of ourselves. What is the functionality a modeling language implementation can offer?"
msgstr "但让我们循序渐进地探讨：建模语言的实现具体能提供哪些功能？"

#: ../modeling_language.md:23
msgid "Three functionalities are exposed by a [`ModelingLanguage` instance](#modeling-language):"
msgstr "[`ModelingLanguage`实例](#modeling-language)主要提供三大功能："

#: ../modeling_language.md:25
msgid "A data model (elements) and diagram items"
msgstr "数据模型（元素）与图表项"

#: ../modeling_language.md:26
msgid "Diagram types"
msgstr ""

#: ../modeling_language.md:27
msgid "A toolbox definition"
msgstr ""

#: ../modeling_language.md:29
msgid "Other functionalities can be extended by adding handlers to the respective generic functions:"
msgstr ""

#: ../modeling_language.md:32
msgid "[Connectors](#connectors), allow diagram items to connect"
msgstr ""

#: ../modeling_language.md:33
msgid "[Format/parse](#format-and-parse) model elements to and from a textual representation"
msgstr ""

#: ../modeling_language.md:34
msgid "[Copy/paste](#copy-and-paste) behavior when element copying is not trivial, for example with more than one element is involved"
msgstr ""

#: ../modeling_language.md:36
msgid "[Grouping](#grouping), allow elements to be nested in one another"
msgstr ""

#: ../modeling_language.md:37
msgid "[Dropping](#dropping), allow elements to be dragged from the tree view onto a diagram"
msgstr ""

#: ../modeling_language.md:38
msgid "[Automatic cleanup rules](#automated-model-cleanup) to keep the model consistent"
msgstr ""

#: ../modeling_language.md:41
msgid "Modeling languages can also provide new UI components. Those components are not loaded directly when you import a modeling language package. Instead, they should be imported via the `gaphor.modules` entrypoint."
msgstr ""

#: ../modeling_language.md:45
msgid "[Editor pages](#property-editor-pages), shown in the collapsible pane on the right side"
msgstr ""

#: ../modeling_language.md:46
msgid "[Instant (diagram) editor popups](#instant-diagram-editor-popups)"
msgstr ""

#: ../modeling_language.md:47
msgid "Special diagram interactions"
msgstr ""

#: ../modeling_language.md:50
msgid "Modeling language"
msgstr ""

#: ../../gaphor/abc.py:docstring of gaphor.abc.ModelingLanguage:1
msgid "A model provider is a special service that provides an entrypoint to a model implementation, such as UML, SysML, RAAML."
msgstr "模型提供者（Model "
"Provider）是一种特殊服务，它为UML、SysML、RAAML等模型实现提供入口点。"

#: ../../gaphor/abc.py:docstring of gaphor.abc.ModelingLanguage.diagram_types:1
msgid "Iterate diagram types."
msgstr "迭代图表类型。"

#: ../../gaphor/abc.py:docstring of gaphor.abc.ModelingLanguage.element_types:1
msgid "Iterate element types."
msgstr "迭代元素类型。"

#: ../../gaphor/abc.py:docstring of gaphor.abc.ModelingLanguage.lookup_element:1
msgid "Look up a model element type by (class) name."
msgstr "通过（类）名称查询模型元素类型。"

#: ../../gaphor/abc.py:docstring of gaphor.abc.ModelingLanguage.lookup_element:3
msgid "A namespace may be provided. This will allow the model to be loaded from that specific modeling language only."
msgstr "可提供命名空间，该设置将限定模型仅能从特定建模语言加载。"

#: ../../gaphor/abc.py:docstring of gaphor.abc.ModelingLanguage.model_browser_model:1
msgid "A model for use in the Model Browser."
msgstr "用于模型浏览器的模型。"

#: ../../gaphor/abc.py:docstring of gaphor.abc.ModelingLanguage.name:1
msgid "Human-readable name of the modeling language."
msgstr "该建模语言的人类可读名称。"

#: ../../gaphor/abc.py:docstring of gaphor.abc.ModelingLanguage.toolbox_definition:1
msgid "Get structure for the toolbox."
msgstr "获取工具箱结构。"

#: ../modeling_language.md:57
msgid "As a convention, the package containing the modeling language should have an attribute `__modeling_language__` that has the same value as the modeling language name in the entry point."
msgstr "根据约定，包含建模语言的包应设置`__modeling_language__`属性，其属性值需与入口"
"点中的建模语言名称保持一致。"

#: ../modeling_language.md:60
msgid "To illustrate:"
msgstr "示例说明："

#: ../modeling_language.md:62
msgid "The file `mytool/mylang/__init__.py` contains an entry:"
msgstr "文件`mytool/mylang/__init__.py`中包含以下条目："

#: ../modeling_language.md:68
msgid "`pyproject.toml` contains an entry point:"
msgstr "`pyproject.toml` 文件中包含以下入口点配置："

#: ../modeling_language.md:75
msgid "Connectors"
msgstr "连接器"

#: ../modeling_language.md:77
msgid "Connectors are used to connect one element to another."
msgstr "连接器用于实现元素间的相互连接。"

#: ../modeling_language.md:79
msgid "Connectors should adhere to the `ConnectorProtocol`. Normally you would inherit from `BaseConnector`."
msgstr "连接器应遵循`ConnectorProtocol`协议规范。通常建议继承`BaseConnector`基类实现"
"。"

#: ../../gaphor/diagram/connectors.py:docstring of gaphor.diagram.connectors.BaseConnector:1
msgid "Connection adapter for Gaphor diagram items."
msgstr "Gaphor 图表项连接适配器。"

#: ../../gaphor/diagram/connectors.py:docstring of gaphor.diagram.connectors.BaseConnector:3
msgid "Line item ``line`` connects with a handle to a connectable item ``element``."
msgstr "线段项 ``line`` 通过连接柄与可连接项 ``element`` 建立关联。"

#: ../modeling_language.md:0
msgid "Parameters"
msgstr "参数"

#: ../../gaphor/diagram/connectors.py:docstring of gaphor.diagram.connectors.BaseConnector:5
msgid "connecting item"
msgstr "连接项"

#: ../../gaphor/diagram/connectors.py:docstring of gaphor.diagram.connectors.BaseConnector:6
msgid "connectable item"
msgstr "可连接项"

#: ../../gaphor/diagram/connectors.py:docstring of gaphor.diagram.connectors.BaseConnector:8
msgid "By convention the adapters are registered by (element, line) -- in that order."
msgstr "根据规范，适配器需按（元素，线段）的顺序进行注册。"

#: ../../gaphor/diagram/connectors.py:docstring of gaphor.diagram.connectors.BaseConnector.allow:1
msgid "Determine if items can be connected."
msgstr "判断项目是否可建立连接。"

#: ../../gaphor/diagram/connectors.py:docstring of gaphor.diagram.connectors.BaseConnector.allow:3
msgid "Is the connection allowed at all (during mouse movement for example)?"
msgstr "（例如在鼠标移动过程中）该连接操作是否被允许？"

#: ../../gaphor/diagram/connectors.py:docstring of gaphor.diagram.connectors.BaseConnector.allow:5
msgid "Returns `True` if connection is allowed."
msgstr "若允许连接，则返回`True`。"

#: ../../gaphor/diagram/connectors.py:docstring of gaphor.diagram.connectors.BaseConnector.connect:1
msgid "Connect to an element."
msgstr "连接至元素。"

#: ../../gaphor/diagram/connectors.py:docstring of gaphor.diagram.connectors.BaseConnector.connect:3
msgid "Establish a connection between element and line. Also takes care of disconnects, if required (e.g. 1:1 relationships)."
msgstr "建立元素与线段之间的连接关系。该操作还会根据需求（如1:1关系）处理断开连接的情"
"况。"

#: ../../gaphor/diagram/connectors.py:docstring of gaphor.diagram.connectors.BaseConnector.connect:6
msgid "Note that at this point the line may be connected to some other, or the same element. The connection at model level also still exists."
msgstr "请注意：此时线段可能已连接至其他元素或同一元素，且模型层级的连接关系仍然存在"
"。"

#: ../../gaphor/diagram/connectors.py:docstring of gaphor.diagram.connectors.BaseConnector.connect:10
msgid "Returns `True` if a connection is established."
msgstr "若成功建立连接，则返回 `True`。"

#: ../../gaphor/diagram/connectors.py:docstring of gaphor.diagram.connectors.BaseConnector.disconnect:1
msgid "Disconnect model level connections."
msgstr "断开模型层级的连接关系。"

#: ../../gaphor/diagram/connectors.py:docstring of gaphor.diagram.connectors.BaseConnector.disconnect:3
msgid "Break connection, called when dropping a handle on a point where it can not connect."
msgstr "断开连接（当连接柄被放置于不可连接位置时触发此操作）。"

#: ../../gaphor/diagram/connectors.py:docstring of gaphor.diagram.connectors.BaseConnector.get_connected:1
msgid "Get item connected to a handle."
msgstr "获取与连接柄关联的项。"

#: ../modeling_language.md:87
msgid "Format and parse"
msgstr "格式化与解析"

#: ../modeling_language.md:89
msgid "Model elements can be formatted to a simple text representation. For example, This is used in the Model Browser. It isn't a full serialization of the model element."
msgstr "模型元素可格式化为简单文本表示形式（例如在模型浏览器中使用）。请注意，此非模"
"型元素的完整序列化。"

#: ../modeling_language.md:92
msgid "In some cases it's useful to parse a text back into an object. This is done when you edit attributes and operations on a class."
msgstr "某些情况下，将文本解析回对象十分实用。该功能常用于编辑类的属性和操作时。"

#: ../modeling_language.md:95
msgid "Not every ``format()`` needs to have an equivalent ``parse()`` function."
msgstr "并非所有``format()``方法都需要对应的``parse()``函数。"

#: ../modeling_language.md:100
msgid "Returns a human readable representation of the model element. In most cases this is just the name, however, properties (attributes) and operations are formatted more extensively:"
msgstr "返回模型元素的人类可读表示形式。多数情况下仅显示名称，但属性(attribute)和操作"
"(operation)会以更详细的格式呈现："

#: ../modeling_language.md:110
msgid "Parse ``text`` and populate ``element``. The element is populated with elements from the text. This may mean that new model elements are created as part of the parse process."
msgstr "解析 ``text`` 并填充 "
"``element``。该元素将被文本中的内容填充，这可能意味着在解析过程中会创建新的模"
"型元素。"

#: ../modeling_language.md:114
msgid "Copy and paste"
msgstr "复制和粘贴"

#: ../modeling_language.md:116
msgid "Copy and paste works out of the box for simple items: one diagram item with one model element (the `subject`). It leverages the `load()` and `save()` methods of the elements to ensure all relevant data is copied."
msgstr ""
"对于简单项（即单个图表项对应单个模型元素的情况），复制粘贴功能可开箱即用。该"
"功能通过调用元素的`load()`和`save()`方法，确保复制所有相关数据。"

#: ../modeling_language.md:119
msgid "Sometimes items need more than one model element to work. For example an Association: it has two association ends."
msgstr ""
"某些情况下，图表项需要多个模型元素协同工作。例如关联(Association)元素就需要两"
"个关联端(association ends)才能正常运作。"

#: ../modeling_language.md:121
msgid "In those specific cases you need to implement your own copy and paste functions. To create such a thing you'll need to create two functions: one for copying and one for pasting."
msgstr "针对这些特定情况，您需要自行实现复制粘贴功能。具体需要创建两个函数：一个处理"
"复制操作，另一个处理粘贴操作。"

#: ../modeling_language.md:126
msgid "Create a copy of an element (or list of elements). The returned type should be distinct, so the `paste()` function can properly dispatch. A copy function normally copies only the element and mandatory related elements. E.g. an Association needs two association ends."
msgstr ""
"创建元素（或元素列表）的副本。返回类型应具有独特性，以便`paste()`函数能正确分"
"发。复制函数通常仅复制元素及其必需关联元素，例如关联(Association)必须包含两个"
"关联端。"

#: ../modeling_language.md:134
msgid "Paste previously copied data. Based on the data type created in the ``copy()`` function, try to duplicate the copied elements. Returns the newly created item or element."
msgstr "粘贴先前复制的数据。根据``copy()``函数中创建的数据类型，尝试复制被拷贝的元素"
"。返回新创建的项或元素。"

#: ../modeling_language.md:139
msgid "Gaphor provides some convenience functions:"
msgstr "Gaphor 提供以下便捷功能："

#: ../modeling_language.md:143
msgid "Copy ``items``. The ``lookup`` function is used to look up owned elements (shown as child nodes in the Model Browser)."
msgstr "复制 ``items``。该操作使用 ``lookup`` "
"函数查询所属元素（这些元素在模型浏览器中显示为子节点）。"

#: ../modeling_language.md:148
msgid "Paste a copy of the Presentation element to the diagram, but try to link the underlying model element. A shallow copy."
msgstr "将呈现元素(Presentation "
"element)的副本粘贴到图表中，同时尝试关联底层模型元素。（该操作为浅拷贝）。"

#: ../modeling_language.md:154
msgid "Paste a copy of both Presentation and model element. A deep copy."
msgstr "粘贴呈现元素(Presentation element)及模型元素(model "
"element)的副本。（该操作为深拷贝）。"

#: ../modeling_language.md:157
msgid "Grouping"
msgstr ""

#: ../modeling_language.md:159
msgid "Grouping is done by dragging one item on top of another, in a diagram or in the tree view."
msgstr ""

#: ../modeling_language.md:163
msgid "Return the owner for `element`. The owner may be `Root`, denoting the element should be placed in the root of the ownership hierarchy. If `None` is returned, there is no owner."
msgstr ""

#: ../modeling_language.md:169
msgid "Returns all elements owned by `element"
msgstr ""

#: ../modeling_language.md:174
msgid "Group an element in a parent element. The grouping can be based on ownership, but other types of grouping are also possible."
msgstr ""

#: ../modeling_language.md:180
msgid "Remove the grouping from an element. The function needs to check if the provided `parent` node is the right one."
msgstr ""

#: ../modeling_language.md:186
msgid "This function tries to determine if grouping is possible, without actually performing a group operation. This is not 100% accurate."
msgstr ""

#: ../modeling_language.md:191
msgid "Dropping"
msgstr ""

#: ../modeling_language.md:193
msgid "Dropping is performed by dragging an element from the tree view and drop it on a diagram. This is an easy way to extend a diagram with already existing model elements."
msgstr ""

#: ../modeling_language.md:196
msgid "Alternatively, a presentation item can be dropped on top of another element."
msgstr ""

#: ../modeling_language.md:200
msgid "The drop function creates a new presentation for an element on the diagram, if the element is not a presentation yet. For relationships, a drop only works if both connected elements are present in the same diagram."
msgstr ""

#: ../modeling_language.md:205
msgid "While grouping deals with connecting model elements, dropping deals with creating and placing presentation elements on the right item in a diagram."
msgstr ""

#: ../modeling_language.md:209
msgid "Automated model cleanup"
msgstr ""

#: ../modeling_language.md:211
msgid "Gaphor wants to keep the model in sync with the diagrams."
msgstr ""

#: ../modeling_language.md:213
msgid "A little dispatch function is used to determine if a model element can be removed."
msgstr ""

#: ../modeling_language.md:217
msgid "Determine if a model element can safely be removed."
msgstr ""

#: ../modeling_language.md:220
msgid "Property Editor pages"
msgstr ""

#: ../modeling_language.md:222
msgid "The editor page is constructed from snippets. For example: almost each element has a name, so there is a UI snippet that allows you to edit a name."
msgstr ""

#: ../modeling_language.md:225
msgid "Each property page (snippet) should inherit from `PropertyPageBase`."
msgstr ""

#: ../../gaphor/diagram/propertypages.py:docstring of gaphor.diagram.propertypages.PropertyPageBase:1
msgid "A property page which can display itself in a notebook."
msgstr ""

#: ../../gaphor/diagram/propertypages.py:docstring of gaphor.diagram.propertypages.PropertyPageBase.construct:1
msgid "Create the page (Gtk.Widget) that belongs to the Property page."
msgstr ""

#: ../../gaphor/diagram/propertypages.py:docstring of gaphor.diagram.propertypages.PropertyPageBase.construct:3
msgid "Returns the page's toplevel widget (Gtk.Widget)."
msgstr ""

#: ../modeling_language.md:232
msgid "Instant (diagram) editor popups"
msgstr ""

#: ../modeling_language.md:234
msgid "When you double-click on an item in a diagram, a popup can show up, so you can easily change the name."
msgstr ""

#: ../modeling_language.md:236
msgid "By default, this works for any named element. You can register your own inline editor function if you need to."
msgstr ""

#: ../modeling_language.md:240
msgid "Show a small editor popup in the diagram. Makes for easy editing without resorting to the Element editor."
msgstr ""

#: ../modeling_language.md:243
msgid "In case of a mouse press event, the mouse position (relative to the element) are also provided."
msgstr ""

#: ../models/c4model.md:1
msgid "The C4 Model"
msgstr ""

#: ../models/c4model.md:3
msgid "The [C4 model](https://c4model.com/) is a simple visual language to describe the static structure of a software system."
msgstr ""

#: ../models/c4model.md:5
msgid "It’s based on the [UML](uml.md) language."
msgstr ""

#: ../models/core.rst:2
msgid "Modeling Language Core"
msgstr ""

#: ../models/core.rst:4
msgid "The Core modeling language is the the basis for any other language."
msgstr ""

#: ../models/core.rst:6
msgid "The :obj:`~gaphor.core.modeling.Base` class acts as the root for all gaphor domain classes. :obj:`~gaphor.core.modeling.Diagram` and :obj:`~gaphor.core.modeling.Presentation` form the basis for everything you see in a diagram."
msgstr ""

#: ../models/core.rst:10
msgid "All data models in Gaphor are generated from actual Gaphor model files. This allows us to provide you nice diagrams of Gaphor’s internal model."
msgstr ""

#: ../models/core.rst:16
msgid "The core model with presentation classes"
msgstr ""

#: ../models/core.rst:19
msgid "The ``Base`` Class"
msgstr ""

#: ../models/core.rst:21
msgid "The :obj:`~gaphor.core.modeling.Base` class provides event notification and integrates with the model repository (internally known as :obj:`~gaphor.core.modeling.ElementFactory`). All classes in a model should derive from this class. If a model does not show a base class for an element, it will derive from :obj:`~gaphor.core.modeling.Base`. Bi-directional relationships are also possible, as well as derived relations."
msgstr ""

#: ../models/core.rst:28
msgid "The :obj:`~gaphor.core.modeling.base.RepositoryProtocol`, and :obj:`~gaphor.core.modeling.base.EventWatcherProtocol` protocols are important to connect the model to the repository and event handling mechanisms."
msgstr ""

#: ../models/core.rst:33
msgid "The class ``Base`` is the core of Gaphor’s data model."
msgstr ""

#: ../../gaphor/core/modeling/base.py:docstring of gaphor.core.modeling.base.Base:1
msgid "Base class for all model data classes."
msgstr ""

#: ../../gaphor/core/modeling/base.py:docstring of gaphor.core.modeling.Base.id:1
msgid "An id (read-only), unique within the model."
msgstr ""

#: ../../gaphor/core/modeling/base.py:docstring of gaphor.core.modeling.Base.model:1
msgid "The owning model, raises :class:`TypeError` when model is not set."
msgstr ""

#: ../../gaphor/core/modeling/base.py:docstring of gaphor.core.modeling.base.Base.unlink:1
msgid "Unlink the element."
msgstr ""

#: ../../gaphor/core/modeling/base.py:docstring of gaphor.core.modeling.base.Base.unlink:3
msgid "All the elements references are destroyed. For composite associations, the associated elements are also unlinked."
msgstr ""

#: ../../gaphor/core/modeling/base.py:docstring of gaphor.core.modeling.base.Base.unlink:6
msgid "The unlink lock is acquired while unlinking this element's properties to avoid recursion problems."
msgstr ""

#: ../models/core.rst:45
msgid "Event handling"
msgstr ""

#: ../../gaphor/core/modeling/base.py:docstring of gaphor.core.modeling.base.Base.handle:1
msgid "Propagate incoming events."
msgstr ""

#: ../../gaphor/core/modeling/base.py:docstring of gaphor.core.modeling.base.Base.handle:3
msgid "This only works if the element has been created by an :class:`~gaphor.core.modeling.ElementFactory`"
msgstr ""

#: ../../gaphor/core/modeling/base.py:docstring of gaphor.core.modeling.base.Base.watcher:1
msgid "Create a new watcher for this element."
msgstr ""

#: ../../gaphor/core/modeling/base.py:docstring of gaphor.core.modeling.base.Base.watcher:3
msgid "Watchers provide a convenient way to get signalled when a property relative to ``self`` has been changed."
msgstr ""

#: ../../gaphor/core/modeling/base.py:docstring of gaphor.core.modeling.base.Base.watcher:6
msgid "To use a watcher, the element should be created by a properly wired up :class:`~gaphor.core.modeling.ElementFactory``."
msgstr ""

#: ../../gaphor/core/modeling/base.py:docstring of gaphor.core.modeling.base.Base.watcher:8
msgid "This example is purely illustrative:"
msgstr ""

#: ../models/core.rst:53
msgid "Loading and saving"
msgstr ""

#: ../../gaphor/core/modeling/base.py:docstring of gaphor.core.modeling.base.Base.load:1
msgid "Loads value in name."
msgstr ""

#: ../../gaphor/core/modeling/base.py:docstring of gaphor.core.modeling.base.Base.load:3
msgid "Make sure that after all elements are loaded, postload() should be called."
msgstr ""

#: ../../gaphor/core/modeling/base.py:docstring of gaphor.core.modeling.base.Base.postload:1
msgid "Fix up the odds and ends."
msgstr ""

#: ../../gaphor/core/modeling/base.py:docstring of gaphor.core.modeling.base.Base.postload:3
msgid "This is run after all elements are loaded."
msgstr ""

#: ../../gaphor/core/modeling/base.py:docstring of gaphor.core.modeling.base.Base.save:1
msgid "Save the state by calling ``save_func(name, value)``."
msgstr ""

#: ../models/core.rst:63
msgid "OCL-style methods"
msgstr ""

#: ../../gaphor/core/modeling/base.py:docstring of gaphor.core.modeling.base.Base.isKindOf:1
msgid "Returns :const:`True` if the object is an instance of ``class_``."
msgstr ""

#: ../../gaphor/core/modeling/base.py:docstring of gaphor.core.modeling.base.Base.isTypeOf:1
msgid "Returns :const:`True` if the object is of the same type as the ``other``."
msgstr ""

#: ../models/core.rst:71
msgid "The ``Presentation`` class"
msgstr ""

#: ../../gaphor/core/modeling/presentation.py:docstring of gaphor.core.modeling.presentation.Presentation:1
msgid "A special type of :obj:`Base` that can be displayed on a :obj:`Diagram`."
msgstr ""

#: ../../gaphor/core/modeling/presentation.py:docstring of gaphor.core.modeling.presentation.Presentation:3
msgid "Presentation instances can only be owned by diagrams."
msgstr ""

#: ../../gaphor/core/modeling/presentation.py:docstring of gaphor.core.modeling.presentation.Presentation:5
msgid "Subtypes of ``Presentation`` should implement the :obj:`gaphas.item.Item` protocol."
msgstr ""

#: ../../gaphor/core/modeling/presentation.py:docstring of gaphor.core.modeling.presentation.Presentation.request_update:1
msgid "Mark this presentation object for update."
msgstr ""

#: ../../gaphor/core/modeling/presentation.py:docstring of gaphor.core.modeling.presentation.Presentation.request_update:3
msgid "Updates are orchestrated by diagrams."
msgstr ""

#: ../../gaphor/core/modeling/presentation.py:docstring of gaphor.core.modeling.presentation.Presentation.watch:1
msgid "Watch a certain path of elements starting with ``self``."
msgstr ""

#: ../../gaphor/core/modeling/presentation.py:docstring of gaphor.core.modeling.presentation.Presentation.watch:3
msgid "The handler is optional and will default to a simple :obj:`request_update`."
msgstr ""

#: ../../gaphor/core/modeling/presentation.py:docstring of gaphor.core.modeling.presentation.Presentation.watch:5
msgid "Watches should be set in the constructor, so they can be registered and unregistered in one shot."
msgstr ""

#: ../../gaphor/core/modeling/presentation.py:docstring of gaphor.core.modeling.presentation.Presentation.watch:12
msgid "This interface is fluent: returns ``self``."
msgstr ""

#: ../../gaphor/core/modeling/presentation.py:docstring of gaphor.core.modeling.presentation.Presentation.change_parent:1
msgid "Change the parent and update the item's matrix so the item visually remains in the same place."
msgstr ""

#: ../models/core.rst:84
msgid "The ``Diagram`` class"
msgstr ""

#: ../../gaphor/core/modeling/diagram.py:docstring of gaphor.core.modeling.diagram.Diagram:1
msgid "Diagrams may contain :obj:`Presentation` elements."
msgstr ""

#: ../../gaphor/core/modeling/diagram.py:docstring of gaphor.core.modeling.diagram.Diagram:3
msgid "If diagrams need to be owned, the modeling language (e.g. UML) should subclass ``Diagram`` and add ownership relationships and rules."
msgstr ""

#: ../../gaphor/core/modeling/diagram.py:docstring of gaphor.core.modeling.diagram.Diagram.create:1
msgid "Create a new diagram item on the diagram."
msgstr ""

#: ../../gaphor/core/modeling/diagram.py:docstring of gaphor.core.modeling.diagram.Diagram.create:3
msgid "It is created with a unique ID, and it is attached to the diagram's root item.  The type parameter is the element class to create.  The new element also has an optional parent and subject."
msgstr ""

#: ../../gaphor/core/modeling/diagram.py:docstring of gaphor.core.modeling.diagram.Diagram.lookup:1
msgid "Find a presentation item by id."
msgstr ""

#: ../../gaphor/core/modeling/diagram.py:docstring of gaphor.core.modeling.diagram.Diagram.lookup:3
msgid "Returns a presentation in this diagram or return ``None``."
msgstr ""

#: ../../gaphor/core/modeling/diagram.py:docstring of gaphor.core.modeling.diagram.Diagram.select:1
msgid "Return an iterator of all canvas items that match expression."
msgstr ""

#: ../../gaphor/core/modeling/diagram.py:docstring of gaphor.core.modeling.diagram.Diagram.request_update:1
msgid "Schedule an item for updating."
msgstr ""

#: ../../gaphor/core/modeling/diagram.py:docstring of gaphor.core.modeling.diagram.Diagram.request_update:3
msgid "No update is done at this point, it's only added to the set of to-be updated items."
msgstr ""

#: ../../gaphor/core/modeling/diagram.py:docstring of gaphor.core.modeling.diagram.Diagram.request_update:6
msgid "This method is part of the :obj:`gaphas.model.Model` protocol."
msgstr ""

#: ../../gaphor/core/modeling/diagram.py:docstring of gaphor.core.modeling.diagram.Diagram.update:1
msgid "Update the diagram."
msgstr ""

#: ../../gaphor/core/modeling/diagram.py:docstring of gaphor.core.modeling.diagram.Diagram.update:3
msgid "All items that requested an update via :meth:`request_update` are now updates. If an item has an ``update(context: UpdateContext)`` method, it's invoked. Constraints are solved."
msgstr ""

#: ../models/core.rst:99
msgid "Protocols"
msgstr ""

#: ../models/core.rst:105
msgid "Create a new element in the repository."
msgstr ""

#: ../models/core.rst:109
msgid "Select elements from the repository that fulfill ``expression``."
msgstr ""

#: ../models/core.rst:114
msgid "Select all elements from the repository of type ``type_``."
msgstr ""

#: ../models/core.rst:119
msgid "Select all elements from the repository."
msgstr ""

#: ../models/core.rst:123
msgid "Get an element by id from the repository."
msgstr ""

#: ../models/core.rst:125
msgid "Returns :const:`None` if no such element exists."
msgstr ""

#: ../models/core.rst:131
msgid "Add a watch for a specific path. The path is relative to the element that created the watcher object."
msgstr ""

#: ../models/core.rst:134
msgid "Returns ``self``, so watch operations can be chained."
msgstr ""

#: ../models/core.rst:138
msgid "Should be called before the watcher is disposed, to release all watched paths."
msgstr ""

#: ../models/core_changeset.md:1
msgid "Change Sets"
msgstr ""

#: ../models/core_changeset.md:3
msgid "The core model has support for change sets, which are sets of pending changes. Normally you end up with a change set when you [resolve a merge conflict](../merge_conflicts) in your model."
msgstr ""

#: ../models/core_services.rst:2
msgid "Core Services"
msgstr ""

#: ../models/core_services.rst:4
msgid "here you can find the API for services that are related to model creation and model manipulation."
msgstr ""

#: ../models/core_services.rst:9
msgid "Element Repository (/Factory)"
msgstr ""

#: ../../gaphor/core/modeling/elementfactory.py:docstring of gaphor.core.modeling.elementfactory.ElementFactory:1
msgid "The ``ElementFactory`` is used as a central repository for a model."
msgstr ""

#: ../../gaphor/core/modeling/elementfactory.py:docstring of gaphor.core.modeling.elementfactory.ElementFactory:3
msgid "New model elements should be created by :obj:`~gaphor.core.modeling.ElementFactory.create`."
msgstr ""

#: ../../gaphor/core/modeling/elementfactory.py:docstring of gaphor.core.modeling.elementfactory.ElementFactory:6
msgid "Methods like :obj:`~gaphor.core.modeling.ElementFactory.select` can be used to find elements in the model."
msgstr ""

#: ../../gaphor/core/modeling/elementfactory.py:docstring of gaphor.core.modeling.elementfactory.ElementFactory.select:1
msgid "Iterate elements that comply with expression."
msgstr ""

#: ../../gaphor/core/modeling/elementfactory.py:docstring of gaphor.core.modeling.elementfactory.ElementFactory.select:3
msgid "Expressions can be:"
msgstr ""

#: ../../gaphor/core/modeling/elementfactory.py:docstring of gaphor.core.modeling.elementfactory.ElementFactory.select:5
msgid ":obj:`None`: return all elements."
msgstr ""

#: ../../gaphor/core/modeling/elementfactory.py:docstring of gaphor.core.modeling.elementfactory.ElementFactory.select:6
msgid "A type: return all elements of that type, or subtypes."
msgstr ""

#: ../../gaphor/core/modeling/elementfactory.py:docstring of gaphor.core.modeling.elementfactory.ElementFactory.select:7
msgid "An expression."
msgstr ""

#: ../../gaphor/core/modeling/elementfactory.py:docstring of gaphor.core.modeling.elementfactory.ElementFactory.lselect:1
msgid "Like :obj:`~gaphor.core.modeling.ElementFactory.select`, but return a list, instead of an iterator."
msgstr ""

#: ../../gaphor/core/modeling/elementfactory.py:docstring of gaphor.core.modeling.elementfactory.ElementFactory.lookup:1
msgid "Find element with a specific id."
msgstr ""

#: ../../gaphor/core/modeling/elementfactory.py:docstring of gaphor.core.modeling.elementfactory.ElementFactory.keys:1
msgid "Iterate all id's in the factory."
msgstr ""

#: ../../gaphor/core/modeling/elementfactory.py:docstring of gaphor.core.modeling.elementfactory.ElementFactory.values:1
msgid "Iterate all elements in the factory."
msgstr ""

#: ../../gaphor/core/modeling/elementfactory.py:docstring of gaphor.core.modeling.elementfactory.ElementFactory.size:1
msgid "Return the amount of elements currently in the factory."
msgstr ""

#: ../../gaphor/core/modeling/elementfactory.py:docstring of gaphor.core.modeling.elementfactory.ElementFactory.is_empty:1
msgid "Returns ``True`` if the factory holds no elements."
msgstr ""

#: ../../gaphor/core/modeling/elementfactory.py:docstring of gaphor.core.modeling.elementfactory.ElementFactory.create:1
msgid "Create a new model element of type ``type``."
msgstr ""

#: ../../gaphor/core/modeling/elementfactory.py:docstring of gaphor.core.modeling.elementfactory.ElementFactory.create:3
msgid "This method will only create model elements, not :obj:`~gaphor.core.modeling.Presentation` elements: those are created by :obj:`~gaphor.core.modeling.Diagram`."
msgstr ""

#: ../../gaphor/core/modeling/elementfactory.py:docstring of gaphor.core.modeling.elementfactory.ElementFactory.flush:1
msgid "Flush all elements (remove them from the factory)."
msgstr ""

#: ../../gaphor/core/modeling/elementfactory.py:docstring of gaphor.core.modeling.elementfactory.ElementFactory.flush:3
msgid "Diagram elements are flushed first. The remaining elements are flushed next."
msgstr ""

#: ../models/core_services.rst:33
msgid "Modeling Language"
msgstr ""

#: ../models/core_services.rst:35
msgid "Information on how modeling languages are managed can be found :doc:`../modeling_language`."
msgstr ""

#: ../models/core_services.rst:39
msgid "Event Manager"
msgstr ""

#: ../models/core_services.rst:41
msgid "The :doc:`../event_system` takes care of dispatches events throughout Gaphor."
msgstr ""

#: ../models/raaml.md:10
#: ../models/sysml.md:9
#: ../models/uml.md:15
msgid "Packages"
msgstr ""

#: ../models/raaml.md:1
msgid "Risk Analysis and Assessment Modeling Language"
msgstr ""

#: ../models/raaml.md:3
msgid "Gaphor implements parts of the [RAAML 1.0 specification](https://www.omg.org/spec/RAAML)."
msgstr ""

#: ../models/raaml/Core.rst:2
msgid "Core"
msgstr ""

#: ../models/raaml/Core.rst:5
msgid "Core Library/Any Situation"
msgstr ""

#: ../models/raaml/Core.rst:11
msgid "Core Profile/Controlling Measure"
msgstr ""

#: ../models/raaml/Core.rst:17
msgid "Core Profile/Relevant To"
msgstr ""

#: ../models/raaml/Core.rst:23
msgid "Core Profile/Situation"
msgstr ""

#: ../models/raaml/Core.rst:29
msgid "Core Profile/Violates"
msgstr ""

#: ../models/raaml/General.rst:2
msgid "General"
msgstr ""

#: ../models/raaml/General.rst:5
msgid "Basic Event"
msgstr ""

#: ../models/raaml/General.rst:11
msgid "General Concepts Library/Abstract Cause"
msgstr ""

#: ../models/raaml/General.rst:17
msgid "General Concepts Library/Abstract Effect"
msgstr ""

#: ../models/raaml/General.rst:23
msgid "General Concepts Library/Abstract Event"
msgstr ""

#: ../models/raaml/General.rst:29
msgid "General Concepts Library/Abstract Failure Mode"
msgstr ""

#: ../models/raaml/General.rst:35
msgid "General Concepts Library/Abstract Risk"
msgstr ""

#: ../models/raaml/General.rst:41
msgid "General Concepts Library/Activation"
msgstr ""

#: ../models/raaml/General.rst:47
msgid "General Concepts Library/Cause"
msgstr ""

#: ../models/raaml/General.rst:53
msgid "General Concepts Library/Dysfunctional Event"
msgstr ""

#: ../models/raaml/General.rst:59
msgid "General Concepts Library/Effect"
msgstr ""

#: ../models/raaml/General.rst:65
msgid "General Concepts Library/Error Propagation"
msgstr ""

#: ../models/raaml/General.rst:71
msgid "General Concepts Library/Error Realization"
msgstr ""

#: ../models/raaml/General.rst:77
msgid "General Concepts Library/Harm Potential"
msgstr ""

#: ../models/raaml/General.rst:83
msgid "General Concepts Library/Hazard"
msgstr ""

#: ../models/raaml/General.rst:89
msgid "General Concepts Library/Scenario"
msgstr ""

#: ../models/raaml/General.rst:95
msgid "General Concepts Library/Undesired State"
msgstr ""

#: ../models/raaml/General.rst:101
msgid "General Concepts Profile/Detection"
msgstr ""

#: ../models/raaml/General.rst:107
msgid "General Concepts Profile/Failure State"
msgstr ""

#: ../models/raaml/General.rst:113
msgid "General Concepts Profile/Mitigation"
msgstr ""

#: ../models/raaml/General.rst:119
msgid "General Concepts Profile/Prevention"
msgstr ""

#: ../models/raaml/General.rst:125
msgid "General Concepts Profile/Recommendation"
msgstr ""

#: ../models/raaml/General.rst:131
msgid "General Concepts Profile/Undeveloped"
msgstr ""

#: ../models/raaml/Methods.rst:2
msgid "Methods"
msgstr ""

#: ../models/raaml/Methods.rst:5
msgid "FTA/FTA Library/Events/Basic Event"
msgstr ""

#: ../models/raaml/Methods.rst:11
msgid "FTA/FTA Library/Events/Conditional Event"
msgstr ""

#: ../models/raaml/Methods.rst:17
msgid "FTA/FTA Library/Events/Dormant Event"
msgstr ""

#: ../models/raaml/Methods.rst:23
msgid "FTA/FTA Library/Events/Events"
msgstr ""

#: ../models/raaml/Methods.rst:29
msgid "FTA/FTA Library/Events/Event"
msgstr ""

#: ../models/raaml/Methods.rst:35
msgid "FTA/FTA Library/Events/House Event"
msgstr ""

#: ../models/raaml/Methods.rst:41
msgid "FTA/FTA Library/Events/Intermediate Event"
msgstr ""

#: ../models/raaml/Methods.rst:47
msgid "FTA/FTA Library/Events/Top Event"
msgstr ""

#: ../models/raaml/Methods.rst:53
msgid "FTA/FTA Library/Events/Undeveloped Event"
msgstr ""

#: ../models/raaml/Methods.rst:59
msgid "FTA/FTA Library/Events/Zero Event"
msgstr ""

#: ../models/raaml/Methods.rst:65
msgid "FTA/FTA Library/FTA Element"
msgstr ""

#: ../models/raaml/Methods.rst:71
msgid "FTA/FTA Library/FTA Library"
msgstr ""

#: ../models/raaml/Methods.rst:77
msgid "FTA/FTA Library/FTA Tree"
msgstr ""

#: ../models/raaml/Methods.rst:83
msgid "FTA/FTA Library/Gates/AND"
msgstr ""

#: ../models/raaml/Methods.rst:89
msgid "FTA/FTA Library/Gates/Gate"
msgstr ""

#: ../models/raaml/Methods.rst:95
msgid "FTA/FTA Library/Gates/INHIBIT"
msgstr ""

#: ../models/raaml/Methods.rst:101
msgid "FTA/FTA Library/Gates/MAJORITY_VOTE"
msgstr ""

#: ../models/raaml/Methods.rst:107
msgid "FTA/FTA Library/Gates/NOT"
msgstr ""

#: ../models/raaml/Methods.rst:113
msgid "FTA/FTA Library/Gates/OR"
msgstr ""

#: ../models/raaml/Methods.rst:119
msgid "FTA/FTA Library/Gates/SEQ"
msgstr ""

#: ../models/raaml/Methods.rst:125
msgid "FTA/FTA Library/Gates/XOR"
msgstr ""

#: ../models/raaml/Methods.rst:131
msgid "FTA/FTA Profile/AND"
msgstr ""

#: ../models/raaml/Methods.rst:137
msgid "FTA/FTA Profile/Conditional Event"
msgstr ""

#: ../models/raaml/Methods.rst:143
msgid "FTA/FTA Profile/Dormant Event"
msgstr ""

#: ../models/raaml/Methods.rst:149
msgid "FTA/FTA Profile/Event"
msgstr ""

#: ../models/raaml/Methods.rst:155
msgid "FTA/FTA Profile/Gate"
msgstr ""

#: ../models/raaml/Methods.rst:161
msgid "FTA/FTA Profile/House Event"
msgstr ""

#: ../models/raaml/Methods.rst:167
msgid "FTA/FTA Profile/INHIBIT"
msgstr ""

#: ../models/raaml/Methods.rst:173
msgid "FTA/FTA Profile/Intermediate Event"
msgstr ""

#: ../models/raaml/Methods.rst:179
msgid "FTA/FTA Profile/MAJORITY_VOTE"
msgstr ""

#: ../models/raaml/Methods.rst:185
msgid "FTA/FTA Profile/NOT"
msgstr ""

#: ../models/raaml/Methods.rst:191
msgid "FTA/FTA Profile/OR"
msgstr ""

#: ../models/raaml/Methods.rst:197
msgid "FTA/FTA Profile/SEQ"
msgstr ""

#: ../models/raaml/Methods.rst:203
msgid "FTA/FTA Profile/Top Event"
msgstr ""

#: ../models/raaml/Methods.rst:209
msgid "FTA/FTA Profile/Transfer In"
msgstr ""

#: ../models/raaml/Methods.rst:215
msgid "FTA/FTA Profile/Transfer Out"
msgstr ""

#: ../models/raaml/Methods.rst:221
msgid "FTA/FTA Profile/Tree"
msgstr ""

#: ../models/raaml/Methods.rst:227
msgid "FTA/FTA Profile/XOR"
msgstr ""

#: ../models/raaml/Methods.rst:233
msgid "FTA/FTA Profile/Zero Event"
msgstr ""

#: ../models/raaml/Methods.rst:239
msgid "FTA/FTA"
msgstr ""

#: ../models/sysml.md:1
msgid "Systems Modeling Language"
msgstr ""

#: ../models/sysml.md:3
msgid "Gaphor implements part of the [SysML 1.6](https://www.omg.org/spec/SysML) specification."
msgstr ""

#: ../models/sysml/Activities.rst:2
msgid "Activities"
msgstr ""

#: ../models/sysml/Allocations.rst:2
msgid "Allocations"
msgstr ""

#: ../models/sysml/Allocations.rst:5
msgid "AllocatedActivityPartition"
msgstr ""

#: ../models/sysml/Allocations.rst:11
msgid "Allocation"
msgstr ""

#: ../models/sysml/Blocks.rst:2
#: ../style_sheets.md:329
#: ../style_sheets.md:330
msgid "Blocks"
msgstr ""

#: ../models/sysml/Blocks.rst:8
msgid "Adjunt and Classifier Behavior Properties"
msgstr ""

#: ../models/sysml/Blocks.rst:14
msgid "Bound References"
msgstr ""

#: ../models/sysml/Blocks.rst:20
msgid "Connector Ends"
msgstr ""

#: ../models/sysml/Blocks.rst:26
msgid "Properties"
msgstr ""

#: ../models/sysml/Blocks.rst:32
msgid "Property Paths"
msgstr ""

#: ../models/sysml/Blocks.rst:38
msgid "Property-Specific Types"
msgstr ""

#: ../models/sysml/Blocks.rst:44
msgid "Property Strings"
msgstr ""

#: ../models/sysml/Blocks.rst:50
msgid "Value Types"
msgstr ""

#: ../models/sysml/ConstraintBlocks.rst:2
msgid "ConstraintBlocks"
msgstr ""

#: ../models/sysml/Libraries.rst:2
msgid "Libraries"
msgstr ""

#: ../models/sysml/ModelElements.rst:2
msgid "ModelElements"
msgstr ""

#: ../models/sysml/PortsAndFlows.rst:2
msgid "PortsAndFlows"
msgstr ""

#: ../models/sysml/PortsAndFlows.rst:5
msgid "Actions on Nested Ports"
msgstr ""

#: ../models/sysml/PortsAndFlows.rst:11
msgid "Port Stereotypes"
msgstr ""

#: ../models/sysml/PortsAndFlows.rst:17
msgid "Property Value Change Events"
msgstr ""

#: ../models/sysml/PortsAndFlows.rst:23
msgid "Provided and Required Features"
msgstr ""

#: ../models/sysml/PortsAndFlows.rst:29
msgid "Item Flow"
msgstr ""

#: ../models/sysml/Requirements.rst:2
#: ../style_sheets.md:331
msgid "Requirements"
msgstr ""

#: ../models/uml.md:1
msgid "Unified Modeling Language"
msgstr ""

#: ../models/uml.md:3
msgid "The UML model is the most extensive model in Gaphor. It is used as a base language for [SysML](sysml.md), [RAAML](raaml.md), and [C4](c4model.md)."
msgstr ""

#: ../models/uml.md:7
msgid "Gaphor follows the [official UML 2.5.1 data model](https://www.omg.org/spec/UML/). Where changes have been made a comment has been added to the model. In particular where _m:n_ relationships subset _1:n_ relationships."
msgstr ""

#: ../models/uml/01._Common_Structure.rst:2
msgid "01. Common Structure"
msgstr ""

#: ../models/uml/01._Common_Structure.rst:5
msgid "1. Root"
msgstr ""

#: ../models/uml/01._Common_Structure.rst:11
msgid "2. Templates"
msgstr ""

#: ../models/uml/01._Common_Structure.rst:13
msgid "Not implemented."
msgstr ""

#: ../models/uml/01._Common_Structure.rst:16
msgid "3. Namespaces"
msgstr ""

#: ../models/uml/01._Common_Structure.rst:22
msgid "4. Types and Multiplicity"
msgstr ""

#: ../models/uml/01._Common_Structure.rst:28
msgid "5. Constraints"
msgstr ""

#: ../models/uml/01._Common_Structure.rst:34
msgid "6. Dependencies"
msgstr ""

#: ../models/uml/02._Values.rst:2
msgid "02. Values"
msgstr ""

#: ../models/uml/02._Values.rst:5
msgid "1. Literals"
msgstr ""

#: ../models/uml/02._Values.rst:11
msgid "2. Expressions"
msgstr ""

#: ../models/uml/03._Classification.rst:2
msgid "03. Classification"
msgstr ""

#: ../models/uml/03._Classification.rst:5
msgid "1. Classifiers"
msgstr ""

#: ../models/uml/03._Classification.rst:11
msgid "3. Features"
msgstr ""

#: ../models/uml/03._Classification.rst:17
msgid "4. Properties"
msgstr ""

#: ../models/uml/03._Classification.rst:23
msgid "5. Operations"
msgstr ""

#: ../models/uml/03._Classification.rst:29
msgid "7. Instances"
msgstr ""

#: ../models/uml/04._Simple_Classifiers.rst:2
msgid "04. Simple Classifiers"
msgstr ""

#: ../models/uml/04._Simple_Classifiers.rst:5
msgid "1. Data Types"
msgstr ""

#: ../models/uml/04._Simple_Classifiers.rst:11
msgid "3. Interfaces"
msgstr ""

#: ../models/uml/05._Structured_Classifiers.rst:2
msgid "05. Structured Classifiers"
msgstr ""

#: ../models/uml/05._Structured_Classifiers.rst:5
msgid "1. Structured Classifiers"
msgstr ""

#: ../models/uml/05._Structured_Classifiers.rst:11
msgid "2. Encapsulated Classifiers"
msgstr ""

#: ../models/uml/05._Structured_Classifiers.rst:17
msgid "3. Classes"
msgstr ""

#: ../models/uml/05._Structured_Classifiers.rst:23
msgid "4. Associations"
msgstr ""

#: ../models/uml/05._Structured_Classifiers.rst:29
msgid "5. Components"
msgstr ""

#: ../models/uml/05._Structured_Classifiers.rst:35
msgid "6. Collaborations"
msgstr ""

#: ../models/uml/06._Packaging.rst:2
msgid "06. Packaging"
msgstr ""

#: ../models/uml/06._Packaging.rst:5
msgid "1. Packages"
msgstr ""

#: ../models/uml/06._Packaging.rst:11
msgid "2. Profiles"
msgstr ""

#: ../models/uml/07._Common_Behaviors.rst:2
msgid "07. Common Behaviors"
msgstr ""

#: ../models/uml/07._Common_Behaviors.rst:5
msgid "1. Behaviors"
msgstr ""

#: ../models/uml/07._Common_Behaviors.rst:11
msgid "2. Events"
msgstr ""

#: ../models/uml/08._State_Machines.rst:2
msgid "08. State Machines"
msgstr ""

#: ../models/uml/08._State_Machines.rst:5
msgid "1. Behavior State Machines"
msgstr ""

#: ../models/uml/09._Activities.rst:2
msgid "09. Activities"
msgstr ""

#: ../models/uml/09._Activities.rst:5
msgid "1. Activities"
msgstr ""

#: ../models/uml/09._Activities.rst:11
msgid "2. Control Nodes"
msgstr ""

#: ../models/uml/09._Activities.rst:17
msgid "3. Object Nodes"
msgstr ""

#: ../models/uml/09._Activities.rst:23
msgid "4. Executable Nodes"
msgstr ""

#: ../models/uml/09._Activities.rst:29
msgid "5. Activity Groups"
msgstr ""

#: ../models/uml/10._Actions.rst:2
msgid "10. Actions"
msgstr ""

#: ../models/uml/10._Actions.rst:5
msgid "1. Actions"
msgstr ""

#: ../models/uml/10._Actions.rst:11
msgid "2. Invocation Actions"
msgstr ""

#: ../models/uml/10._Actions.rst:17
msgid "7. Structural Feature Actions"
msgstr ""

#: ../models/uml/10._Actions.rst:23
msgid "9. Accept Event Actions"
msgstr ""

#: ../models/uml/11._Interactions.rst:2
msgid "11. Interactions"
msgstr ""

#: ../models/uml/11._Interactions.rst:5
msgid "1. Interactions"
msgstr ""

#: ../models/uml/11._Interactions.rst:11
msgid "2. Lifelines"
msgstr ""

#: ../models/uml/11._Interactions.rst:17
msgid "3. Messages"
msgstr ""

#: ../models/uml/11._Interactions.rst:23
msgid "4. Occurrences"
msgstr ""

#: ../models/uml/12._Use_Cases.rst:2
msgid "12. Use Cases"
msgstr ""

#: ../models/uml/12._Use_Cases.rst:5
msgid "UseCases"
msgstr ""

#: ../models/uml/13._Deployments.rst:2
msgid "13. Deployments"
msgstr ""

#: ../models/uml/13._Deployments.rst:5
msgid "1. Deployments"
msgstr ""

#: ../models/uml/13._Deployments.rst:11
msgid "2. Artifacts"
msgstr ""

#: ../models/uml/13._Deployments.rst:17
msgid "3. Nodes"
msgstr ""

#: ../models/uml/14._Information_Flows.rst:2
msgid "14. Information Flows"
msgstr ""

#: ../models/uml/A._Gaphor_Specific_Constructs.rst:2
msgid "A. Gaphor Specific Constructs"
msgstr ""

#: ../models/uml/A._Gaphor_Specific_Constructs.rst:5
msgid "1. Diagrams"
msgstr ""

#: ../models/uml/A._Gaphor_Specific_Constructs.rst:11
msgid "2. Stereotype Applications"
msgstr ""

#: ../models/uml/B._Gaphor_Profile.rst:2
msgid "B. Gaphor Profile"
msgstr ""

#: ../models/uml/B._Gaphor_Profile.rst:4
msgid "In order to provide extra information to the diagram elements (mainly association ends), the Gaphor model has been extended with stereotypes."
msgstr ""

#: ../plugins.md:1
msgid "Plugins"
msgstr ""

#: ../plugins.md:4
msgid "Plugins is an experimental feature! The API may change."
msgstr ""

#: ../plugins.md:6
msgid "We welcome you to try and provide your feedback."
msgstr ""

#: ../plugins.md:9
msgid "Plugins allow you to extend the functionality of Gaphor beyond the features provided in the standard distributions. In particular, plugins can be helpful if you install the binary distributions available on the [download page](https://gaphor.org/download/)."
msgstr ""

#: ../plugins.md:12
msgid "Gaphor can be extended via entry points in several ways:"
msgstr ""

#: ../plugins.md:14
msgid "Application (global) services (`gaphor.appservices`)"
msgstr ""

#: ../plugins.md:15
msgid "Session specific services (`gaphor.services`)"
msgstr ""

#: ../plugins.md:16
msgid "[Modeling languages](modeling_language) (`gaphor.modelinglanguages`)"
msgstr ""

#: ../plugins.md:17
msgid "(Sub)command line parsers (`gaphor.argparsers`)"
msgstr ""

#: ../plugins.md:18
msgid "Indirectly loaded modules (`gaphor.modules`), mainly for UI components"
msgstr ""

#: ../plugins.md:21
msgid "The default location for plugins is `$HOME/.local/gaphor/plugins-2` (`$USER/.local/gaphor/plugins-2` on Windows). This location can be changed by setting the environment variable `GAPHOR_PLUGIN_PATH` and point to a directory."
msgstr ""

#: ../plugins.md:25
msgid "Install a plugin"
msgstr ""

#: ../plugins.md:27
msgid "At this moment Gaphor does not have functionality bundled to install and maintain plugins. To install a plugin, use `pip` from a Python installation on your computer. On macOS and Linux, that should be easy, on Windows you may need to install Python separately from [python.org](https://python.org) or the Windows Store."
msgstr ""

#: ../plugins.md:32
msgid "Since plugins are installed with your system Python version, it's important that plugins are pure Python and do not contain compiled C code."
msgstr ""

#: ../plugins.md:34
msgid "If you use Gaphor installed as Flatpak, you need to grant Gaphor access to user files (`filesystem=home`), so Gaphor can find files in your `.local` folder. You can use [FlatSeal](https://flathub.org/apps/com.github.tchx84.Flatseal) to change permissions of Flatpaks."
msgstr ""

#: ../plugins.md:39
msgid "For example: to install the [Hello World plugin](https://github.com/gaphor/gaphor_plugin_helloworld) on Linux and macOS, enter:"
msgstr ""

#: ../plugins.md:45
msgid "Then start Gaphor as you normally would. A new Hello World entry has been added to the tools menu (![Menu icon](images/open-menu-symbolic.svg) → Tools → Hello World)."
msgstr ""

#: ../plugins.md:48
msgid "Create your own plugin"
msgstr ""

#: ../plugins.md:50
msgid "If you want to write a plugin yourself, you can familiarize yourself with Gaphor's [design principles](design_principles), [service oriented architecture](service_oriented), and [event driven framework](framework)."
msgstr ""

#: ../plugins.md:54
msgid "Example plugin"
msgstr ""

#: ../plugins.md:56
msgid "You can have a look at the [Hello World plugin](https://github.com/gaphor/gaphor_plugin_helloworld) available on GitHub for an example of how to create your own plugin."
msgstr ""

#: ../plugins.md:58
msgid "The [pyproject.toml](https://github.com/gaphor/gaphor_plugin_helloworld/blob/main/pyproject.toml) file contains a plugin:"
msgstr ""

#: ../plugins.md:67
msgid "This refers to the class `HelloWorldPlugin` in package/module [gaphor_plugins_helloworld](https://github.com/gaphor/gaphor_plugin_helloworld/blob/main/gaphor_helloworld_plugin/__init__.py)."
msgstr ""

#: ../plugins.md:70
msgid "Here is a stripped version of the hello world plugin:"
msgstr ""

#: ../plugins.md:95
msgid "As stated before, a plugin should implement the `Service` interface. It also implements `ActionProvider`, saying it has some actions to be performed by the user."
msgstr ""

#: ../plugins.md:98
msgid "The menu entry will be part of the \"Tools\" extension menu. This extension point is created as a service. Other services can also be passed as dependencies. Services can get references to other services by defining them as arguments of the constructor."
msgstr ""

#: ../plugins.md:102
msgid "All action defined in this service are registered."
msgstr ""

#: ../plugins.md:103
msgid "Each service has a `shutdown()` method. This allows the service to perform some cleanup when it's shut down."
msgstr ""

#: ../plugins.md:105
msgid "The action that can be invoked. The action is defined and will be picked up by `add_actions()` method (see 3.)"
msgstr ""

#: ../plugins.md:108
msgid "Plugin Development FAQ"
msgstr ""

#: ../plugins.md:110
msgid "How do I acceess gaphor services in my plugin?"
msgstr ""

#: ../plugins.md:112
msgid "Gaphor's services can be made accessible by listing the service names in the init function of your plugin class. This also requires including Service as a base class. In the HelloWorldPlugin example, the tools_menu service is included."
msgstr ""

#: ../plugins.md:115
msgid "A more complete description of this approach can be found in the [Service Oriented Architecture documentation page](service_oriented.md)."
msgstr ""

#: ../plugins.md:118
msgid "Community Developed Plugins"
msgstr ""

#: ../plugins.md:120
msgid "Gaphor_Tools"
msgstr ""

#: ../plugins.md:121
msgid "What does it do?"
msgstr ""

#: ../plugins.md:122
msgid "Import and export of SysML requirements and notes to Excel and Confluence. It's currently at the proof-of-concept stage of development, but does allow a requirements table to be exported, then edited and imported bringing in all the changes to the model, similarly for element notes."
msgstr ""

#: ../plugins.md:123
msgid "Where can I get it?"
msgstr ""

#: ../plugins.md:124
msgid "From this [BitBucket Repo](https://bitbucket.org/resonatesystems/gaphor_tools/src/main/)"
msgstr ""

#: ../scripting.md:5
msgid "Jupyter and Scripting"
msgstr ""

#: ../scripting.md:7
msgid "One way to work with models is through the GUI. However, you may also be interested in getting more out of your models by interacting with them through Python scripts and [Jupyter notebooks](https://jupyter.org/)."
msgstr ""

#: ../scripting.md:11
msgid "You can use scripts to:"
msgstr ""

#: ../scripting.md:13
msgid "Explore the model, check for (in)valid conditions."
msgstr ""

#: ../scripting.md:14
msgid "Generate code, as is done for Gaphor’s data model."
msgstr ""

#: ../scripting.md:15
msgid "Update a model from another source, like a CSV file."
msgstr ""

#: ../scripting.md:17
msgid "Since Gaphor is written in Python, it also functions as a library."
msgstr ""

#: ../scripting.md:19
msgid "Getting started"
msgstr ""

#: ../scripting.md:21
msgid "To get started, you’ll need a Python console. You can use the interactive console in Gaphor, use a Jupyter notebook, although that will require setting up a Python development environment."
msgstr ""

#: ../scripting.md:25
msgid "Query a model"
msgstr ""

#: ../scripting.md:27
msgid "The first step is to load a model. For this you’ll need an {obj}`gaphor.core.modeling.ElementFactory`. The `ElementFactory` is responsible to creating and maintaining the model. It acts as a repository for the model while you’re working on it."
msgstr ""

#: ../scripting.md:38
msgid "The module `gaphor.storage` contains everything to load and save models. Gaphor supports multiple [modeling languages](modeling_language). The `ModelingLanguageService` consolidates those languages and makes it easy for the loader logic to find the appropriate classes."
msgstr ""

#: ../scripting.md:44
msgid "In versions before 2.13, an `EventManager` is required. In later versions, the `ModelingLanguageService` can be initialized without event manager."
msgstr ""

#: ../scripting.md:68
msgid "At this point the model is loaded in the `element_factory` and can be queried."
msgstr ""

#: ../scripting.md:71
msgid "A modeling language consists of the model elements, and diagram items. Graphical components are loaded separately. For the most basic manupilations, GTK (the GUI toolkit we use) is not required, but you may run into situations where Gaphor tries to load the GTK library."
msgstr ""

#: ../scripting.md:76
msgid "One trick to avoid this (when generating Sphinx docs at least) is to use autodoc’s mock function to mock out the GTK and GDK libraries. However, Pango needs to be installed for text rendering."
msgstr ""

#: ../scripting.md:81
msgid "A simple query only tells you what elements are in the model. The method `ElementFactory.select()` returns an iterator. Sometimes it’s easier to obtain a list directly. For those cases you can use `ElementFatory.lselect()`. Here we select the last five elements:"
msgstr ""

#: ../scripting.md:91
msgid "Elements can also be queried by type and with a predicate function:"
msgstr ""

#: ../scripting.md:106
msgid "Now, let’s say we want to do some simple (pseudo-)code generation. We can iterate class attributes and write some output."
msgstr ""

#: ../scripting.md:127
msgid "To find out which relations can be queried, have a look at the [modeling language](modeling_language) documentation. Gaphor’s data models have been built using the [UML](models/uml) language."
msgstr ""

#: ../scripting.md:131
msgid "You can find out more about a model property by printing it."
msgstr ""

#: ../scripting.md:137
msgid "In this case it tells us that the type of `UML.Class.ownedAttribute` is `UML.Property`. `UML.Property.class_` is set to the owner class when `ownedAttribute` is set. It is a bidirectional relation."
msgstr ""

#: ../scripting.md:141
msgid "Draw a diagram"
msgstr ""

#: ../scripting.md:143
msgid "Another nice feature is drawing the diagrams. At this moment this requires a function. This behavior is similar to the [`diagram` directive](sphinx)."
msgstr ""

#: ../scripting.md:154
msgid "Create a diagram"
msgstr ""

#: ../scripting.md:156
msgid "(Requires Gaphor 2.13)"
msgstr ""

#: ../scripting.md:158
msgid "Now let's make something a little more fancy. We still have the core model loaded in the element factory. From this model we can create a custom diagram. With a little help of the auto-layout service, we can make it a readable diagram."
msgstr ""

#: ../scripting.md:163
msgid "To create the diagram, we [`drop` elements](modeling_language:dropping) on the diagram. Items on a diagram represent an element in the model. We'll also drop all associations on the model. Only if both ends can connect, the association will be added."
msgstr ""

#: ../scripting.md:189
msgid "The diagram is not perfect, but you get the picture."
msgstr ""

#: ../scripting.md:191
msgid "Update a model"
msgstr ""

#: ../scripting.md:193
msgid "Updating a model always starts with the element factory: that’s where elements are created."
msgstr ""

#: ../scripting.md:196
msgid "To create a UML Class instance, you can:"
msgstr ""

#: ../scripting.md:203
msgid "To give it an attribute, create an attribute type (`UML.Property`) and then assign the attribute values."
msgstr ""

#: ../scripting.md:213
msgid "Adding it to the diagram looks like this:"
msgstr ""

#: ../scripting.md:221
msgid "If you save the model, your changes are persisted:"
msgstr ""

#: ../scripting.md:229
msgid "Updating elements"
msgstr ""

#: ../scripting.md:231
msgid "If you need to update existing elements, this can be done by keeping track of the element ID. Each element in the model has a unique internal id. Once again we need some imports from Gaphor:"
msgstr ""

#: ../scripting.md:244
msgid "Then start up the services we will use:"
msgstr ""

#: ../scripting.md:263
msgid "and load in the model to the session"
msgstr ""

#: ../scripting.md:280
msgid "Importantly, the changes are made as part of a `Transaction`. Here we find the element with the same id, and then update the content. We then save the altered model to a file."
msgstr ""

#: ../scripting.md:295
msgid "What else"
msgstr ""

#: ../scripting.md:297
msgid "What else is there to know…"
msgstr ""

#: ../scripting.md:299
msgid "Gaphor supports derived associations. For example, `element.owner` points to the owner element. For an attribute that would be its containing class."
msgstr ""

#: ../scripting.md:300
msgid "The module `gaphor.UML.recipes` contains several functions for manipulating elements and their associations."
msgstr ""

#: ../scripting.md:301
msgid "The tests for a given modelling language are a good place to find reference examples of element creation and modification."
msgstr ""

#: ../scripting.md:302
msgid "All data models are described in the `Modeling Languages` section of the docs."
msgstr ""

#: ../scripting.md:303
msgid "If you use Gaphor’s Console, you’ll need to apply all changes in a transaction, or they will result in an error."
msgstr ""

#: ../scripting.md:304
msgid "If you want a comprehensive example of a code generator, have a look at [Gaphor’s `coder` module](https://github.com/gaphor/gaphor/blob/main/gaphor/codegen/coder.py). This module is used to generate the code for the data models used by Gaphor."
msgstr ""

#: ../scripting.md:305
msgid "This page is rendered with [MyST-NB](https://myst-nb.readthedocs.io/). It’s actually a Jupyter Notebook!"
msgstr ""

#: ../scripting.md:307
msgid "Examples"
msgstr ""

#: ../scripting.md:309
msgid "Expanding on the information above the following snippetts show how to create requirements and interfaces."
msgstr ""

#: ../scripting.md:311
msgid "Requirements from text fields"
msgstr ""

#: ../scripting.md:336
msgid "Interfaces from dictionaries"
msgstr ""

#: ../scripting.md:367
msgid "Basic Validation"
msgstr ""

#: ../scripting.md:368
msgid "Some simple validation checks can be run using a couple of small functions to select and evaluate elements."
msgstr ""

#: ../scripting.md:392
msgid "Here is another example:"
msgstr ""

#: ../service_oriented.md:1
msgid "Service Oriented Architecture"
msgstr ""

#: ../service_oriented.md:3
msgid "Gaphor has a service oriented architecture. What does this mean? Well, Gaphor is built as a set of small islands (services). Each island provides a specific piece of functionality. For example, we use separate services to load/save models, provide the menu structure, and to handle the undo system."
msgstr ""

#: ../service_oriented.md:8
msgid "We define services as entry points in the `pyproject.toml`. With entry points, applications can register functionality for specific purposes. We also group entry points in to *entry point groups*. For example, we use the console_scripts entry point group to start an application from the command line."
msgstr ""

#: ../service_oriented.md:15
msgid "Services"
msgstr ""

#: ../service_oriented.md:17
msgid "Gaphor is modeled around the concept of services. Each service can be registered with the application and then it can be used by other services or other objects living within the application."
msgstr ""

#: ../service_oriented.md:21
msgid "Each service should implement the Service interface. This interface defines one method:"
msgstr ""

#: ../service_oriented.md:28
msgid "Which is called when a service needs to be cleaned up."
msgstr ""

#: ../service_oriented.md:30
msgid "We allow each service to define its own methods, as long as the service is implemented too."
msgstr ""

#: ../service_oriented.md:33
msgid "Services should be defined as entry points in the `pyproject.toml` file."
msgstr ""

#: ../service_oriented.md:35
msgid "Typically, a service does some work in the background. Services can also expose actions that can be invoked by users. For example, the _Ctrl-z_ key combo (undo) is implemented by the UndoManager service."
msgstr ""

#: ../service_oriented.md:39
msgid "A service can also depend on another services. Service initialization resolves these dependencies. To define a service dependency, just add it to the constructor by its name defined in the entry point:"
msgstr ""

#: ../service_oriented.md:58
msgid "Services that expose actions should also inherit from the ActionProvider interface. This interface does not require any additional methods to be implemented. Action methods should be annotated with an `@action` annotation."
msgstr ""

#: ../service_oriented.md:62
msgid "Example: ElementFactory"
msgstr ""

#: ../service_oriented.md:64
msgid "A nice example of a service in use is the {obj}`~gaphor.core.modeling.ElementFactory`. It is one of the core services."
msgstr ""

#: ../service_oriented.md:67
msgid "When an important events occurs, like an element is created or destroyed, that event is emitted. We then use an event handler for `ElementFactory` that stores the add/remove signals in the undo system. Another example of events that are emitted are with {obj}`~gaphor.core.modeling.Element`'s. Those classes, or more specifically, the properties, send notifications every time their state changes."
msgstr ""

#: ../service_oriented.md:74
msgid "Entry Points"
msgstr ""

#: ../service_oriented.md:76
msgid "Gaphor uses a main :ref`entry point <https://packaging.python.org/en/latest/specifications/entry-points/>` group called `gaphor.services`."
msgstr ""

#: ../service_oriented.md:78
msgid "Services are used to perform the core functionality of the application while breaking the functions in to individual components. For example, the element factory and undo manager are both services."
msgstr ""

#: ../service_oriented.md:82
msgid "Plugins can also be created to extend Gaphor beyond the core functionality as an add-on. For example, a plugin could be created to connect model data to other applications. Plugins are also defined as services. For example a new XMI export plugin would be defined as follows in the `pyproject.toml`:"
msgstr ""

#: ../service_oriented.md:92
msgid "Interfaces"
msgstr ""

#: ../service_oriented.md:94
msgid "Each service (and plugin) should implement the `gaphor.abc.Service` interface:"
msgstr ""

#: ../../gaphor/abc.py:docstring of gaphor.abc.Service:1
msgid "Base interface for all services in Gaphor."
msgstr ""

#: ../../gaphor/abc.py:docstring of gaphor.abc.Service.shutdown:1
msgid "Shutdown the services, free resources."
msgstr ""

#: ../service_oriented.md:101
msgid "Another more specialized service that also inherits from `gaphor.abc.Service`, is the UI Component service. Services that use this interface are used to define windows and user interface functionality. A UI component should implement the `gaphor.ui.abc.UIComponent` interface:"
msgstr ""

#: ../../gaphor/ui/abc.py:docstring of gaphor.ui.abc.UIComponent:1
msgid "A user interface component."
msgstr ""

#: ../../gaphor/ui/abc.py:docstring of gaphor.ui.abc.UIComponent.close:1
msgid "Close the UI component."
msgstr ""

#: ../../gaphor/ui/abc.py:docstring of gaphor.ui.abc.UIComponent.close:3
msgid "The component can decide to hide or destroy the UI components."
msgstr ""

#: ../../gaphor/ui/abc.py:docstring of gaphor.ui.abc.UIComponent.open:1
msgid "Create and display the UI components (windows)."
msgstr ""

#: ../../gaphor/ui/abc.py:docstring of gaphor.ui.abc.UIComponent.shutdown:1
msgid "Shut down this component."
msgstr ""

#: ../../gaphor/ui/abc.py:docstring of gaphor.ui.abc.UIComponent.shutdown:3
msgid "It's not supposed to be opened again."
msgstr ""

#: ../service_oriented.md:111
msgid "Typically, a service and UI component would like to present some actions to the user, by means of menu entries. Every service and UI component can advertise actions by implementing the `gaphor.abc.ActionProvider` interface:"
msgstr ""

#: ../../gaphor/abc.py:docstring of gaphor.abc.ActionProvider:1
msgid "An action provider is a special service that provides actions via ``@action`` decorators on its methods (see gaphor/action.py)."
msgstr ""

#: ../sphinx.rst:2
msgid "Sphinx Extension"
msgstr ""

#: ../sphinx.rst:4
msgid "What's more awesome than to use Gaphor diagrams directly in your `Sphinx`_ documentation. Whether you write your docs in `reStructured Text`_ or `Markdown`_, we've got you covered."
msgstr ""

#: ../sphinx.rst:9
msgid "Here we cover the reStructured Text syntax. If you prefer markdown, we suggest you have a look at the `MyST-parser <https://myst-parser.readthedocs.io/>`_, as it `supports Sphinx directives <https://myst-parser.readthedocs.io/en/latest/syntax/roles-and-directives.html>`_."
msgstr ""

#: ../sphinx.rst:13
msgid "It requires `minimal effort to set up <#configuration>`_. Adding a diagram is as simple as:"
msgstr ""

#: ../sphinx.rst:22
msgid "In case you use multiple Gaphor source files, you need to define a ``:model:`` attribute and add the model names to the Sphinx configuration file (``conf.py``)."
msgstr ""

#: ../sphinx.rst:30
msgid "Diagrams can be referenced by their name, or by their fully qualified name."
msgstr ""

#: ../sphinx.rst:36
msgid "`Figure`_, and `Image properties`_ can also be applied:"
msgstr ""

#: ../sphinx.rst:47
msgid "A description suitable for an example"
msgstr ""

#: ../sphinx.rst:53
msgid "You can also add a caption, if you want."
msgstr ""

#: ../sphinx.rst:56
msgid "Configuration"
msgstr ""

#: ../sphinx.rst:58
msgid "To add Gaphor diagram support to Sphinx, make sure Gaphor is listed as a dependency."
msgstr ""

#: ../sphinx.rst:62
msgid "Gaphor requires at least Python 3.9."
msgstr ""

#: ../sphinx.rst:64
msgid "Secondly, add the following to your ``conf.py`` file:"
msgstr ""

#: ../sphinx.rst:66
msgid "Step 1: Add gaphor as extension."
msgstr ""

#: ../sphinx.rst:74
msgid "Step 2: Add references to models"
msgstr ""

#: ../sphinx.rst:87
msgid "Now include ``diagram`` directives in your documents."
msgstr ""

#: ../sphinx.rst:91
msgid "Read the Docs"
msgstr ""

#: ../sphinx.rst:93
msgid "The diagram directive plays nice with `Read the docs`_. To make diagrams render, it's best to use a `.readthedocs.yaml`_ file in your project. Make sure to include the extra ``apt_packages`` as shown below."
msgstr ""

#: ../sphinx.rst:97
msgid "This is the ``.readthedocs.yaml`` file we use for Gaphor:"
msgstr ""

#: ../sphinx.rst:102
msgid "``libgirepository-2.0-dev`` is required to build PyGObject."
msgstr ""

#: ../sphinx.rst:103
msgid "``gir1.2-pango-1.0`` is required for text rendering."
msgstr ""

#: ../sphinx.rst:107
msgid "For Gaphor 2.7.0, ``gir1.2-gtk-3.0`` and ``gir1.2-gtksource-4`` are required ``apt_packages``, although we do not use the GUI. From Gaphor 2.7.1 onwards all you need is GI-repository and Pango."
msgstr ""

#: ../sphinx.rst:112
msgid "Errors"
msgstr ""

#: ../sphinx.rst:114
msgid "Errors are shown on the console when the documentation is built and in the document."
msgstr ""

#: ../sphinx.rst:116
msgid "An error will appear in the documentation. Something like this:"
msgstr ""

#: ../sphinx.rst:120
msgid "No diagram ‘Wrong name’ in model ‘example’ (../examples/sequence-diagram.gaphor)."
msgstr ""

#: ../stereotypes.md:1
msgid "Stereotypes"
msgstr ""

#: ../stereotypes.md:3
msgid "In UML, stereotypes are way to extend the application of the UML language to new domains. For example: SysML started as a profile for UML."
msgstr ""

#: ../stereotypes.md:6
msgid "Gaphor supports stereotypes too. They're *the* way for you to adapt your models to your specific needs."
msgstr ""

#: ../stereotypes.md:9
msgid "The UML, SysML, RAAML and other models used in Gaphor – the code is generated from Gaphor model files – make use of stereotypes to provide specific information used when generating the data model code."
msgstr ""

#: ../stereotypes.md:13
msgid "To create a stereotype, ensure the UML Profile is active and open the *Profile* section of the toolbox. First add a *Metaclass* to your diagram. Next add a *Stereotype*, and connect both with a *Extension*. The `«metaclass»` stereotype will only show once the *Extension* is connected both class and stereotype."
msgstr ""

#: ../stereotypes.md:20
msgid "The class names in the metaclass should be a class name from the UML model, such as `Class`, `Interface`, `Property`, `Association`. Or even `Element` if you want to use the stereotype on all elements."
msgstr ""

#: ../stereotypes.md:25
msgid "Your stereotype declaration may look something like this:"
msgstr ""

#: ../stereotypes.md:31
msgid "The `Asynchronous` stereotype has a property `priority`. This property can be proved a value once the stereotype is applied to a *Property*, such as an association end."
msgstr ""

#: ../stereotypes.md:35
msgid "When a stereotype can be applied to a model element, a *Stereotype* section will appear in the editor."
msgstr ""

#: ../stereotypes.md:38
msgid "![The Gaphor main window showing a stereotype usage example.](images/stereotype-usage.png)"
msgstr ""

#: ../stereotypes.md:38
msgid "The Gaphor main window showing a stereotype usage example."
msgstr ""

#: ../stereotypes.md:40
msgid "Creating a profile"
msgstr ""

#: ../stereotypes.md:42
msgid "In SysML extending the profile using stereotypes is often required to tailor the model to your needs. For example, creating Customer vs System requirements."
msgstr ""

#: ../stereotypes.md:45
msgid "To add a profile to your model:"
msgstr ""

#: ../stereotypes.md:47
msgid "Create a package called `profile` this can be done by right clicking in the left hand column."
msgstr ""

#: ../stereotypes.md:48
msgid "Switch modelling language to the UML profile (top of left hand menu drop down)"
msgstr ""

#: ../stereotypes.md:49
msgid "Within the package create a profile diagram (prf)"
msgstr ""

#: ../stereotypes.md:50
msgid "Add a profile element to the diagram"
msgstr ""

#: ../stereotypes.md:51
msgid "Add a meta-class element to the diagram, within the profile."
msgstr ""

#: ../stereotypes.md:52
msgid "Add a stereotype element to the diagram, within the profile."
msgstr ""

#: ../stereotypes.md:53
msgid "Connect meta-class and stereotype with an Extension relation. The head should be attached to the class. As soon as the Extension is connected, the class will get a stereotype _metaclass_ assigned."
msgstr ""

#: ../stereotypes.md:55
msgid "With the meta-class and stereotype placed on the diagram, either:"
msgstr ""

#: ../stereotypes.md:57
msgid "Double-click the meta-class and name it after the base element you want to create your stereotype from."
msgstr ""

#: ../stereotypes.md:58
msgid "Select the base element from the drop down menu in the Property Editor on the right hand side. In this case only UML elements can be used as base elements."
msgstr ""

#: ../stereotypes.md:60
msgid "Styling Stereotypes"
msgstr ""

#: ../stereotypes.md:62
msgid "You can apply styling to stereotypes. For example here the base element `requirement` has a stereotype `system requirement`"
msgstr ""

#: ../stereotypes.md:77
msgid "[Style Sheets](style_sheets) has more detail on how CSS works in Gaphor"
msgstr ""

#: ../storage.md:1
msgid "File Format"
msgstr ""

#: ../storage.md:3
msgid "The root element of Gaphor models is the `Gaphor` tag, all other elements are contained in this. The Gaphor element delimits the beginning and the end of an Gaphor model."
msgstr ""

#: ../storage.md:7
msgid "The idea is to keep the file format as simple and extensible as possible: UML elements (including Diagram) are at the top level with no nesting. A UML element can have two tags: references (`ref`) and values (`val`). References are used to point to other UML elements. Values have a value inside (an integer or a string)."
msgstr ""

#: ../storage.md:11
msgid "Since many references are bi-directional, you'll find both ends defined in the file (e.g. `Package.ownedType` - `Actor.package`, and `Diagram.ownedPresentation` and `UseCaseItem.diagram`)."
msgstr ""

#: ../style_sheets.md:1
msgid "Style Sheets"
msgstr ""

#: ../style_sheets.md:3
msgid "Since Gaphor 2.0, diagrams can have a different look by means of style sheets. Style sheets use the Cascading Style Sheets (CSS) syntax. CSS is used to describe the presentation of a document written in a markup language, and is most commonly used with HTML for web pages."
msgstr ""

#: ../style_sheets.md:8
msgid "On the [W3C CSS home page](https://www.w3.org/Style/CSS/Overview.en.html), CSS is described as:"
msgstr ""

#: ../style_sheets.md:11
msgid "Cascading Style Sheets (CSS) is a simple mechanism for adding style (e.g., fonts, colors, spacing) to Web documents."
msgstr ""

#: ../style_sheets.md:14
msgid "Its application goes well beyond web documents, though. Gaphor uses CSS to provide style elements to items in diagrams. CSS allows us, users of Gaphor, to change the visual appearance of our diagrams. Color and line styles can be changed to make it easier to read the diagrams."
msgstr ""

#: ../style_sheets.md:19
msgid "Since we're dealing with a diagram, and not a HTML document, some CSS features have been left out."
msgstr ""

#: ../style_sheets.md:22
msgid "The style is part of the model, so everyone working on a model will have the same style. To edit the style press the tools page button at the top right corner in gaphor:"
msgstr ""

#: ../style_sheets.md:26
msgid "![Button to access style code](images/css-button.png)"
msgstr ""

#: ../style_sheets.md:26
msgid "Button to access style code"
msgstr ""

#: ../style_sheets.md:28
msgid "Here is a simple example of how to change the background color of a class:"
msgstr ""

#: ../style_sheets.md:36
msgid "background beige"
msgstr ""

#: ../style_sheets.md:41
msgid "Or change the color of a component, only when it's nested in a node:"
msgstr ""

#: ../style_sheets.md:49
msgid "nested component"
msgstr ""

#: ../style_sheets.md:54
msgid "The diagram itself is also expressed as a CSS node. It's pretty easy to define a \"dark\" style:"
msgstr ""

#: ../style_sheets.md:68
msgid "dark-style"
msgstr ""

#: ../style_sheets.md:75
msgid "Here you already see the first custom attribute: `text-color`. This property allows you to control the color of the text drawn in an item. `color` is used for the lines (strokes) that make the layout of a diagram item."
msgstr ""

#: ../style_sheets.md:79
msgid "Supported selectors"
msgstr ""

#: ../style_sheets.md:81
msgid "Since we are dealing with diagrams and models, we do not need all the features of CSS. Below you'll find a summary of all CSS features supported by Gaphor."
msgstr ""

#: ../style_sheets.md:86
msgid "``*``"
msgstr ""

#: ../style_sheets.md:86
msgid "All items on the diagram, including the diagram itself."
msgstr ""

#: ../style_sheets.md:87
msgid "``node component``"
msgstr ""

#: ../style_sheets.md:87
msgid "Any component item which is a descendant of a node."
msgstr ""

#: ../style_sheets.md:88
msgid "``node > component``"
msgstr ""

#: ../style_sheets.md:88
msgid "A component item which is a child of a node."
msgstr ""

#: ../style_sheets.md:89
msgid "``generalization[subject]``"
msgstr ""

#: ../style_sheets.md:89
msgid "A generalization item with a subject present."
msgstr ""

#: ../style_sheets.md:90
msgid "``class[name=Foo]``"
msgstr ""

#: ../style_sheets.md:90
msgid "A class with name \"Foo\"."
msgstr ""

#: ../style_sheets.md:91
msgid "``diagram[name^=draft]``"
msgstr ""

#: ../style_sheets.md:91
msgid "A diagram with a name starting with \"draft\"."
msgstr ""

#: ../style_sheets.md:92
msgid "``diagram[name$=draft]``"
msgstr ""

#: ../style_sheets.md:92
msgid "A diagram with a name ends with \"draft\"."
msgstr ""

#: ../style_sheets.md:93
msgid "``diagram[name*=draft]``"
msgstr ""

#: ../style_sheets.md:93
msgid "A diagram with a name containing the text \"draft\"."
msgstr ""

#: ../style_sheets.md:94
msgid "``diagram[name~=draft item]``"
msgstr ""

#: ../style_sheets.md:94
msgid "A diagram with a name of \"draft\" or \"item\"."
msgstr ""

#: ../style_sheets.md:95
msgid "``diagram[name|=draft]``"
msgstr ""

#: ../style_sheets.md:95
msgid "A diagram with a name is \"draft\" or starts with \"draft-\"."
msgstr ""

#: ../style_sheets.md:96
msgid "``:focus``"
msgstr ""

#: ../style_sheets.md:96
msgid "The focused item. Other pseudo classes are:"
msgstr ""

#: ../style_sheets.md:98
msgid "``:active`` selected items"
msgstr ""

#: ../style_sheets.md:99
msgid "``:hover`` for the item under the mouse"
msgstr ""

#: ../style_sheets.md:100
msgid "``:drop`` if an item is dragged and can be dropped on this item"
msgstr ""

#: ../style_sheets.md:101
msgid "``:disabled`` if an element is grayed out during handle movement"
msgstr ""

#: ../style_sheets.md:102
msgid "``:empty``"
msgstr ""

#: ../style_sheets.md:102
msgid "A node containing no child nodes in the diagram."
msgstr ""

#: ../style_sheets.md:103
msgid "``:root``"
msgstr ""

#: ../style_sheets.md:103
msgid "Refers to the diagram itself."
msgstr ""

#: ../style_sheets.md:105
msgid "This is only applicable for the diagram"
msgstr ""

#: ../style_sheets.md:106
msgid "``:first-child``"
msgstr ""

#: ../style_sheets.md:106
msgid "A node is the first element among a group of sibling."
msgstr ""

#: ../style_sheets.md:107
msgid "``:has()``"
msgstr ""

#: ../style_sheets.md:107
msgid "The item contains any of the provided selectors."
msgstr ""

#: ../style_sheets.md:109
msgid "E.g. ``node:has(component)``: a node containing a component item."
msgstr ""

#: ../style_sheets.md:110
msgid "``:is()``"
msgstr ""

#: ../style_sheets.md:110
msgid "Match any of the provided selectors."
msgstr ""

#: ../style_sheets.md:112
msgid "E.g. ``:is(node, subsystem) > component``: a node or subsystem."
msgstr ""

#: ../style_sheets.md:113
msgid "``:not()``"
msgstr ""

#: ../style_sheets.md:113
msgid "Negate the selector."
msgstr ""

#: ../style_sheets.md:115
msgid "E.g. ``:not([subject])``: Any item that has no \"subject\"."
msgstr ""

#: ../style_sheets.md:116
msgid "``::after``"
msgstr ""

#: ../style_sheets.md:116
msgid "Provide extra content after a text. Only the ``content`` property is supported."
msgstr ""

#: ../style_sheets.md:121
msgid "The official specification of [CSS3 attribute selectors](https://www.w3.org/TR/2018/REC-selectors-3-20181106/#attribute-selectors)."
msgstr ""

#: ../style_sheets.md:122
msgid "Gaphor provides the `|=` attribute selector for the sake of completeness. It's probably not very useful in this context, though."
msgstr ""

#: ../style_sheets.md:124
msgid "Please note that Gaphor CSS does not support IDs for diagram items, so the CSS syntax for IDs (`#some-id`) is not used. Also, class syntax (`.some-class`) is not supported currently."
msgstr ""

#: ../style_sheets.md:128
msgid "Style properties"
msgstr ""

#: ../style_sheets.md:130
msgid "Gaphor supports a subset of CSS properties and some Gaphor specific properties. The style sheet interpreter is relatively straight forward. All widths, heights, and sizes are measured in pixels. You can’t use complex style declarations, like the `font` property in HTML/CSS which can contain font family, size, weight."
msgstr ""

#: ../style_sheets.md:136
msgid "Some properties are inherited from the parent style. The parent often is a diagram. When you set a `color`` or a `font-family` on `diagram`, it will propagate down to the items contained in the diagram."
msgstr ""

#: ../style_sheets.md:140
msgid "Colors"
msgstr ""

#: ../style_sheets.md:144
msgid "``background-color``"
msgstr ""

#: ../style_sheets.md:144
msgid "Examples:"
msgstr ""

#: ../style_sheets.md:146
msgid "``background-color: azure;``"
msgstr ""

#: ../style_sheets.md:148
msgid "``background-color: rgb(255, 255, 255);``"
msgstr ""

#: ../style_sheets.md:150
msgid "``background-color: hsl(130, 95%, 10%);``"
msgstr ""

#: ../style_sheets.md:151
msgid "``color``"
msgstr ""

#: ../style_sheets.md:151
msgid "Color used for lines. *(inherited)*"
msgstr ""

#: ../style_sheets.md:152
msgid "``text-color``"
msgstr ""

#: ../style_sheets.md:152
msgid "Color for text. *(inherited)*"
msgstr ""

#: ../style_sheets.md:154
msgid "Use color if possible."
msgstr ""

#: ../style_sheets.md:155
msgid "``opacity``"
msgstr ""

#: ../style_sheets.md:155
msgid "Color opacity factor (``0.0`` - ``1.0``), applied to all colors."
msgstr ""

#: ../style_sheets.md:160
msgid "A color can be any [CSS3 color code](https://www.w3.org/TR/2018/REC-css-color-3-20180619/), as described in the CSS documentation. Gaphor supports all color notations: `rgb()`, `rgba()`, `hsl()`, `hsla()`, Hex code (`#ffffff`) and color names."
msgstr ""

#: ../style_sheets.md:164
msgid "Text and fonts"
msgstr ""

#: ../style_sheets.md:168
msgid "``font-family``"
msgstr ""

#: ../style_sheets.md:168
msgid "A single font name (e.g. ``sans``, ``serif``, ``courier``). *(inherited)*"
msgstr ""

#: ../style_sheets.md:169
msgid "``font-size``"
msgstr ""

#: ../style_sheets.md:169
msgid "An absolute size (e.g. ``14``) or a size value (e.g. ``small``). *(inherited)*"
msgstr ""

#: ../style_sheets.md:170
msgid "``font-style``"
msgstr ""

#: ../style_sheets.md:170
msgid "Either ``normal`` or ``italic``. *(inherited)*"
msgstr ""

#: ../style_sheets.md:171
msgid "``font-weight``"
msgstr ""

#: ../style_sheets.md:171
msgid "Either ``normal`` or ``bold``. *(inherited)*"
msgstr ""

#: ../style_sheets.md:172
msgid "``text-align``"
msgstr ""

#: ../style_sheets.md:172
msgid "Either ``left``, ``center``, ``right``. *(inherited)*"
msgstr ""

#: ../style_sheets.md:173
msgid "``text-decoration``"
msgstr ""

#: ../style_sheets.md:173
msgid "Either ``none`` or ``underline``."
msgstr ""

#: ../style_sheets.md:174
msgid "``vertical-align``"
msgstr ""

#: ../style_sheets.md:174
msgid "Vertical alignment for text."
msgstr ""

#: ../style_sheets.md:176
msgid "Either ``top``, ``middle`` or ``bottom``."
msgstr ""

#: ../style_sheets.md:177
msgid "``vertical-spacing``"
msgstr ""

#: ../style_sheets.md:177
msgid "Set vertical spacing for icon-like items (actors, start state)."
msgstr ""

#: ../style_sheets.md:179
msgid "Example: ``vertical-spacing: 4``."
msgstr ""

#: ../style_sheets.md:180
msgid "``white-space``"
msgstr ""

#: ../style_sheets.md:180
msgid "Change the line wrapping behavior for text. *(inherited)*"
msgstr ""

#: ../style_sheets.md:184
msgid "`font-family` can be only one font name, not a list of (fallback) names, as is used for HTML."
msgstr ""

#: ../style_sheets.md:186
msgid "`font-size` can be a number or [CSS absolute-size values](https://drafts.csswg.org/css-fonts-3/#font-size-prop). Only the values `x-small`, `small`, `medium`, `large` and `x-large` are supported."
msgstr ""

#: ../style_sheets.md:189
msgid "Drawing and spacing"
msgstr ""

#: ../style_sheets.md:193
msgid "``border-radius``"
msgstr ""

#: ../style_sheets.md:193
msgid "Radius for rectangles: ``border-radius: 4``."
msgstr ""

#: ../style_sheets.md:194
msgid "``dash-style``"
msgstr ""

#: ../style_sheets.md:194
msgid "Style for dashed lines: ``dash-style: 7 5``."
msgstr ""

#: ../style_sheets.md:195
msgid "``justify-content``"
msgstr ""

#: ../style_sheets.md:195
msgid "Content alignment for boxes."
msgstr ""

#: ../style_sheets.md:197
msgid "Either ``start``, ``end``, ``center`` or ``stretch``."
msgstr ""

#: ../style_sheets.md:198
msgid "``line-style``"
msgstr ""

#: ../style_sheets.md:198
msgid "Either ``normal`` or ``sloppy [factor]``."
msgstr ""

#: ../style_sheets.md:199
msgid "``line-width``"
msgstr ""

#: ../style_sheets.md:199
msgid "Set the width for lines: ``line-width: 2``. *(inherited)*"
msgstr ""

#: ../style_sheets.md:200
msgid "``min-height``"
msgstr ""

#: ../style_sheets.md:200
msgid "Set minimal height for an item: ``min-height: 50``."
msgstr ""

#: ../style_sheets.md:201
msgid "``min-width``"
msgstr ""

#: ../style_sheets.md:201
msgid "Set minimal width for an item: ``min-width: 100``."
msgstr ""

#: ../style_sheets.md:202
msgid "``max-width``"
msgstr ""

#: ../style_sheets.md:202
msgid "Set maximum width (text fields only): ``max-width: 100``."
msgstr ""

#: ../style_sheets.md:203
msgid "``padding``"
msgstr ""

#: ../style_sheets.md:203
msgid "CSS style padding (top, right, bottom, left)."
msgstr ""

#: ../style_sheets.md:205
msgid "Example: ``padding: 3 4``."
msgstr ""

#: ../style_sheets.md:209
msgid "`padding` is defined by integers in the range of 1 to 4. No unit (px, pt, em) needs to be used. All values are in pixel distance."
msgstr ""

#: ../style_sheets.md:211
msgid "`dash-style` is a list of numbers (line, gap, line, gap, …)"
msgstr ""

#: ../style_sheets.md:212
msgid "`line-style` only has an effect when defined on a `diagram`. A sloppiness factor can be provided in the range of -2 to 2."
msgstr ""

#: ../style_sheets.md:215
msgid "Pseudo elements"
msgstr ""

#: ../style_sheets.md:217
msgid "Currently, only the `::after` pseudo element is supported."
msgstr ""

#: ../style_sheets.md:221
msgid "``content``"
msgstr ""

#: ../style_sheets.md:221
msgid "Extra content to be shown after a text."
msgstr ""

#: ../style_sheets.md:225
msgid "Variables"
msgstr ""

#: ../style_sheets.md:227
msgid "Since Gaphor 2.16.0 you can use [CSS variables](https://developer.mozilla.org/en-US/docs/Web/CSS/Using_CSS_custom_properties) in your style sheets."
msgstr ""

#: ../style_sheets.md:229
msgid "This allows you to define often used values in a more generic way. Think of things like line dash style and colors."
msgstr ""

#: ../style_sheets.md:232
msgid "The `var()` function has some limitations:"
msgstr ""

#: ../style_sheets.md:234
msgid "Values can’t have a default value."
msgstr ""

#: ../style_sheets.md:235
msgid "Variables can’t have a variable as their value."
msgstr ""

#: ../style_sheets.md:237
msgid "Example:"
msgstr ""

#: ../style_sheets.md:250
msgid "All diagrams have a white background. Sequence diagrams get a blue-ish background."
msgstr ""

#: ../style_sheets.md:252
msgid "Media queries"
msgstr ""

#: ../style_sheets.md:254
msgid "Gaphor supports dark and light mode since 2.16.0. Dark and light color schemes are exclusively used for on-screen editing. When exporting images, only the default color scheme is applied. Color schemes can be defined with `@media` queries. The official `prefers-color-scheme = dark` query is supported, as well as a more convenient `dark-mode`."
msgstr ""

#: ../style_sheets.md:280
msgid "Diagram styles"
msgstr ""

#: ../style_sheets.md:282
msgid "Only a few properties can be defined on a diagram, namely `background-color` and `line-style`. You define the diagram style separately from the diagram item styles. That way it's possible to set the background color for diagrams specifically. The line style can be the normal straight lines, or a more playful \"sloppy\" style. For the sloppy style an optional wobliness factor can be provided to set the level of line wobbliness. 0.5 is default, 0.0 is a straight line. The value should be between -2.0 and 2.0. Values between 0.0 and 0.5 make for a subtle effect."
msgstr ""

#: ../style_sheets.md:291
msgid "CSS model elements"
msgstr ""

#: ../style_sheets.md:293
msgid "Gaphor has many model elements. How can you find out which item should be styled?"
msgstr ""

#: ../style_sheets.md:295
msgid "Gaphor only styles the elements that are in the model, so you should be explicit on their names. For example: `Component` inherits from `Class` in the UML model, but changing a color for `Class` does not change it for `Component`."
msgstr ""

#: ../style_sheets.md:299
msgid "If you hover over a button the toolbox (bottom-left section), a popup will appear with the item's name and a shortcut. As a general rule, you can use the component name, glued together as the name in the stylesheet. A *Component* can be addressed as `component`, *Use Case* as `usecase`. The name matching is case insensitive. CSS names are written in lower case by default."
msgstr ""

#: ../style_sheets.md:306
msgid "However, since the CSS element names are derived from names used within Gaphor, there are a few exceptions."
msgstr ""

#: ../style_sheets.md:310
msgid "Profile"
msgstr ""

#: ../style_sheets.md:310
msgid "Group"
msgstr ""

#: ../style_sheets.md:310
msgid "Element"
msgstr ""

#: ../style_sheets.md:310
msgid "CSS element"
msgstr ""

#: ../style_sheets.md:312
msgid "\\*"
msgstr ""

#: ../style_sheets.md:312
msgid "*element name*"
msgstr ""

#: ../style_sheets.md:312
msgid "element name without spaces"
msgstr ""

#: ../style_sheets.md:314
msgid "E.g. ``class``, ``usecase``."
msgstr ""

#: ../style_sheets.md:315
#: ../style_sheets.md:316
#: ../style_sheets.md:317
#: ../style_sheets.md:318
#: ../style_sheets.md:319
#: ../style_sheets.md:320
#: ../style_sheets.md:321
#: ../style_sheets.md:322
#: ../style_sheets.md:323
msgid "UML"
msgstr ""

#: ../style_sheets.md:315
msgid "Classes"
msgstr ""

#: ../style_sheets.md:315
msgid "all Association's"
msgstr ""

#: ../style_sheets.md:315
msgid "``association``"
msgstr ""

#: ../style_sheets.md:316
msgid "Components"
msgstr ""

#: ../style_sheets.md:316
msgid "Device/Node"
msgstr ""

#: ../style_sheets.md:316
msgid "``node``"
msgstr ""

#: ../style_sheets.md:317
#: ../style_sheets.md:318
#: ../style_sheets.md:319
msgid "Actions"
msgstr ""

#: ../style_sheets.md:317
msgid "Decision/Merge Node"
msgstr ""

#: ../style_sheets.md:317
msgid "``decisionnode``"
msgstr ""

#: ../style_sheets.md:318
msgid "Fork/Join Node"
msgstr ""

#: ../style_sheets.md:318
msgid "``forknode``"
msgstr ""

#: ../style_sheets.md:319
msgid "Swimlane"
msgstr ""

#: ../style_sheets.md:319
msgid "``partition``"
msgstr ""

#: ../style_sheets.md:320
msgid "Interactions"
msgstr ""

#: ../style_sheets.md:320
msgid "Reflexive message"
msgstr ""

#: ../style_sheets.md:320
msgid "``message``"
msgstr ""

#: ../style_sheets.md:321
#: ../style_sheets.md:322
msgid "States"
msgstr ""

#: ../style_sheets.md:321
msgid "Initial Pseudostate"
msgstr ""

#: ../style_sheets.md:321
#: ../style_sheets.md:322
msgid "``pseudostate``"
msgstr ""

#: ../style_sheets.md:322
msgid "History Pseudostate"
msgstr ""

#: ../style_sheets.md:323
msgid "Profiles"
msgstr ""

#: ../style_sheets.md:323
msgid "Metaclass"
msgstr ""

#: ../style_sheets.md:323
msgid "``class``"
msgstr ""

#: ../style_sheets.md:324
#: ../style_sheets.md:325
#: ../style_sheets.md:326
#: ../style_sheets.md:327
#: ../style_sheets.md:328
msgid "C4 Model"
msgstr ""

#: ../style_sheets.md:324
msgid "Person"
msgstr ""

#: ../style_sheets.md:324
msgid "``c4person``"
msgstr ""

#: ../style_sheets.md:325
msgid "Software System"
msgstr ""

#: ../style_sheets.md:325
msgid "``c4container[type=\"Software System\"]``"
msgstr ""

#: ../style_sheets.md:326
msgid "Component"
msgstr ""

#: ../style_sheets.md:326
msgid "``c4container[type=\"Component\"]``"
msgstr ""

#: ../style_sheets.md:327
msgid "Container"
msgstr ""

#: ../style_sheets.md:327
msgid "``c4container[type=\"Container\"]``"
msgstr ""

#: ../style_sheets.md:328
msgid "Container: Database"
msgstr ""

#: ../style_sheets.md:328
msgid "``c4database``"
msgstr ""

#: ../style_sheets.md:329
#: ../style_sheets.md:330
#: ../style_sheets.md:331
msgid "SysML"
msgstr ""

#: ../style_sheets.md:329
msgid "ValueType"
msgstr ""

#: ../style_sheets.md:329
#: ../style_sheets.md:330
msgid "``datatype``"
msgstr ""

#: ../style_sheets.md:330
msgid "Primitive"
msgstr ""

#: ../style_sheets.md:331
msgid "Derive Requirement"
msgstr ""

#: ../style_sheets.md:331
msgid "``derivedreq``"
msgstr ""

#: ../style_sheets.md:332
msgid "RAAML"
msgstr ""

#: ../style_sheets.md:332
msgid "FTA"
msgstr ""

#: ../style_sheets.md:332
msgid "any AND/OR/… Gate"
msgstr ""

#: ../style_sheets.md:332
msgid "``and``, ``or``, etc."
msgstr ""

#: ../style_sheets.md:337
msgid "Ideas"
msgstr ""

#: ../style_sheets.md:339
msgid "Here are some ideas that go just beyond changing a color or a font. With the following examples we dig in to Gaphor's model structure to reveal more information to the users."
msgstr ""

#: ../style_sheets.md:343
msgid "To create your own expression you may want to use the Console (![Menu icon](images/open-menu-symbolic.svg) → Tools → Console). Drop us a line on [Gitter](https://gitter.im/gaphor/Lobby) and we would be happy to help you."
msgstr ""

#: ../style_sheets.md:346
msgid "The drafts package"
msgstr ""

#: ../style_sheets.md:348
msgid "All diagrams in the package \"Drafts\" should be drawn using sloppy lines:"
msgstr ""

#: ../style_sheets.md:360
msgid "draft style"
msgstr ""

#: ../style_sheets.md:365
msgid "Wrap long attributes, operations, and stereotype values"
msgstr ""

#: ../style_sheets.md:367
msgid "Sometimes attribute values get a bit lengthy. By default, Gaphor will not wrap text. If you want to, you can add this little snippet to wrap text for lengthy attributes on classes. You can also apply this to other types, of course."
msgstr ""

#: ../style_sheets.md:377
msgid "wrap long attribute"
msgstr ""

#: ../style_sheets.md:382
msgid "Unconnected relationships"
msgstr ""

#: ../style_sheets.md:384
msgid "All items on a diagram that are not backed by a model element, should be drawn in a dark red color. This can be used to spot not-so-well connected relationships, such as Generalization, Implementation, and Dependency. These items will only be backed by a model element once you connect both line ends. This rule will exclude simple elements, like lines and boxes, which will never have a backing model element."
msgstr ""

#: ../style_sheets.md:397
msgid "unconnected relationship"
msgstr ""

#: ../style_sheets.md:402
msgid "Navigable associations"
msgstr ""

#: ../style_sheets.md:404
msgid "An example of how to apply a style to a navigable association is to color an association blue if neither of the ends are navigable. This color could act as a validation rule for a model where at least one end of each association should be navigable. This is actually the case for the model file used to create Gaphor's data model."
msgstr ""

#: ../style_sheets.md:416
msgid "navigable association"
msgstr ""

#: ../style_sheets.md:421
msgid "Solid Control Flow lines"
msgstr ""

#: ../style_sheets.md:423
msgid "In Gaphor, Control Flow lines follow the SysML styling: dashed. If you want, or need to strictly follow the official UML specifications, you can simply make those solid lines."
msgstr ""

#: ../style_sheets.md:433
msgid "control flow"
msgstr ""

#: ../style_sheets.md:438
msgid "Todo note highlight"
msgstr ""

#: ../style_sheets.md:440
msgid "All comments beginning with the phrase \"todo\" can be highlighted in a different user-specific colour. This can be used to make yourself aware that you have to do some additional work to finalize the diagram."
msgstr ""

#: ../style_sheets.md:450
msgid "highlighted todo note"
msgstr ""

#: ../style_sheets.md:455
msgid "Emphesize abstract classes and operations"
msgstr ""

#: ../style_sheets.md:457
msgid "It may be that the italic font used is not distinguishable enough to differentiate between concrete and abstract classes or operations. To make this work we check if the `isAbstract` attribute is set on the element:"
msgstr ""

#: ../style_sheets.md:467
msgid "emphasize abstract elements"
msgstr ""

#: ../style_sheets.md:472
msgid "System Style Sheet"
msgstr ""

#: ../undo.md:1
msgid "Undo Manager"
msgstr ""

#: ../undo.md:3
msgid "Undo is a required feature in modern applications. Gaphor is no exception. Having an undo function in place means you can change the model and easily revert to an older state."
msgstr ""

#: ../undo.md:7
msgid "Overview of Transactions"
msgstr ""

#: ../undo.md:9
msgid "The recording and playback of changes in Gaphor is handled by the the Undo Manager. The Undo Manager works transactionally. A transaction must succeed or fail as a complete unit. If the transaction fails in the middle, it is rolled back. In Gaphor this is achieved by the :mod:`~gaphor.transaction` module, which provides a context manager :obj:`~gaphor.transaction.Transaction`."
msgstr ""

#: ../undo.md:16
msgid "When transactions take place, they emit events when the top-most transaction begins and is finished. The event notifications are for the begin of the transaction, and the commit of the transaction if it is successful or the rollback of the transaction if it fails."
msgstr ""

#: ../undo.md:20
msgid "The Undo Manager only allows changes to be made in a transaction. If a change is made outside a transaction, an exception is raised."
msgstr ""

#: ../undo.md:23
msgid "Start of a Transaction"
msgstr ""

#: ../undo.md:25
msgid "A `Transaction` object is created."
msgstr ""

#: ../undo.md:26
msgid "`TransactionBegin` event is emitted."
msgstr ""

#: ../undo.md:27
msgid "The `UndoManager` instantiates a new `ActionStack` which is the transaction object, and adds the undo action to the stack."
msgstr ""

#: ../undo.md:30
msgid "Nested transactions are supported to allow a transaction to be added inside of another transaction that is already in progress."
msgstr ""

#: ../undo.md:33
msgid "Successful Transaction"
msgstr ""

#: ../undo.md:35
msgid "A `TransactionCommit` event is emitted"
msgstr ""

#: ../undo.md:36
msgid "The `UndoManager` closes and stores the transaction."
msgstr ""

#: ../undo.md:38
msgid "Failed Transaction"
msgstr ""

#: ../undo.md:40
msgid "A `TransactionRollback` event is emitted."
msgstr ""

#: ../undo.md:41
msgid "The `UndoManager` plays back all the recorded actions, but does not store it."
msgstr ""

#: ../undo.md:44
msgid "Transaction API"
msgstr ""

#: ../undo.md:47
msgid "You only require transactions if the undo manager is active."
msgstr ""

#: ../../gaphor/transaction.py:docstring of gaphor.transaction.Transaction:1
msgid "The transaction."
msgstr ""

#: ../../gaphor/transaction.py:docstring of gaphor.transaction.Transaction:3
msgid "On start and end of a transaction an event is emitted. Transactions can be nested. Events are only emitted when the outermost transaction begins and finishes."
msgstr ""

#: ../../gaphor/transaction.py:docstring of gaphor.transaction.Transaction:7
msgid "Note that transactions are a global construct."
msgstr ""

#: ../../gaphor/transaction.py:docstring of gaphor.transaction.Transaction:12
msgid "Transactions can be nested. If the outermost transaction is committed or rolled back, an event is emitted."
msgstr ""

#: ../../gaphor/transaction.py:docstring of gaphor.transaction.Transaction:15
msgid "It's most convenient to use ``Transaction`` as a context manager:"
msgstr ""

#: ../../gaphor/transaction.py:docstring of gaphor.transaction.Transaction:22
msgid "Events can be handled programmatically, although this is discouraged:"
msgstr ""

#: ../../gaphor/transaction.py:docstring of gaphor.transaction.Transaction.commit:1
msgid "Commit the transaction."
msgstr ""

#: ../../gaphor/transaction.py:docstring of gaphor.transaction.Transaction.commit:3
msgid "The transaction is closed. A :obj:`~gaphor.event.TransactionCommit` event is emitted. If the transaction needs to be rolled back, a :obj:`~gaphor.event.TransactionRollback` event is emitted instead."
msgstr ""

#: ../../gaphor/transaction.py:docstring of gaphor.transaction.Transaction.in_transaction:1
msgid "Are you running inside a transaction?"
msgstr ""

#: ../../gaphor/transaction.py:docstring of gaphor.transaction.Transaction.mark_rollback:1
msgid "Mark the transaction for rollback."
msgstr ""

#: ../../gaphor/transaction.py:docstring of gaphor.transaction.Transaction.mark_rollback:3
msgid "This operation itself will not close the transaction, instead it will allow you to elegantly revert changes."
msgstr ""

#: ../../gaphor/transaction.py:docstring of gaphor.transaction.Transaction.rollback:1
msgid "Roll-back the transaction."
msgstr ""

#: ../../gaphor/transaction.py:docstring of gaphor.transaction.Transaction.rollback:3
msgid "First, the transaction is closed. A :obj:`~gaphor.event.TransactionRollback` event is emitted."
msgstr ""

#: ../../gaphor/event.py:docstring of gaphor.event.TransactionBegin:1
msgid "This event denotes the beginning of a transaction."
msgstr ""

#: ../../gaphor/event.py:docstring of gaphor.event.TransactionBegin:3
msgid "Nested (sub-) transactions should not emit this signal."
msgstr ""

#: ../../gaphor/event.py:docstring of gaphor.event.TransactionCommit:1
msgid "This event is emitted when a transaction (toplevel) is successfully committed."
msgstr ""

#: ../../gaphor/event.py:docstring of gaphor.event.TransactionRollback:1
msgid "This event is emitted to tell the operation has failed."
msgstr ""

#: ../../gaphor/event.py:docstring of gaphor.event.TransactionRollback:3
msgid "If a set of operations fail (e.i. due to an exception) the transaction should be marked for rollback."
msgstr ""

#: ../undo.md:61
msgid "References"
msgstr ""

#: ../undo.md:63
msgid "`A Framework for Undoing Actions in Collaborative Systems <http://web.eecs.umich.edu/~aprakash/papers/undo-tochi94.pdf>`_"
msgstr ""

#: ../undo.md:65
msgid "`Undoing Actions in Collaborative Work: Framework and Experience <https://www.eecs.umich.edu/techreports/cse/94/CSE-TR-196-94.pdf>`_"
msgstr ""

#: ../undo.md:67
msgid "`Implementing a Selective Undo Framework in Python <https://legacy.python.org/workshops/1997-10/proceedings/zukowski.html>`_"
msgstr ""

#: ../windows.md:1
msgid "Gaphor on Windows"
msgstr ""

#: ../windows.md:3
msgid "Gaphor can be installed as with our installer. Check out the [Gaphor download page](https://gaphor.org/download#windows) for details."
msgstr ""

#: ../windows.md:13
msgid "WinGet"
msgstr ""

#: ../windows.md:15
msgid "We recommend using [WinGet](https://learn.microsoft.com/en-us/windows/package-manager/winget) as a package manager in Windows. It is available on Windows 11 and modern versions of Windows 10 as a part of the App Installer."
msgstr ""

#: ../windows.md:18
msgid "If you have a slightly older version of Windows, you can alternatively use [Chocolatey](https://chocolatey.org) as a package manager. After it is installed, execute `choco install` instead of the `winget install` commands below."
msgstr ""

#: ../windows.md:21
msgid "Git"
msgstr ""

#: ../windows.md:23
msgid "To set up a development environment in Windows first install [Git](https://gitforwindows.org) by executing as an administrator:"
msgstr ""

#: ../windows.md:30
msgid "GTK and Python with Gvsbuild"
msgstr ""

#: ../windows.md:32
msgid "Gvsbuild provides pre-built GTK libraries for Windows. We will install these libraries and Python."
msgstr ""

#: ../windows.md:35
msgid "Install the Latest Python"
msgstr ""

#: ../windows.md:37
msgid "In Windows, The full installer contains all the Python components and is the best option for developers using Python for any kind of project."
msgstr ""

#: ../windows.md:40
msgid "For more information on how to use the official installer, please see the [full installer instructions](https://docs.python.org/3/using/windows.html#windows-full). The default installation options should be fine for use with Gaphor."
msgstr ""

#: ../windows.md:44
msgid "Install the latest Python version using the [official installer](https://www.python.org/downloads/windows/)."
msgstr ""

#: ../windows.md:47
msgid "Open a PowerShell terminal as a normal user and check the python version:"
msgstr ""

#: ../windows.md:53
msgid "Install Graphviz"
msgstr ""

#: ../windows.md:55
msgid "Graphviz is used by Gaphor for automatic diagram formatting."
msgstr ""

#: ../windows.md:57
msgid "Install from WinGet with administrator PowerShell:"
msgstr ""

#: ../windows.md:63
msgid "Install pipx"
msgstr ""

#: ../windows.md:65
msgid "From the regular user PowerShell terminal execute:"
msgstr ""

#: ../windows.md:71
msgid "Download GTK"
msgstr ""

#: ../windows.md:73
msgid "Download the latest release asset at https://github.com/wingtk/gvsbuild/releases. The file will be called `GTK4_Gvsbuild_VERSION_x64.zip`, where `VERSION` is the latest released version."
msgstr ""

#: ../windows.md:76
msgid "Unzip the `GTK4_Gvsbuild_VERSION_x64.zip` file to `C:\\gtk`. For example with 7Zip:"
msgstr ""

#: ../windows.md:82
msgid "The resulting directory structure should look like:"
msgstr ""

#: ../windows.md:94
msgid "Setup Gaphor"
msgstr ""

#: ../windows.md:96
msgid "In the same PowerShell terminal, clone the repository:"
msgstr ""

#: ../windows.md:103
msgid "Install Poetry"
msgstr ""

#: ../windows.md:108
msgid "Add GTK to your environmental variables:"
msgstr ""

#: ../windows.md:116
msgid "You can also edit your account's Environmental Variables to persist across PowerShell sessions."
msgstr ""

#: ../windows.md:119
msgid "Install Gaphor's dependencies"
msgstr ""

#: ../windows.md:124
#: ../windows.md:155
msgid "Reinstall PyGObject and pycairo using gvsbuild wheels"
msgstr ""

#: ../windows.md:130
#: ../windows.md:164
msgid "Launch Gaphor!"
msgstr ""

#: ../windows.md:135
msgid "Setting Up A Plugin Workspace for Gaphor"
msgstr ""

#: ../windows.md:137
msgid "When setting up a plugin workspace you need to perform the following steps:"
msgstr ""

#: ../windows.md:139
#: ../windows.md:197
msgid "cd (your project's workspace)"
msgstr ""

#: ../windows.md:141
msgid "If your project does not already have a pyproject.toml file, create one. For details see the [Poetry documentation](https://python-poetry.org/docs/basic-usage/). If you already have a .toml file, make sure you have gaphor as a development dependency. For details see the [Gaphor Hello World Plugin](https://github.com/gaphor/gaphor_plugin_helloworld)."
msgstr ""

#: ../windows.md:149
msgid "Install your project's dependencies. If you have made your project dependent upon Gaphor, this will pull in Gaphor."
msgstr ""

#: ../windows.md:161
msgid "Note that if you have forgotten to reinstall PyGObject and pycairo, the first time you add an element to a diagram that has text, gaphor will crash!"
msgstr ""

#: ../windows.md:171
msgid "Start a new PowerShell terminal, and set current directory to the project folder:"
msgstr ""

#: ../windows.md:176
msgid "Ensure that path environment variable is set:"
msgstr ""

#: ../windows.md:181
msgid "Start Visual Studio Code:"
msgstr ""

#: ../windows.md:186
msgid "To start the debugger, execute the following steps:"
msgstr ""

#: ../windows.md:187
msgid "Open `__main__.py` file from `gaphor` folder"
msgstr ""

#: ../windows.md:188
msgid "Add a breakpoint on line `main(sys.argv)`"
msgstr ""

#: ../windows.md:189
msgid "In the menu, select Run → Start debugging"
msgstr ""

#: ../windows.md:190
#: ../windows.md:201
msgid "Choose Select module from the list"
msgstr ""

#: ../windows.md:191
#: ../windows.md:202
msgid "Enter `gaphor` as module name"
msgstr ""

#: ../windows.md:193
msgid "Visual Studio Code will start the application in debug mode, and will stop at main."
msgstr ""

#: ../windows.md:195
msgid "Debugging Your Plugin Using Visual Studio Code"
msgstr ""

#: ../windows.md:199
msgid "Start gaphor:"
msgstr ""

#: ../windows.md:200
msgid "In the VSCode menu, select Run → Start debugging"
msgstr ""

#: ../windows.md:204
msgid "Your plugin should appear under the Tools menu."
msgstr ""

#: ../windows.md:206
msgid "Packaging for Windows"
msgstr ""

#: ../windows.md:208
msgid "In order to create an exe installation package for Windows, we utilize [PyInstaller](https://pyinstaller.org) which analyzes Gaphor to find all the dependencies and bundle them in to a single folder. We then use a custom bash script that creates a Windows installer using [NSIS](https://nsis.sourceforge.io/Main_Page) and a portable installer using [7-Zip](https://www.7-zip.org). To install them, open PowerShell as an administrator, then execute:"
msgstr ""

#: ../windows.md:220
msgid "Then build your installer using:"
msgstr ""

#: ../windows.md:229
msgid "Limited Anaconda Install"
msgstr ""

#: ../windows.md:231
msgid "Sometimes, it may be helpful to call Gaphor functionality from a python console on computers without the ability for a full development install (e.g., without administrative privileges). Because not all necessary Gaphor build dependencies (specifically,  `gtksourceview5` and `libadwaita`) are not available as anaconda packages, you will not be able to build the program or instantiate/run application classes like `Application` and `Session`."
msgstr ""

#: ../windows.md:233
msgid "However, this setup can still be helpful if you want to use or call Gaphor as a library in the context of a larger project. In these cases, Gaphor can be installed as a package in an anaconda environment using the following process:"
msgstr ""

#: ../windows.md:236
msgid "Create new anaconda environment"
msgstr ""

#: ../windows.md:238
msgid "If you use anaconda for other projects, it's a good idea to create a new environment for Gaphor, so that its dependencies don't end up conflicting with your pre-existing development environment. To do this, run the following command from anaconda prompt:"
msgstr ""

#: ../windows.md:244
msgid "where ``gaphor'' can be any name desired for the environment."
msgstr ""

#: ../windows.md:246
msgid "Update packages in the new environment"
msgstr ""

#: ../windows.md:248
msgid "Get the most recent packages using:"
msgstr ""

#: ../windows.md:254
msgid "Install dependencies"
msgstr ""

#: ../windows.md:256
msgid "The following Gaphor dependencies are installable from anaconda:"
msgstr ""

#: ../windows.md:261
msgid "Unfortunately, the `gtksourceview5` and `libadwaita` dependencies are not available as anaconda packages. So you may not be able to fully build/run the program in this environment."
msgstr ""

#: ../windows.md:263
msgid "Set up your development environment"
msgstr ""

#: ../windows.md:265
msgid "Now, to develop with Gaphor, you will want to set it up with your development. If you want to work with `ipython`, install it below:"
msgstr ""

#: ../windows.md:269
msgid "VSCode Tips"
msgstr ""

#: ../windows.md:270
msgid "VSCode should work out-of-the box if it is already installed. Just set 'gaphor' as the kernel in your VSCode Profile or notebook."
msgstr ""

#: ../windows.md:272
msgid "Spyder Tips"
msgstr ""

#: ../windows.md:273
msgid "You can install spyder in this environment using `conda install spyder`."
msgstr ""

#: ../windows.md:275
msgid "If this does not work, (i.e., if `conda install spyder` reveals conflicts), you can instead use the following workaround:"
msgstr ""

#: ../windows.md:279
msgid "Then, in spyder, set 'gaphor' as your python interpreter"
msgstr ""

#: ../windows.md:281
msgid "Install Gaphor"
msgstr ""

#: ../windows.md:283
msgid "From a python console running within your new anaconda environment, you may then install Gaphor using pip:"
msgstr ""
